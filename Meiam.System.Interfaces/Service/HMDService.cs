//------------------------------------------------------------------------------
// <auto-generated>
//     此代码已从模板生成手动更改此文件可能导致应用程序出现意外的行为。
//     如果重新生成代码，将覆盖对此文件的手动更改。
//     author MEIAM
// </auto-generated>
//------------------------------------------------------------------------------
using Meiam.System.Model;
using System.Threading.Tasks;
using System;
using Microsoft.Extensions.Logging;
using Microsoft.EntityFrameworkCore;
using System.Collections.Generic;
using Microsoft.Data.SqlClient;
using System.Data.Common;
using Microsoft.Extensions.Configuration;
using DocumentFormat.OpenXml.Office2013.Word;
using Meiam.System.Common;
using SqlSugar;
using System.Data;
using System.Linq;
using Newtonsoft.Json;
using Meiam.System.Model.Dto;

namespace Meiam.System.Interfaces
{
    /// <summary>
    /// 恒铭达
    /// </summary>
    public class HMDService : BaseService<INSPECT_TENSILE_D>, IHMDService
    {

        public HMDService(IUnitOfWork unitOfWork) : base(unitOfWork)
        {
        }

        private readonly ILogger<HMDService> _logger;
        private readonly string _connectionString;
        private readonly ISqlSugarClient _oracleDb;

        public HMDService(ISqlSugarClient sqlSugar, IUnitOfWork unitOfWork, ILogger<HMDService> logger) : base(unitOfWork)
        {
            _logger = logger;
            _oracleDb = sqlSugar;
        }


        #region ProcessHMDInspectDataAsync
        public async Task<ApiResponse> ProcessHMDInspectDataAsync(HMDInputDto input)
        {
            _logger.LogInformation("开始同步恒铭达检测数据");

            try
            {
                //foreach (var request in requests) {
                //    // 验证数据
                //    ValidateRequest(request);

                //    //判断重复 工单+生产机台号+生产日期+检测类型
                //    bool isExist = Db.Ado.GetInt($@"SELECT count(*) FROM INSPECT_FPI WHERE MESFirstInspectID = '{request.ID}' AND MOID = '{request.MOID}' AND OrgID = '{request.ORGID}'") > 0;
                //    if (isExist) {
                //        _logger.LogWarning($"首检单据已存在: {request.ID}");
                //        continue;
                //    }

                //    // 生成FPI检验单号
                //    var inspectionFpiId = GenerateInspectionFpiId();
                //    _logger.LogInformation("生成检验单号: {InspectionFpiId}", inspectionFpiId);

                //    // 业务处理
                //    _logger.LogDebug("正在处理首检单据...");
                //    ProcessFirstArticleInspection(request, inspectionFpiId);

                //    _logger.LogInformation("工单首检数据同步成功，工单号: {MOID}", request.MOID);
                //}
                await Task.Delay(10);
                _logger.LogInformation("恒铭达检测数据同步完成!");
                return new ApiResponse
                {
                    Success = true,
                    Message = "恒铭达检测数据同步成功",
                };
            }
            catch (Exception ex)
            {
                return new ApiResponse
                {
                    Success = false,
                    Message = $"恒铭达检测数据同步失败：{ex.Message}"
                };
            }
        }
        #endregion

        #region 同步收货数据
        public async Task SyncRcDataAsync(string lastSyncTime)
        {
            _logger.LogInformation("开始处理收料通知单");
            try
            {
                _logger.LogInformation("开始同步QMS_RC_VIEW数据...");

                // 从Oracle视图查询增量数据
                var oracleData = await _oracleDb.Ado.SqlQueryAsync<dynamic>(
                    $"SELECT rvb02, rva01, rvb05, rvb051, rvb07, rva06, ima021, rvb38, rvbud07, rvbud01, rvbud08, rvbud13, rvbud14, pmc03, rva05, rvadate " +
                    $"FROM qms_rc_view " +
                    $"WHERE TO_DATE(rvadate, 'YYYY-MM-DD HH24:MI:SS') > TO_DATE('{lastSyncTime:yyyy-MM-dd HH:mm:ss}', 'YYYY-MM-DD HH24:MI:SS')");

                if (oracleData.Any())
                {
                    // 转换为目标实体
                    var entities = oracleData.Select(x => new erp_rc
                    {
                        KEEID = x.rvb02,
                        ERP_ARRIVEDID = x.rva01,
                        ITEMID = x.rvb05,
                        ITEMNAME = x.rvb051,
                        LOT_QTY = x.rvb07,
                        APPLY_DATE = x.rva06,
                        MODEL_SPEC = x.ima021,
                        LOTNO = x.rvb38,
                        LENGTH = x.rvbud07,
                        WIDTH = x.rvbud01,
                        INUM = x.rvbud08,
                        PRO_DATE = x.rvbud13,
                        QUA_DATE = x.rvbud14,
                        SUPPNAME = x.pmc03,
                        SUPPID = x.rva05,
                        INSPECT_FPICREATEDATE = x.rvadate
                    });

                    foreach (var entity in entities)
                    {
                        //判断重复
                        bool isExist = Db.Ado.GetInt($@"SELECT count(*) FROM INSPECT_IQC WHERE ITEMID = '{entity.ITEMID}' AND LOTNO = '{entity.LOTNO}' ") > 0;
                        if (isExist)
                        {
                            _logger.LogWarning($"收料通知单已存在: {entity.KEEID}");
                            continue;
                        }

                        // 生成检验单号
                        var inspectionId = GenerateInspectionId();
                        _logger.LogInformation("生成检验单号: {InspectionId}", inspectionId);

                        // 保存到数据库
                        _logger.LogDebug("正在保存收料通知单到数据库...");
                        try
                        {
                            SaveRcDataToDatabase(entity, inspectionId);
                        }
                        catch (Exception ex)
                        {
                            _logger.LogError("保存收料通知单到数据库异常:" + ex.ToString());
                            throw;
                        }
                    }

                    _logger.LogInformation($"成功同步{entities.Count()}条QMS_RC_VIEW数据");
                }
                else
                {
                    _logger.LogInformation("没有需要同步的QMS_RC_VIEW数据");
                }

            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "同步QMS_RC_VIEW数据失败");
                throw;
            }
        }

        private string GenerateInspectionId()
        {
            string INSPECT_CODE = "";//检验单号

            const string sql = @"
                DECLARE @INSPECT_CODE  	  NVARCHAR(200) 

                --获得IQC检验单号
                SELECT TOP 1 @INSPECT_CODE=CAST(CAST(dbo.getNumericValue(INSPECT_IQCCODE) AS DECIMAL)+1 AS CHAR)  FROM  INSPECT_IQC
                WHERE  TENID='001' AND ISNULL(REPLACE(INSPECT_IQCCODE,'IQC_',''),'') like REPLACE(CONVERT(VARCHAR(10),GETDATE(),120),'-','')+'%' 
                ORDER BY INSPECT_IQCCODE DESC

                IF(ISNULL(@INSPECT_CODE,'')='')
                   SET @INSPECT_CODE ='IQC_'+REPLACE(CONVERT(VARCHAR(10),GETDATE(),120),'-','')+'001'
                ELSE 
                   SET @INSPECT_CODE ='IQC_'+@INSPECT_CODE

                SELECT @INSPECT_CODE AS INSPECT_CODE
                ";

            // 执行 SQL 命令
            var dataTable = Db.Ado.GetDataTable(sql);
            if (dataTable.Rows.Count > 0)
            {
                INSPECT_CODE = dataTable.Rows[0]["INSPECT_CODE"].ToString().Trim();
            }
            return INSPECT_CODE;
        }

        private void SaveRcDataToDatabase(erp_rc entity, string inspectionId)
        {
            string sql = @"
                INSERT INTO INSPECT_IQC (
                    TENID, INSPECT_IQCID, INSPECT_IQCCREATEUSER, 
                    INSPECT_IQCCREATEDATE, ITEMNAME, ERP_ARRIVEDID, 
                    LOT_QTY, INSPECT_IQCCODE, ITEMID, LOTNO, 
                    APPLY_DATE, ITEM_SPECIFICATION, QUA_DATE,
                    PRO_DATE, LENGTH, WIDTH, INUM, KEEID,
                    SUPPNAME, SUPPID, INSPECT_FPICREATEDATE
                ) VALUES (
                    @TenId, @InspectIqcId, @InspectIqcCreateUser, 
                    getdate(), @ItemName, @ErpArrivedId,
                    @LotQty, @InspectIqcCode, @ItemId, @LotNo, 
                    @ApplyDate, @ItemSpecification, @QuaDate,
                    @ProDate, @Length, @Width, @Inum, @KeeId,
                    @SuppName, @SuppId, @InspectFpiCreateDate
                )";

            // 定义参数
            var parameters = new SugarParameter[]
            {
                new SugarParameter("@TenId", "001"),
                new SugarParameter("@InspectIqcId", inspectionId),
                new SugarParameter("@InspectIqcCreateUser", "system"),
                new SugarParameter("@ItemName", entity.ITEMNAME),
                new SugarParameter("@ErpArrivedId", entity.ERP_ARRIVEDID),
                new SugarParameter("@LotQty", entity.LOT_QTY),
                new SugarParameter("@InspectIqcCode", inspectionId),
                new SugarParameter("@ItemId", entity.ITEMID),
                new SugarParameter("@LotNo", (entity.LOTNO==null?"":entity.LOTNO.ToString())),
                new SugarParameter("@ApplyDate", entity.APPLY_DATE),
                new SugarParameter("@ItemSpecification", entity.MODEL_SPEC),
                new SugarParameter("@QuaDate", entity.QUA_DATE),
                new SugarParameter("@ProDate", entity.PRO_DATE),
                new SugarParameter("@Length", entity.LENGTH),
                new SugarParameter("@Width", entity.WIDTH),
                new SugarParameter("@Inum", entity.INUM),
                new SugarParameter("@KeeId", entity.KEEID),
                new SugarParameter("@SuppName", entity.SUPPNAME),
                new SugarParameter("@SuppId", entity.SUPPID),
                new SugarParameter("@InspectFpiCreateDate", entity.INSPECT_FPICREATEDATE)
            };

            // 执行 SQL 命令
            Db.Ado.ExecuteCommand(sql, parameters);
        }
        #endregion

        #region 同步报工数据
        public async Task SyncWrDataAsync(string lastSyncTime)
        {
            _logger.LogInformation("开始处理报工单");
            try
            {
                _logger.LogInformation("开始同步QMS_WR_VIEW数据...");

                var oracleData = await _oracleDb.Ado.SqlQueryAsync<dynamic>(
                    $"SELECT shb05, sfb08, shb111, shb10, ima02, shb02, shb09, eci06, shbdate  " +
                    $"FROM qms_wr_view " +
                    $"WHERE TO_DATE(shbdate, 'YYYY-MM-DD HH24:MI:SS') > TO_DATE('{lastSyncTime:yyyy-MM-dd HH:mm:ss}', 'YYYY-MM-DD HH24:MI:SS')");

                if (oracleData.Any())
                {
                    var entities = oracleData.Select(x => new erp_wr
                    {
                        MOID = x.shb05,
                        LOT_QTY = x.sfb08,
                        REPORT_QTY = x.shb111,
                        ITEMID = x.shb10,
                        ITEMNAME = x.ima02,
                        CREATEDATE = x.shb02,
                        INSPECT02CODE = x.shb09,
                        INSPECT02NAME = x.eci06,
                        INSPECT_FPICREATEDATE = x.shbdate
                    });

                    foreach (var entity in entities)
                    {
                        //判断重复
                        bool isExist = Db.Ado.GetInt($@"SELECT count(*) FROM INSPECT_SI WHERE MOID = '{entity.MOID}' AND ITEMID = '{entity.ITEMID}' AND CREATEDATE = '{entity.CREATEDATE}' ") > 0;
                        if (isExist)
                        {
                            _logger.LogWarning($"报工单已存在: {entity.MOID}");
                            continue;
                        }

                        // 保存到数据库
                        _logger.LogDebug("正在保存报工单到数据库...");
                        try
                        {
                            SaveWrDataToDatabase(entity);
                        }
                        catch (Exception ex)
                        {
                            _logger.LogError("保存报工单到数据库异常:" + ex.ToString());
                            throw;
                        }
                    }
                    _logger.LogInformation($"成功同步{entities.Count()}条QMS_WR_VIEW数据");
                }
                else
                {
                    _logger.LogInformation("没有需要同步的QMS_WR_VIEW数据");
                }

            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "同步QMS_WR_VIEW数据失败");
                throw;
            }
        }

        private void SaveWrDataToDatabase(erp_wr entity)
        {
            string sql = @"
                INSERT INTO INSPECT_SI (
                    MOID, LOT_QTY, REPORT_QTY, 
                    ITEMID, ITEMNAME, CREATEDATE, 
                    INSPECT02CODE, INSPECT02NAME, INSPECT_FPICREATEDATE
                ) VALUES (
                    @MoId, @LotQty, @ReportQty, 
                    @ItemId, @ItemName, @CreateDate,
                    @Inspect02Code, @Inspect02Name, @InspectFpiCreateDate
                )";

            // 定义参数
            var parameters = new SugarParameter[]
            {
                new SugarParameter("@MoId", entity.MOID),
                new SugarParameter("@LotQty", entity.LOT_QTY),
                new SugarParameter("@ReportQty", entity.REPORT_QTY),
                new SugarParameter("@ItemId", entity.ITEMID),
                new SugarParameter("@ItemName", entity.ITEMNAME),
                new SugarParameter("@CreateDate", entity.CREATEDATE),
                new SugarParameter("@Inspect02Code", entity.INSPECT02CODE),
                new SugarParameter("@Inspect02Name", entity.INSPECT02NAME),
                new SugarParameter("@InspectFpiCreateDate", entity.INSPECT_FPICREATEDATE)
            };

            // 执行 SQL 命令
            Db.Ado.ExecuteCommand(sql, parameters);
        }
        #endregion

        #region 同步物料数据
        public async Task SyncItemDataAsync(string lastSyncTime)
        {
            _logger.LogInformation("开始处理物料数据");
            try
            {
                _logger.LogInformation("开始同步QMS_ITEM_VIEW数据...");

                var oracleData = await _oracleDb.Ado.SqlQueryAsync<dynamic>(
                    $"SELECT ima01, ima02, ima06, ima901 " +
                    $"FROM qms_item_view " +
                    $"WHERE TO_DATE(ima901, 'YYYY-MM-DD HH24:MI:SS') > TO_DATE('{lastSyncTime:yyyy-MM-dd HH:mm:ss}', 'YYYY-MM-DD HH24:MI:SS')");

                if (oracleData.Any())
                {
                    var entities = oracleData.Select(x => new erp_item
                    {
                        ITEMID = x.ima01,
                        ITEMNAME = x.ima02,
                        ITEM_GROUPID = x.ima06,
                        INSPECT_FPICREATEDATE = x.ima901
                    });

                    var response = new MaterialSyncResponse
                    {
                        TotalCount = entities.Count()
                    };

                    foreach (var entity in entities)
                    {
                        try
                        {
                            SyncItemTable(entity);

                            response.SuccessCount++;
                        }
                        catch (Exception ex)
                        {
                            response.Details.Add(new MaterialSyncDetail
                            {
                                ITEMID = entity.ITEMID,
                                Error = ex.Message
                            });
                            response.FailedCount++;
                        }
                    }

                    if (response.FailedCount == 0)
                    {
                        await Db.Ado.CommitTranAsync();
                        response.Success = true;
                        response.Message = $"共{response.TotalCount}条数据，同步成功{response.SuccessCount}条，失败{response.FailedCount}条";
                    }
                    else
                    {
                        await Db.Ado.RollbackTranAsync();
                        response.Success = false;
                        response.Message = $"共{response.TotalCount}条数据，同步成功{response.SuccessCount}条，失败{response.FailedCount}条";
                    }

                }
                else
                {
                    _logger.LogInformation("没有需要同步的QMS_ITEM_VIEW数据");
                }

            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "同步QMS_ITEM_VIEW数据失败");
                throw;
            }
        }

        private void SyncItemTable(erp_item entity)
        {
            string sql = @"
                    MERGE INTO ITEM AS target
                    USING (SELECT @ItemId AS ITEMID, @ItemName AS ITEMNAME, @ItemGroupId AS ITEMGROUPID, @InspectFpiCreateDate AS INSPECTFPICREATEDATE) AS source
                    ON target.ITEMID = source.ITEMID
                    WHEN MATCHED THEN
                        UPDATE SET ITEMNAME = source.ITEMNAME,
                                   ITEM_GROUPID = source.ITEMGROUPID,
                                   INSPECT_FPICREATEDATE = source.INSPECTFPICREATEDATE,
                                   ITEMCREATEDATE = getdate()
                    WHEN NOT MATCHED THEN
                        INSERT (ITEMID, ITEMNAME, ITEM_GROUPID, INSPECT_FPICREATEDATE, ITEMCREATEUSER, ITEMCREATEDATE)
                        VALUES (source.ITEMID, source.ITEMNAME, source.ITEMGROUPID, source.INSPECTFPICREATEDATE, 'system', getdate());";
            // 定义参数
            var parameters = new SugarParameter[]
            {
                new SugarParameter("@ItemId", entity.ITEMID),
                new SugarParameter("@ItemName", entity.ITEMNAME),
                new SugarParameter("@ItemGroupId", entity.ITEM_GROUPID),
                new SugarParameter("@InspectFpiCreateDate", entity.INSPECT_FPICREATEDATE)
            };

            Db.Ado.ExecuteCommand(sql, parameters);
        }
        #endregion

        #region 同步供应商数据
        public async Task SyncVendDataAsync(string lastSyncTime)
        {
            _logger.LogInformation("开始处理供应商数据");
            try
            {
                _logger.LogInformation("开始同步QMS_VEND_VIEW数据...");

                var oracleData = await _oracleDb.Ado.SqlQueryAsync<dynamic>(
                    $"SELECT pmc03, pmc01, pmccrat " +
                    $"FROM qms_vend_view " +
                    $"WHERE TO_DATE(pmccrat, 'YYYY-MM-DD HH24:MI:SS') > TO_DATE('{lastSyncTime:yyyy-MM-dd HH:mm:ss}', 'YYYY-MM-DD HH24:MI:SS')");

                if (oracleData.Any())
                {
                    var entities = oracleData.Select(x => new erp_vend
                    {
                        SUPPNAME = x.pmc03,
                        SUPPID = x.pmc01,
                        INSPECT_FPICREATEDATE = x.pmccrat
                    });


                    var response = new SuppSyncResponse
                    {
                        TotalCount = entities.Count()
                    };

                    foreach (var entity in entities)
                    {
                        try
                        {
                            SyncSuppTable(entity);

                            response.SuccessCount++;
                        }
                        catch (Exception ex)
                        {
                            response.Details.Add(new SuppSyncDetail
                            {
                                SUPPID = entity.SUPPID,
                                Error = ex.Message
                            });
                            response.FailedCount++;
                        }
                    }

                    if (response.FailedCount == 0)
                    {
                        await Db.Ado.CommitTranAsync();
                        response.Success = true;
                        response.Message = $"共{response.TotalCount}条数据，同步成功{response.SuccessCount}条，失败{response.FailedCount}条";
                    }
                    else
                    {
                        await Db.Ado.RollbackTranAsync();
                        response.Success = false;
                        response.Message = $"共{response.TotalCount}条数据，同步成功{response.SuccessCount}条，失败{response.FailedCount}条";
                    }
                }
                else
                {
                    _logger.LogInformation("没有需要同步的QMS_VEND_VIEW数据");
                }

            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "同步QMS_VEND_VIEW数据失败");
                throw;
            }
        }

        private void SyncSuppTable(erp_vend item)
        {
            string sql = @"
                MERGE INTO SUPP AS target
                USING (SELECT @SuppId AS SUPPID, @SuppName AS SUPPNAME, @InspectFpiCreateDate AS INSPECTFPICREATEDATE) AS source
                ON target.SUPPID = source.SUPPID
                WHEN MATCHED THEN
                    UPDATE SET SUPPNAME = source.SUPPNAME,
                                INSPECT_FPICREATEDATE = source.INSPECTFPICREATEDATE,
                                SUPPCREATEDATE = getdate()
                WHEN NOT MATCHED THEN
                    INSERT (SUPPID, SUPPNAME, INSPECT_FPICREATEDATE, SUPPCREATEUSER, SUPPCREATEDATE)
                    VALUES (source.SUPPID, source.SUPPNAME, source.INSPECTFPICREATEDATE, 'system', getdate());";
            // 定义参数
            var parameters = new SugarParameter[]
            {
                new SugarParameter("@SuppId", item.SUPPID),
                new SugarParameter("@SuppName", item.SUPPNAME),
                new SugarParameter("@InspectFpiCreateDate", item.INSPECT_FPICREATEDATE)
            };

            Db.Ado.ExecuteCommand(sql, parameters);
        }
        #endregion

        #region 同步客户数据
        public async Task SyncCustDataAsync(string lastSyncTime)
        {
            _logger.LogInformation("开始处理客户数据");
            try
            {
                _logger.LogInformation("开始同步QMS_CUST_VIEW数据...");

                var oracleData = await _oracleDb.Ado.SqlQueryAsync<dynamic>(
                    $"SELECT ooc01, ooc02, occdate " +
                    $"FROM qms_cust_view " +
                    $"WHERE TO_DATE(occdate, 'YYYY-MM-DD HH24:MI:SS') > TO_DATE('{lastSyncTime:yyyy-MM-dd HH:mm:ss}', 'YYYY-MM-DD HH24:MI:SS')");

                if (oracleData.Any())
                {
                    var entities = oracleData.Select(x => new erp_cust
                    {
                        CUSTOMCODE = x.ooc01,
                        CUSTOMNAME = x.ooc02,
                        INSPECT_FPICREATEDATE = x.occdate
                    });

                    var response = new CustomerSyncResponse
                    {
                        TotalCount = entities.Count()
                    };

                    foreach (var entity in entities)
                    {
                        try
                        {
                            SyncCustomerTable(entity);

                            response.SuccessCount++;
                        }
                        catch (Exception ex)
                        {
                            response.Details.Add(new CustomerSyncDetail
                            {
                                CUSTOMCODE = entity.CUSTOMCODE,
                                Error = ex.Message
                            });
                            response.FailedCount++;
                        }
                    }

                    if (response.FailedCount == 0)
                    {
                        await Db.Ado.CommitTranAsync();
                        response.Success = true;
                        response.Message = $"共{response.TotalCount}条数据，同步成功{response.SuccessCount}条，失败{response.FailedCount}条";
                    }
                    else
                    {
                        await Db.Ado.RollbackTranAsync();
                        response.Success = false;
                        response.Message = $"共{response.TotalCount}条数据，同步成功{response.SuccessCount}条，失败{response.FailedCount}条";
                    }
                }
                else
                {
                    _logger.LogInformation("没有需要同步的QMS_CUST_VIEW数据");
                }

            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "同步QMS_CUST_VIEW数据失败");
                throw;
            }
        }

        private void SyncCustomerTable(erp_cust item)
        {
            string sql = @"
                MERGE INTO CUSTOM AS target
                USING (SELECT @CustomCode AS CUSTOMCODE, @CustomName AS CUSTOMNAME, @InspectFpiCreateDate AS INSPECTFPICREATEDATE) AS source
                ON target.CUSTOMCODE = source.CUSTOMCODE
                WHEN MATCHED THEN
                    UPDATE SET CUSTOMNAME = source.CUSTOMNAME,
                                INSPECT_FPICREATEDATE = source.INSPECTFPICREATEDATE,
                                CUSTOMCREATEDATE = getdate()
                WHEN NOT MATCHED THEN
                    INSERT (CUSTOMCODE, CUSTOMNAME, INSPECT_FPICREATEDATE, CUSTOMCREATEUSER, CUSTOMCREATEDATE)
                    VALUES (source.CUSTOMCODE, source.CUSTOMNAME, source.INSPECTFPICREATEDATE, 'system', getdate());";
            // 定义参数
            var parameters = new SugarParameter[]
            {
                new SugarParameter("@CustomCode", item.CUSTOMCODE),
                new SugarParameter("@CustomName", item.CUSTOMNAME),
                new SugarParameter("@InspectFpiCreateDate", item.INSPECT_FPICREATEDATE)
            };

            Db.Ado.ExecuteCommand(sql, parameters);
        }
        #endregion

        #region 获取上次同步时间
        public string GetLastSyncTime(string tableName, string timeFieldName)
        {
            try
            {
                string sql = $"SELECT CONVERT(VARCHAR(20), MAX({timeFieldName}), 120) AS LastTimeStr FROM {tableName}";

                //string sql = $"SELECT CONVERT(VARCHAR(20), MAX(INSPECT_IQCCREATEDATE), 120) AS LastTimeStr FROM {tableName}";

                string result = Db.Ado.GetString(sql);
                if (string.IsNullOrEmpty(result))
                {
                    return "1900-01-01 00:00:00"; // 默认最小时间
                }

                return result;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, $"获取表{tableName}的最后同步时间失败");
                return "1900-01-01 00:00:00";// 默认最小时间
            }

        }
        #endregion

    }
}
