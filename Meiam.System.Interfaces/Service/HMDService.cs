//------------------------------------------------------------------------------
// <auto-generated>
//     此代码已从模板生成手动更改此文件可能导致应用程序出现意外的行为。
//     如果重新生成代码，将覆盖对此文件的手动更改。
//     author MEIAM
// </auto-generated>
//------------------------------------------------------------------------------
using Meiam.System.Model;
using System.Threading.Tasks;
using System;
using Microsoft.Extensions.Logging;
using Microsoft.EntityFrameworkCore;
using System.Collections.Generic;
using Microsoft.Data.SqlClient;
using System.Data.Common;
using Microsoft.Extensions.Configuration;
using DocumentFormat.OpenXml.Office2013.Word;
using Meiam.System.Common;
using SqlSugar;
using System.Data;
using System.Linq;
using Newtonsoft.Json;
using Meiam.System.Model.Dto;
using System.Reflection.Emit;
using Microsoft.IdentityModel.Tokens;
using Aspose.Pdf.Operators;
using Microsoft.EntityFrameworkCore.Metadata;
using System.Numerics;
using System.Text;
using Meiam.System.Core;
using Oracle.ManagedDataAccess.Client;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using System.IO;
using System.Xml;
using System.ServiceModel;
using TiptopService;
using System.Text.Json;
using iText.StyledXmlParser.Jsoup.Nodes;
using DocumentFormat.OpenXml.Spreadsheet;
using static Meiam.System.Interfaces.HMDService;

namespace Meiam.System.Interfaces
{
    /// <summary>
    /// 恒铭达
    /// </summary>
    public class HMDService : BaseService<INSPECT_TENSILE_D>, IHMDService
    {

        public HMDService(IUnitOfWork unitOfWork, ILogger<HMDService> logger) : base(unitOfWork)
        {
            _logger = logger;
        }

        private readonly ILogger<HMDService> _logger;
        private readonly string _connectionString;
        private readonly IOracleSqlSugarClient _oracleDb;

        public HMDService(IOracleSqlSugarClient oracleSugar, IUnitOfWork unitOfWork, ILogger<HMDService> logger) : base(unitOfWork)
        {
            _logger = logger;
            _oracleDb = oracleSugar;
        }


        #region ProcessHMDData
        public async Task<ApiResponse> GetInspectSpecDataAsync(INSPECT_SYSM002_REQBYID input)
        {
            try
            {
                var parameters = new SugarParameter[] {
                  new SugarParameter("@SYSM001ID", input.SYSM001ID) };

                List<INSPECT_SYSM002_BYID> data = await Db.Ado.SqlQueryAsync<INSPECT_SYSM002_BYID>(
                    "select SYSM002ID,SYSM002NAME from SYSM002 where SYSM001ID = @SYSM001ID",
                    parameters
                );

                return new ApiResponse
                {
                    Success = true,
                    Message = "数据获取成功",
                    Data = JsonConvert.SerializeObject(data)
                };
            }
            catch (Exception ex)
            {
                return new ApiResponse
                {
                    Success = false,
                    Message = $"数据获取失败：{ex.Message}"
                };
            }
        }

        public async Task<ApiResponse> GetProgressDataByDocCodeAsync(INSPECT_REQCODE input)
        {
            try
            {
                var parameters = new SugarParameter[] {
                  new SugarParameter("@DOC_CODE", input.DOC_CODE) };

                List<INSPECT_PROGRESS_BYCODE> data = await Db.Ado.SqlQueryAsync<INSPECT_PROGRESS_BYCODE>(
                    "select INSPECT_PROGRESSNAME, INSPECT_PROGRESSID from INSPECT_PROGRESS where DOC_CODE = @DOC_CODE and INSPECT_DEV='INSPECT_DEV_002'",
                    parameters
                );

                return new ApiResponse
                {
                    Success = true,
                    Message = "数据获取成功",
                    Data = JsonConvert.SerializeObject(data)
                };
            }
            catch (Exception ex)
            {
                return new ApiResponse
                {
                    Success = false,
                    Message = $"数据获取失败：{ex.Message}"
                };
            }
        }
        public async Task<ApiResponse> GetInspectInfoByDocCodeAsync(INSPECT_REQCODE input)
        {
            try
            {
                var parameters = new SugarParameter[] {
                  new SugarParameter("@DOC_CODE", input.DOC_CODE) };

                var data = await Db.Ado.SqlQueryAsync<INSPECT_INFO_BYCODE>(
                    "select TOP 1 ITEMID,ITEMNAME,LOTNO,LOT_QTY from INSPECT_VIEW where INSPECT_CODE = @DOC_CODE",
                    parameters
                );

                return new ApiResponse
                {
                    Success = true,
                    Message = "数据获取成功",
                    Data = JsonConvert.SerializeObject(data.FirstOrDefault())
                };
            }
            catch (Exception ex)
            {
                return new ApiResponse
                {
                    Success = false,
                    Message = $"数据获取失败：{ex.Message}"
                };
            }
        }

        public async Task<ApiResponse> GetInspectInfoByConditionAsync(INSPECT_CONDITION input)
        {
            try
            {
                var parameters = new SugarParameter[] {
                    new SugarParameter("@ITEMID", string.IsNullOrEmpty(input.ITEMID) ? null : $"%{input.ITEMID}%"),
                    new SugarParameter("@ITEMNAME", string.IsNullOrEmpty(input.ITEMNAME) ? null : $"%{input.ITEMNAME}%"),
                    new SugarParameter("@DOC_CODE", string.IsNullOrEmpty(input.DOC_CODE) ? null : $"%{input.DOC_CODE}%"),
                    new SugarParameter("@LOTNO", string.IsNullOrEmpty(input.LOTNO) ? null : $"%{input.LOTNO}%"),
                    new SugarParameter("@LOT_QTY", string.IsNullOrEmpty(input.LOT_QTY) ? null : $"%{input.LOT_QTY}%"),
                 };
                // 构建基础SQL
                var sql = @"select INSPECT_CODE,ITEMID,ITEMNAME,LOTNO,LOT_QTY from INSPECT_VIEW 
            where PSTATE!='PSTATE_003'";
                // 动态添加条件（只添加值不为空的参数对应的条件）
                if (!string.IsNullOrEmpty(input.DOC_CODE))
                    sql += " and INSPECT_CODE like @DOC_CODE";
                if (!string.IsNullOrEmpty(input.ITEMID))
                    sql += " and ITEMID like @ITEMID";
                if (!string.IsNullOrEmpty(input.ITEMNAME))
                    sql += " and ITEMNAME like @ITEMNAME";
                if (!string.IsNullOrEmpty(input.LOTNO))
                    sql += " and LOTNO like @LOTNO";
                if (!string.IsNullOrEmpty(input.LOT_QTY))
                    sql += " and LOT_QTY = @LOT_QTY";
                // 执行查询
                var data = await Db.Ado.SqlQueryAsync<INSPECT_INFO_BYCODE>(sql, parameters);
                return new ApiResponse
                {
                    Success = true,
                    Message = "数据获取成功",
                    Data = JsonConvert.SerializeObject(data)
                };
            }
            catch (Exception ex)
            {
                return new ApiResponse
                {
                    Success = false,
                    Message = $"数据获取失败：{ex.Message}"
                };
            }
        }

        public async Task<ApiResponse> ProcessHMDInpectDev1DataAsync(InspectDev1Entity input)
        {
            try
            {
                // 1. 检查主表是否存在相同数据
                var checkSql = @"SELECT COUNT(1) FROM INSPECT_DEV1 
                                WHERE INSPECT_CODE = @INSPECT_CODE 
                                  AND INSPECT_PROGRESSID = @INSPECT_PROGRESSID 
                                  AND ITEMID = @ITEMID";

                var checkParams = new SugarParameter[]
                {
                    new SugarParameter("@INSPECT_CODE", input.INSPECT_CODE),
                    new SugarParameter("@INSPECT_PROGRESSID", input.INSPECT_PROGRESSID),
                    new SugarParameter("@ITEMID", input.ITEMID)
                };

                // 执行查询，判断是否存在
                var exists = await Db.Ado.GetIntAsync(checkSql, checkParams) > 0;

                // 2. 主表数据处理
                if (!exists)
                {
                    // 主表不存在，插入新主表数据
                    var mainSql = @"INSERT INTO INSPECT_DEV1 (
                        INSPECT_DEV1ID, INSPECT_CODE, INSPECT_PROGRESSID, ISBUILD, REMARK2,
                        ITEMID, INSPECT02CODE, ITEMNAME, INSPECTTYPE1, LOTID, LOT_QTY, SAMPLE_CNT, BATCHID,
                        DEFORMATION_START, DEFORMATION_END, DEFORMATION_START2, DEFORMATION_END2,
                        DEFORMATION_START3, DEFORMATION_END3, DEFORMATION_START4, DEFORMATION_END4,
                        DEFORMATION_START5, DEFORMATION_END5, PEOPLE02, APPEOPLE02, TENID,
                        INSPECT_DEV1CREATEUSER, INSPECT_DEV1CREATEDATE
                    ) VALUES (
                        @INSPECT_DEV1ID, @INSPECT_CODE, @INSPECT_PROGRESSID, @ISBUILD, @REMARK2,
                        @ITEMID, @INSPECT02CODE, @ITEMNAME, @INSPECTTYPE1, @LOTID, @LOT_QTY, @SAMPLE_CNT, @BATCHID,
                        @DEFORMATION_START, @DEFORMATION_END, @DEFORMATION_START2, @DEFORMATION_END2,
                        @DEFORMATION_START3, @DEFORMATION_END3, @DEFORMATION_START4, @DEFORMATION_END4,
                        @DEFORMATION_START5, @DEFORMATION_END5, @PEOPLE02, @APPEOPLE02, @TENID,
                        @INSPECT_DEV1CREATEUSER, @INSPECT_DEV1CREATEDATE
                    )";

                    var mainParams = new SugarParameter[]
                    {
                        new SugarParameter("@INSPECT_DEV1ID", input.INSPECT_DEV1ID),
                        new SugarParameter("@INSPECT_CODE", input.INSPECT_CODE),
                        new SugarParameter("@INSPECT_PROGRESSID", input.INSPECT_PROGRESSID),
                        new SugarParameter("@ISBUILD", input.ISBUILD),
                        new SugarParameter("@REMARK2", input.INSPECT_SPEC),
                        new SugarParameter("@ITEMID", input.ITEMID),
                        new SugarParameter("@INSPECT02CODE", input.INSPECT02CODE),
                        new SugarParameter("@ITEMNAME", input.ITEMNAME),
                        new SugarParameter("@INSPECTTYPE1", input.INSPECTTYPE1),
                        new SugarParameter("@LOTID", input.LOTID),
                        new SugarParameter("@LOT_QTY", input.LOT_QTY),
                        new SugarParameter("@SAMPLE_CNT", input.SAMPLE_CNT),
                        new SugarParameter("@BATCHID", input.BATCHID),
                        new SugarParameter("@DEFORMATION_START", input.DEFORMATION_START),
                        new SugarParameter("@DEFORMATION_END", input.DEFORMATION_END),
                        new SugarParameter("@DEFORMATION_START2", input.DEFORMATION_START2),
                        new SugarParameter("@DEFORMATION_END2", input.DEFORMATION_END2),
                        new SugarParameter("@DEFORMATION_START3", input.DEFORMATION_START3),
                        new SugarParameter("@DEFORMATION_END3", input.DEFORMATION_END3),
                        new SugarParameter("@DEFORMATION_START4", input.DEFORMATION_START4),
                        new SugarParameter("@DEFORMATION_END4", input.DEFORMATION_END4),
                        new SugarParameter("@DEFORMATION_START5", input.DEFORMATION_START5),
                        new SugarParameter("@DEFORMATION_END5", input.DEFORMATION_END5),
                        new SugarParameter("@PEOPLE02", input.PEOPLE02),
                        new SugarParameter("@APPEOPLE02", input.APPEOPLE02),
                        new SugarParameter("@TENID", input.TENID),
                        new SugarParameter("@INSPECT_DEV1CREATEUSER", input.INSPECT_DEV1CREATEUSER),
                        new SugarParameter("@INSPECT_DEV1CREATEDATE", input.INSPECT_DEV1CREATEDATE)
                    };

                    await Db.Ado.ExecuteCommandAsync(mainSql, mainParams);
                }
                else
                {
                    // 如果主表存在，获取已存在的主表ID用于关联明细
                    var getMainIdSql = @"SELECT INSPECT_DEV1ID FROM INSPECT_DEV1 
                                        WHERE INSPECT_CODE = @INSPECT_CODE 
                                          AND INSPECT_PROGRESSID = @INSPECT_PROGRESSID 
                                          AND ITEMID = @ITEMID";

                    var mainId = await Db.Ado.GetStringAsync(getMainIdSql, checkParams);
                    if (!string.IsNullOrEmpty(mainId))
                    {
                        input.INSPECT_DEV1ID = mainId; // 更新主表ID用于明细关联
                    }
                    else
                    {
                        throw new Exception("主表数据存在但获取ID失败");
                    }
                }

                // 3. 保存明细表数据（无论主表是否存在都追加明细）
                if (input.Details != null && input.Details.Count > 0)
                {
                    var detailSql = @"INSERT INTO INSPECT_TENSILE (
                        INSPECT_TENSILEID, ITEMNAME, TESTLOT, TESTTYPE, INSPECTTYPE1, INSPECT_DATE,
                        PEOPLE02, APPEOPLE02, X_AXIS, Y_AXIS, SAMPLEID, BATCHID, EAB, MPA, AREA,
                        THICKNESS, WIDTH, DEFORMATION_START, DEFORMATION_END, DEFORMATION_START2,
                        DEFORMATION_END2, DEFORMATION_START3, DEFORMATION_END3, DEFORMATION_START4,
                        DEFORMATION_END4, DEFORMATION_START5, DEFORMATION_END5, INSPECT_DEV1ID,
                        TENID, INSPECT_TENSILECREATEUSER, INSPECT_TENSILECREATEDATE
                    ) VALUES (
                        @INSPECT_TENSILEID, @ITEMNAME, @TESTLOT, @TESTTYPE, @INSPECTTYPE1, @INSPECT_DATE,
                        @PEOPLE02, @APPEOPLE02, @X_AXIS, @Y_AXIS, @SAMPLEID, @BATCHID, @EAB, @MPA, @AREA,
                        @THICKNESS, @WIDTH, @DEFORMATION_START, @DEFORMATION_END, @DEFORMATION_START2,
                        @DEFORMATION_END2, @DEFORMATION_START3, @DEFORMATION_END3, @DEFORMATION_START4,
                        @DEFORMATION_END4, @DEFORMATION_START5, @DEFORMATION_END5, @INSPECT_DEV1ID,
                        @TENID, @INSPECT_TENSILECREATEUSER, @INSPECT_TENSILECREATEDATE
                    )";

                    string INSPECT_DATE = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");//服务器时间
                    foreach (var detail in input.Details)
                    {
                        // 关联主表ID
                        detail.INSPECT_DEV1ID = input.INSPECT_DEV1ID;
                        if (detail.BATCHID == "NOSELECT")
                        {//客户端未勾选
                            continue;
                        }
                        bool containsInspectDate = DateTime.TryParse(detail.INSPECT_DATE, out DateTime inspectDate);
                        var detailParams = new SugarParameter[]
                        {
                            new SugarParameter("@INSPECT_TENSILEID", detail.INSPECT_TENSILEID),
                            new SugarParameter("@ITEMNAME", detail.ITEMNAME),
                            new SugarParameter("@TESTLOT", detail.TESTLOT),
                            new SugarParameter("@TESTTYPE", detail.TESTTYPE),
                            new SugarParameter("@INSPECTTYPE1", detail.INSPECTTYPE1),
                            new SugarParameter("@INSPECT_DATE",(containsInspectDate ? detail.INSPECT_DATE : INSPECT_DATE)),
                            new SugarParameter("@PEOPLE02", detail.PEOPLE02),
                            new SugarParameter("@APPEOPLE02", detail.APPEOPLE02),
                            new SugarParameter("@X_AXIS", detail.X_AXIS),
                            new SugarParameter("@Y_AXIS", detail.Y_AXIS),
                            new SugarParameter("@SAMPLEID", detail.SAMPLEID),
                            new SugarParameter("@BATCHID", detail.BATCHID),
                            new SugarParameter("@EAB", detail.EAB),
                            new SugarParameter("@MPA", detail.MPA),
                            new SugarParameter("@AREA", detail.AREA),
                            new SugarParameter("@THICKNESS", detail.THICKNESS),
                            new SugarParameter("@WIDTH", detail.WIDTH),
                            new SugarParameter("@DEFORMATION_START", detail.DEFORMATION_START),
                            new SugarParameter("@DEFORMATION_END", detail.DEFORMATION_END),
                            new SugarParameter("@DEFORMATION_START2", detail.DEFORMATION_START2),
                            new SugarParameter("@DEFORMATION_END2", detail.DEFORMATION_END2),
                            new SugarParameter("@DEFORMATION_START3", detail.DEFORMATION_START3),
                            new SugarParameter("@DEFORMATION_END3", detail.DEFORMATION_END3),
                            new SugarParameter("@DEFORMATION_START4", detail.DEFORMATION_START4),
                            new SugarParameter("@DEFORMATION_END4", detail.DEFORMATION_END4),
                            new SugarParameter("@DEFORMATION_START5", detail.DEFORMATION_START5),
                            new SugarParameter("@DEFORMATION_END5", detail.DEFORMATION_END5),
                            new SugarParameter("@INSPECT_DEV1ID", detail.INSPECT_DEV1ID),
                            new SugarParameter("@TENID", detail.TENID),
                            new SugarParameter("@INSPECT_TENSILECREATEUSER", detail.INSPECT_TENSILECREATEUSER),
                            new SugarParameter("@INSPECT_TENSILECREATEDATE", detail.INSPECT_TENSILECREATEDATE)
                        };

                        await Db.Ado.ExecuteCommandAsync(detailSql, detailParams);
                    }
                }

                return new ApiResponse
                {
                    Success = true,
                    Message = exists ? "主表数据已存在，仅明细细数据保存成功" : "主表和明细数据保存成功"
                };
            }
            catch (Exception ex)
            {
                return new ApiResponse
                {
                    Success = false,
                    Message = $"拉力机数据保存失败：{ex.Message}"
                };
            }
        }

        public async Task<ApiResponse> ProcessHMDInpectProcessDataAsync(List<INSPECT_PROGRESSDto> input)
        {
            try
            {
                if (input.Count == 0)
                {
                    return new ApiResponse
                    {
                        Success = false,
                        Message = $"传入数据为空!"
                    };
                }
                var firstEntity = input[0];
                var parameters = new SugarParameter[] {
                  new SugarParameter("@DOC_CODE", firstEntity.DOC_CODE) };

                // 1. 查询历史数据（包含版本、检验项目和顺序号）
                var dtOldData = Db.Ado.GetDataTable(
                    @"select VER,INSPECT_PROGRESSNAME,OID,INSPECT_CNT,INSPECT_PLANID
      from INSPECT_PROGRESS 
      where DOC_CODE = @DOC_CODE and COC_ATTR='COC_ATTR_001'",
                    parameters
                );

                var dtEnum = dtOldData.AsEnumerable();
                string newVer = "01"; // 新版本号
                int lastMaxVer = 0;   // 上一版本号（数字形式）

                // 2. 处理版本号逻辑
                if (dtOldData.Rows.Count > 0)
                {
                    lastMaxVer = dtEnum
                        .Select(row =>
                        {
                            int.TryParse(row["VER"].ToString().TrimStart('0'), out int v);
                            return v;
                        })
                        .Max();
                    newVer = (lastMaxVer + 1).ToString("00");
                }
                if (newVer == "01")
                {
                    int oIdIndex = 1;
                    int INSPECT_CNT = 0;
                    var entityType = firstEntity.GetType();
                    // 遍历A1到A64的所有属性
                    for (int i = 1; i <= 64; i++)
                    {
                        // 构造属性名（A1, A2, ..., A64）
                        string propertyName = $"A{i}";
                        // 获取属性信息
                        var property = entityType.GetProperty(propertyName);
                        if (property != null)
                        {
                            var value = property.GetValue(firstEntity);
                            if (value != null)
                            {
                                if (value is string strValue)
                                {
                                    if (!string.IsNullOrEmpty(strValue.Trim()))
                                    {
                                        INSPECT_CNT++;
                                    }
                                }
                            }
                        }
                    }
                    // 定义查询参数（避免 SQL 注入）
                    var planParameters = new SugarParameter[] {
                        new SugarParameter("@SPOT_CNT", INSPECT_CNT)};
                    // 查询 INSPECT_PLAN 表，获取 SPOT_CNT 等于样本数量的 INSPECT_PLANID
                    var planId = Db.Ado.GetString(
                        @"select INSPECT_PLANID from INSPECT_PLAN where SPOT_CNT = @SPOT_CNT", // 条件：样本数量匹配
                        planParameters
                    );
                    foreach (var item in input)
                    {
                        item.VER = newVer; // 设置新版本号
                        item.OID = (oIdIndex++).ToString("00");
                        item.INSPECT_CNT = INSPECT_CNT.ToString();
                        item.INSPECT_PLANID = planId;
                    }
                }
                else
                {//第二次上传
                 // 非首次上传：处理OID逻辑
                 // 2.1 提取历史数据中每个检验项目最近出现的OID（按版本倒序取最近）
                    var lastestOidMap = dtEnum
                        .GroupBy(row => row["INSPECT_PROGRESSNAME"].ToString(), StringComparer.OrdinalIgnoreCase)
                        .ToDictionary(
                            group => group.Key,
                            group =>
                            {
                                // 按版本号降序排序，取第一个（最近版本）的OID
                                var latestRow = group
                                    .OrderByDescending(row =>
                                    {
                                        int.TryParse(row["VER"].ToString().TrimStart('0'), out int v);
                                        return v;
                                    })
                                    .FirstOrDefault();

                                // 转换OID为整数（默认0）
                                if (latestRow != null && int.TryParse(latestRow["OID"].ToString(), out int oid))
                                {
                                    return oid;
                                }
                                return 0;
                            }
                        );

                    // 2.2 获取历史数据中最大的OID（用于新增项目累加）
                    int maxHistoryOid = dtEnum
                        .Select(row =>
                        {
                            int.TryParse(row["OID"].ToString(), out int oid);
                            return oid;
                        })
                        .DefaultIfEmpty(0)
                        .Max();
                    var firstVerRow = dtEnum
                        .Where(row => row["VER"].ToString() == "01")  // 筛选条件：VER等于"01"
                        .FirstOrDefault();  // 取第一条符合条件的记录

                    // 2.3 遍历输入项分配OID
                    int currentMaxOid = maxHistoryOid; // 当前最大OID（用于累加）
                    foreach (var item in input)
                    {
                        item.VER = newVer;
                        item.INSPECT_CNT = firstVerRow["INSPECT_CNT"].ToString();
                        item.INSPECT_PLANID = firstVerRow["INSPECT_PLANID"].ToString();
                        // 检查当前检验项目是否在历史记录中存在
                        if (lastestOidMap.TryGetValue(item.INSPECT_PROGRESSNAME, out int existOid) && existOid > 0)
                        {
                            // 规则2：存在则使用最近版本的OID
                            item.OID = existOid.ToString("00");
                        }
                        else
                        {
                            // 规则1：不存在则从最大OID累加
                            currentMaxOid++;
                            item.OID = currentMaxOid.ToString("00");
                        }
                    }
                }

                #region 保存数据
                await SaveInspectProgressList(input);
                #endregion

                return new ApiResponse
                {
                    Success = true,
                    Message = "数据保存成功",
                    Data = JsonConvert.SerializeObject(input)
                };
            }
            catch (Exception ex)
            {
                return new ApiResponse
                {
                    Success = false,
                    Message = $"二次元数据保存失败：{ex.Message}"
                };
            }
        }

        public async Task<ApiResponse> GetInspectInfoByRoshConditionAsync(INSPECT_CONDITION input) {
            try {
                var parameters = new SugarParameter[] {
                    new SugarParameter("@ITEMID", string.IsNullOrEmpty(input.ITEMID) ? null : $"%{input.ITEMID}%"),
                    new SugarParameter("@ITEMNAME", string.IsNullOrEmpty(input.ITEMNAME) ? null : $"%{input.ITEMNAME}%"),
                    new SugarParameter("@DOC_CODE", string.IsNullOrEmpty(input.DOC_CODE) ? null : $"%{input.DOC_CODE}%"),
                    new SugarParameter("@SUPPLOTNO", string.IsNullOrEmpty(input.LOTNO) ? null : $"%{input.LOTNO}%"),
                    new SugarParameter("@LOT_QTY", string.IsNullOrEmpty(input.LOT_QTY) ? null : $"%{input.LOT_QTY}%"),
                 };
                // 构建基础SQL
                var sql = @"select INSPECT_CODE,ITEMID,ITEMNAME,SUPPLOTNO,LOT_QTY from INSPECT_VIEW 
            where PSTATE!='PSTATE_003' and INSPECT_CODE in (select DISTINCT DOC_CODE from INSPECT_PROGRESS where INSPECT_NORID='3828c830-51a4-4cdd-bb50-2ed169c2d027')";
                // 动态添加条件（只添加值不为空的参数对应的条件）
                if (!string.IsNullOrEmpty(input.DOC_CODE))
                    sql += " and INSPECT_CODE like @DOC_CODE";
                if (!string.IsNullOrEmpty(input.ITEMID))
                    sql += " and ITEMID like @ITEMID";
                if (!string.IsNullOrEmpty(input.ITEMNAME))
                    sql += " and ITEMNAME like @ITEMNAME";
                if (!string.IsNullOrEmpty(input.LOTNO))
                    sql += " and SUPPLOTNO like @SUPPLOTNO";
                if (!string.IsNullOrEmpty(input.LOT_QTY))
                    sql += " and LOT_QTY = @LOT_QTY";
                // 执行查询
                var data = await Db.Ado.SqlQueryAsync<INSPECT_INFO_BYCODE>(sql, parameters);
                return new ApiResponse {
                    Success = true,
                    Message = "数据获取成功",
                    Data = JsonConvert.SerializeObject(data)
                };
            }
            catch (Exception ex) {
                return new ApiResponse {
                    Success = false,
                    Message = $"数据获取失败：{ex.Message}"
                };
            }
        }

        public async Task<ApiResponse> ProcessHMDInpectProcessRoshDataAsync(HMDRoshDataDto input) {
            try {
                //更新INSPECT_PROGRESSNAME
                foreach (var item in input.ROSHITEMLIST) {
                    string sql = @$"update INSPECT_PROGRESS set INSPECT_RESULT='{item.INSPECT_RESULT}',A1='{item.A1}' where INSPECT_PROGRESSNAME='{item.INSPECT_PROGRESSNAME}'
and DOC_CODE ='{input.DOC_CODE}' and INSPECT_NORID='3828c830-51a4-4cdd-bb50-2ed169c2d027'";
                    int c = Db.Ado.ExecuteCommand(sql);
                    if (c == 0) {
                        throw new Exception($"[{item.INSPECT_PROGRESSNAME}]在数据库不存在!");
                    }
                }

                //更新附件SCANDOC
                string baseDirPath = Path.Combine(AppSettings.Configuration["AppSettings:FileServerPath"]);
                string scanName = @$"\Rosh\{input.DOC_CODE}\{input.ExcelFileName}";
                string filePath = Path.Combine(baseDirPath, "Rosh", input.DOC_CODE, input.ExcelFileName);
                string base64Dta = input.EXCELDATA;

                string directory = Path.GetDirectoryName(filePath);
                if (!Directory.Exists(directory)) {
                    Directory.CreateDirectory(directory);
                }
                // 先删除已有文件（如果存在）
                if (File.Exists(filePath)) {
                    File.Delete(filePath);
                }
                // 解码base64数据
                byte[] fileBytes = Convert.FromBase64String(input.EXCELDATA);

                // 保存文件（存在则覆盖）
                await File.WriteAllBytesAsync(filePath, fileBytes);

                string sqlScanDoc = @$"update SCANDOC set SCANDOCNAME='{scanName}' where PEOPLEID='{input.DOC_CODE}' and INSPECT_NORID='3828c830-51a4-4cdd-bb50-2ed169c2d027'";
                Db.Ado.ExecuteCommand(sqlScanDoc);
                return new ApiResponse {
                    Success = true,
                    Message = "数据保存成功",
                    Data = JsonConvert.SerializeObject(input)
                };
            }
            catch (Exception ex) {
                return new ApiResponse {
                    Success = false,
                    Message = $"ROSH数据保存失败：{ex.Message}"
                };
            }
        }

        /// <summary>
        /// 批量保存检验进度数据（逐条保存）
        /// </summary>
        /// <param name="input">检验进度实体数组</param>
        /// <returns>是否保存成功</returns>
        private async Task SaveInspectProgressList(List<INSPECT_PROGRESSDto> input) {
            if (input == null || input.Count == 0)
                return;

            foreach (var item in input) {
                await SaveSingleInspectProgress(item);
            }
        }

        /// <summary>
        /// 保存单条检验进度数据
        /// </summary>
        /// <param name="item">检验进度实体</param>
        /// <returns>是否保存成功</returns>
        private async Task SaveSingleInspectProgress(INSPECT_PROGRESSDto item) {
            if (item == null)
                return;

            var (sql, parameters) = BuildSingleInsertSql(item);
            await Db.Ado.ExecuteCommandAsync(sql, parameters.ToArray());
        }

        /// <summary>
        /// 构建单条插入SQL语句
        /// </summary>
        /// <param name="item">检验进度实体</param>
        /// <returns>SQL语句和参数</returns>
        private (string Sql, List<SugarParameter> Parameters) BuildSingleInsertSql(INSPECT_PROGRESSDto item) {
            var sqlBuilder = new StringBuilder();
            var parameters = new List<SugarParameter>();

            // 构建INSERT语句
            sqlBuilder.Append("INSERT INTO INSPECT_PROGRESS (");
            sqlBuilder.Append("INSPECT_PROGRESSID, DOC_CODE, ITEMID, INSPECT02CODE, VER, OID, COC_ATTR, ");
            sqlBuilder.Append("INSPECT_PROGRESSNAME, INSPECT_DEV, COUNTTYPE, INSPECT_PLANID, ");
            sqlBuilder.Append("INSPECT_CNT, STD_VALUE, MAX_VALUE, MIN_VALUE, UP_VALUE, DOWN_VALUE, ");

            // 拼接A1-A64样本字段
            for (int i = 1; i <= 64; i++) {
                sqlBuilder.Append($"A{i}");
                if (i < 64) sqlBuilder.Append(", ");
            }

            sqlBuilder.Append(", INSPECT_PROGRESSCREATEUSER, INSPECT_PROGRESSCREATEDATE, TENID");
            sqlBuilder.Append(") VALUES (");

            // 添加参数
            AddParameterWithValue(sqlBuilder, parameters, "INSPECT_PROGRESSID",
                string.IsNullOrEmpty(item.INSPECT_PROGRESSID) ? Guid.NewGuid().ToString() : item.INSPECT_PROGRESSID);

            AddParameterWithValue(sqlBuilder, parameters, "DOC_CODE", item.DOC_CODE);
            AddParameterWithValue(sqlBuilder, parameters, "ITEMID", item.ITEMID);
            AddParameterWithValue(sqlBuilder, parameters, "INSPECT02CODE", item.INSPECT02CODE);
            AddParameterWithValue(sqlBuilder, parameters, "VER", item.VER);
            AddParameterWithValue(sqlBuilder, parameters, "OID", item.OID);
            AddParameterWithValue(sqlBuilder, parameters, "COC_ATTR", item.COC_ATTR);
            AddParameterWithValue(sqlBuilder, parameters, "INSPECT_PROGRESSNAME", item.INSPECT_PROGRESSNAME);
            AddParameterWithValue(sqlBuilder, parameters, "INSPECT_DEV", item.INSPECT_DEV);
            AddParameterWithValue(sqlBuilder, parameters, "COUNTTYPE", item.COUNTTYPE);
            AddParameterWithValue(sqlBuilder, parameters, "INSPECT_PLANID", item.INSPECT_PLANID);
            AddParameterWithValue(sqlBuilder, parameters, "INSPECT_CNT", item.INSPECT_CNT);
            AddParameterWithValue(sqlBuilder, parameters, "STD_VALUE", item.STD_VALUE);
            AddParameterWithValue(sqlBuilder, parameters, "MAX_VALUE", item.MAX_VALUE);
            AddParameterWithValue(sqlBuilder, parameters, "MIN_VALUE", item.MIN_VALUE);
            AddParameterWithValue(sqlBuilder, parameters, "UP_VALUE", item.UP_VALUE);
            AddParameterWithValue(sqlBuilder, parameters, "DOWN_VALUE", item.DOWN_VALUE);

            // 添加A1-A64字段参数
            for (int i = 1; i <= 64; i++) {
                var propName = $"A{i}";
                var propValue = item.GetType().GetProperty(propName)?.GetValue(item);
                AddParameterWithValue(sqlBuilder, parameters, propName, propValue);
            }

            // 添加创建信息参数
            AddParameterWithValue(sqlBuilder, parameters, "INSPECT_PROGRESSCREATEUSER", item.INSPECT_PROGRESSCREATEUSER);
            AddParameterWithValue(sqlBuilder, parameters, "INSPECT_PROGRESSCREATEDATE", item.INSPECT_PROGRESSDATE);
            AddParameterWithValue(sqlBuilder, parameters, "TENID", item.TENID, false); // 最后一个参数不需要逗号

            sqlBuilder.Append(")");

            return (sqlBuilder.ToString(), parameters);
        }

        /// <summary>
        /// 添加参数值到SQL构建器和参数列表
        /// </summary>
        /// <param name="sqlBuilder">SQL构建器</param>
        /// <param name="parameters">参数列表</param>
        /// <param name="fieldName">字段名</param>
        /// <param name="value">字段值</param>
        /// <param name="addComma">是否添加逗号分隔符</param>
        private void AddParameterWithValue(StringBuilder sqlBuilder, List<SugarParameter> parameters,
            string fieldName, object value, bool addComma = true) {
            // 生成参数名（使用字段名避免冲突）
            var paramName = $"@{fieldName}";
            sqlBuilder.Append(paramName);
            if (addComma) {
                sqlBuilder.Append(", ");
            }

            // 添加参数
            parameters.Add(new SugarParameter(paramName, value ?? DBNull.Value));
        }

        #endregion

        #region 同步收货数据
        public async Task SyncRcDataAsync()
        {
            _logger.LogInformation("开始处理收料通知单");
            try
            {
                //获取上次同步时间lastSyncTime
                string lastSyncTime;
                lastSyncTime = GetLastSyncTime("INSPECT_IQC", "TS");

                // 最多取近一周数据，处理lastSyncTime赋值逻辑
                DateTime defaultStartTime = DateTime.Now.AddDays(-7); // 一周前的当前时间
                DateTime syncStartTime;

                // 尝试解析传入的lastSyncTime
                if (DateTime.TryParse(lastSyncTime, out DateTime parsedTime))
                {
                    // 如果解析成功，判断是否超出一周范围
                    if (parsedTime < defaultStartTime)
                    {
                        // 若超出一周，则强制设为一周前
                        syncStartTime = defaultStartTime;
                        _logger.LogWarning("传入的同步时间超出一周范围，自动调整为一周前: {Time}", syncStartTime);
                    }
                    else
                    {
                        // 未超出范围则使用解析后的时间
                        syncStartTime = parsedTime;
                    }
                }
                else
                {
                    // 解析失败（如首次同步或格式错误），使用默认一周前时间
                    syncStartTime = defaultStartTime;
                    _logger.LogWarning("同步时间格式无效或未提供，使用默认时间: {Time}", syncStartTime);
                }
                _logger.LogInformation($"开始同步QMS_RC_VIEW数据...开始时间:{syncStartTime.ToString("yyyy-MM-dd HH:mm:ss")}");

                // 从Oracle视图查询增量数据
                var oracleData = await _oracleDb.Ado.SqlQueryAsync<dynamic>(
                    $"SELECT rvb02, rva01, rvb05, rvb051, rvb07, rva06, ima021, rvb38, rvbud02, rvbud07, rvbud01, rvbud08, rvbud13, rvbud14, pmc03, rva05, rvacond as rvadate " +
                    $"FROM qms_rc_view " +
                    $"WHERE rvacond >= TO_DATE('{syncStartTime.ToString("yyyy-MM-dd 00:00:00")}', 'YYYY-MM-DD HH24:MI:SS')");

                if (oracleData.Any())
                {
                    // 转换为目标实体
                    var entities = oracleData.Select(x => new erp_rc
                    {
                        KEEID = x.RVB02 != null && !Convert.IsDBNull(x.RVB02) ? x.RVB02.ToString() : null,
                        ERP_ARRIVEDID = x.RVA01,
                        ITEMID = x.RVB05,
                        ITEMNAME = x.RVB051,
                        LOT_QTY = x.RVB07 == null || Convert.IsDBNull(x.RVB07) ? 0 : decimal.Parse(x.RVB07.ToString()),
                        APPLY_DATE = x.RVA06 != null && !Convert.IsDBNull(x.RVA06) ? x.RVA06.ToString() : null,
                        MODEL_SPEC = x.IMA021,
                        LOTNO = x.RVB38,
                        SUPPLOTNO = x.RVBUD02,
                        LENGTH = x.RVBUD07 == null || Convert.IsDBNull(x.RVBUD07) ? 0 : decimal.Parse(x.RVBUD07.ToString()),
                        WIDTH = x.RVBUD01 == null || Convert.IsDBNull(x.RVBUD01) ? 0 : decimal.Parse(x.RVBUD01.ToString()),
                        INUM = x.RVBUD08 == null || Convert.IsDBNull(x.RVBUD08) ? 0 : decimal.Parse(x.RVBUD08.ToString()),
                        PRO_DATE = x.RVBUD13 != null && !Convert.IsDBNull(x.RVBUD13) ? x.RVBUD13.ToString() : null,
                        QUA_DATE = x.RVBUD14 != null && !Convert.IsDBNull(x.RVBUD14) ? x.RVBUD14.ToString() : null,
                        SUPPNAME = x.PMC03,
                        SUPPID = x.RVA05,
                        TS = ((DateTime)x.RVADATE).ToString("yyyy-MM-dd HH:mm:ss")
                    });

                    foreach (var entity in entities)
                    {
                        //判断重复
                        bool isExist = Db.Ado.GetInt($@"SELECT count(*) FROM INSPECT_IQC WHERE KEEID = '{entity.KEEID}' AND ERP_ARRIVEDID= '{entity.ERP_ARRIVEDID}' ") > 0;
                        if (isExist)
                        {
                            _logger.LogWarning($"收料通知单已存在。KEEID: {entity.KEEID}, ERP_ARRIVEDID: {entity.ERP_ARRIVEDID}, ITEMID: {entity.ITEMID}, SUPPLOTNO: {entity.SUPPLOTNO}");
                            continue;
                        }

                        // 生成检验单号
                        var inspectionIqcId = GenerateInspectionIqcId(entity.TS);
                        _logger.LogInformation("生成检验单号: {InspectionIqcId}", inspectionIqcId);

                        // 保存到数据库
                        _logger.LogDebug("正在保存收料通知单到数据库...");
                        try
                        {
                            SaveRcDataToDatabase(entity, inspectionIqcId);
                        }
                        catch (Exception ex)
                        {
                            _logger.LogError("保存收料通知单到数据库异常:" + ex.ToString());
                            throw;
                        }
                    }

                    var syncConfig = _syncConfigHandler.GetConfig();
                    syncConfig.RCDate = entities.Max(a => a.TS).ToString();
                    _syncConfigHandler.SetConfig(syncConfig);
                    _logger.LogInformation($"成功同步{entities.Count()}条QMS_RC_VIEW数据");
  }
                else
                {
                    _logger.LogInformation("没有需要同步的QMS_RC_VIEW数据");
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "同步QMS_RC_VIEW数据失败");
                throw;
            }
        }

        private string GenerateInspectionIqcId(string SynTime)
        {
            string INSPECT_CODE = "";//检验单号

            // 处理SynTime为null的情况，取当天日期
            //string effectiveDate = SynTime ?? DateTime.Now.ToString("yyyy-MM-dd");
            DateTime effectiveDate = DateTime.Now;
            if (!string.IsNullOrEmpty(SynTime)) {
                DateTime.TryParse(SynTime, out effectiveDate);
            }
            const string sql = @"
                --获得IQC检验单号
DECLARE @prefix VARCHAR(20) = 'IQC_' + CONVERT(VARCHAR(8), @effectiveDate, 112); -- 生成前缀
DECLARE @maxNum INT;
SELECT @maxNum = MAX(CAST(RIGHT(INSPECT_IQCCODE, LEN(INSPECT_IQCCODE) - LEN(@prefix)) AS INT))
FROM INSPECT_IQC
WHERE INSPECT_IQCCODE LIKE @prefix + '%';
SET @maxNum = ISNULL(@maxNum, 0);
SELECT @prefix + RIGHT('0000' + CAST(@maxNum + 1 AS VARCHAR(4)), 4) AS INSPECT_CODE;
                ";

            // 执行 SQL 命令
            var dataTable = Db.Ado.GetDataTable(sql, new { effectiveDate });
            if (dataTable.Rows.Count > 0)
            {
                INSPECT_CODE = dataTable.Rows[0]["INSPECT_CODE"].ToString().Trim();
            }
            return INSPECT_CODE;
        }

        private void SaveRcDataToDatabase(erp_rc entity, string inspectionIqcId)
        {
            string sql = @"
                INSERT INTO INSPECT_IQC (
                    TENID, INSPECT_IQCID, INSPECT_IQCCREATEUSER, 
                    INSPECT_IQCCREATEDATE, ITEMNAME, ERP_ARRIVEDID, 
                    LOT_QTY, INSPECT_IQCCODE, ITEMID, LOTNO, SUPPLOTNO, 
                    APPLY_DATE, ITEM_SPECIFICATION, QUA_DATE,
                    PRO_DATE, LENGTH, WIDTH, INUM, KEEID,
                    SUPPID, TS
                ) VALUES (
                    @TenId, @InspectIqcId, @InspectIqcCreateUser, 
                    getdate(), @ItemName, @ErpArrivedId,
                    @LotQty, @InspectIqcCode, @ItemId, @LotNo, @SuppLotNo, 
                    @ApplyDate, @ItemSpecification, @QuaDate,
                    @ProDate, @Length, @Width, @Inum, @KeeId,
                    @SuppId, @TS
                )";

            // 定义参数
            var parameters = new SugarParameter[]
            {
                new SugarParameter("@TenId", "001"),
                new SugarParameter("@InspectIqcId", inspectionIqcId),
                new SugarParameter("@InspectIqcCreateUser", "system"),
                new SugarParameter("@ItemName", entity.ITEMNAME),
                new SugarParameter("@ErpArrivedId", entity.ERP_ARRIVEDID),
                new SugarParameter("@LotQty", entity.LOT_QTY),
                new SugarParameter("@InspectIqcCode", inspectionIqcId),
                new SugarParameter("@ItemId", entity.ITEMID),
                new SugarParameter("@LotNo", (entity.LOTNO==null?"":entity.LOTNO.ToString())),
                new SugarParameter("@SuppLotNo", (entity.SUPPLOTNO==null?"":entity.SUPPLOTNO.ToString())),
                new SugarParameter("@ApplyDate", entity.APPLY_DATE),
                new SugarParameter("@ItemSpecification", entity.MODEL_SPEC),
                new SugarParameter("@QuaDate", entity.QUA_DATE),
                new SugarParameter("@ProDate", entity.PRO_DATE),
                new SugarParameter("@Length", entity.LENGTH),
                new SugarParameter("@Width", entity.WIDTH),
                new SugarParameter("@Inum", entity.INUM),
                new SugarParameter("@KeeId", entity.KEEID),
                new SugarParameter("@SuppId", entity.SUPPID),
                new SugarParameter("@TS", entity.TS)
            };

            // 执行 SQL 命令
            Db.Ado.ExecuteCommand(sql, parameters);
        }
        #endregion

        #region 同步FQC数据
        public async Task SyncWrDataAsync() {
            _logger.LogInformation("开始处理FQC");
            try {
                //获取上次同步时间lastSyncTime
                string lastSyncTime;
                lastSyncTime = GetLastSyncTime("INSPECT_SI", "TS");

                // 最多取近一周数据，处理lastSyncTime赋值逻辑
                DateTime defaultStartTime = DateTime.Now.AddDays(-7); // 一周前的当前时间
                DateTime syncStartTime;

                // 尝试解析传入的lastSyncTime
                if (DateTime.TryParse(lastSyncTime, out DateTime parsedTime)) {
                    // 如果解析成功，判断是否超出一周范围
                    if (parsedTime < defaultStartTime) {
                        // 若超出一周，则强制设为一周前
                        syncStartTime = defaultStartTime;
                        _logger.LogWarning("传入的同步时间超出一周范围，自动调整为一周前: {Time}", syncStartTime);
                    }
                    else {
                        // 未超出范围则使用解析后的时间
                        syncStartTime = parsedTime;
                    }
                }
                else {
                    // 解析失败（如首次同步或格式错误），使用默认一周前时间
                    syncStartTime = defaultStartTime;
                    _logger.LogWarning("同步时间格式无效或未提供，使用默认时间: {Time}", syncStartTime);
                }
                _logger.LogInformation($"开始同步QMS_WR_VIEW数据...开始时间:{syncStartTime.ToString("yyyy-MM-dd HH:mm:ss")}");

                var oracleData = await _oracleDb.Ado.SqlQueryAsync<dynamic>(
                    $"SELECT qcf01, qcf22, qcf021, ima02, shb32, qcfdate, qcf02, sfb08, qcf04 " +
                    $"FROM qms_fqc_view " +
                    $"WHERE qcf04 >= TO_DATE('{syncStartTime.ToString("yyyy-MM-dd 00:00:00")}', 'YYYY-MM-DD HH24:MI:SS')" +
                    $"ORDER BY qcf04,qcf041");

                if (oracleData.Any()) {
                    // 转换为目标实体
                    var entities = oracleData.Select(x => new erp_fqc {
                        ERP_FQCID = x.QCF01 != null && !Convert.IsDBNull(x.QCF01) ? x.QCF01.ToString() : null,
                        REPORT_QTY = x.QCF22 == null || Convert.IsDBNull(x.QCF22) ? 0 : decimal.Parse(x.QCF22.ToString()),
                        ITEMID = x.QCF021 != null && !Convert.IsDBNull(x.QCF021) ? x.QCF021.ToString() : null,
                        ITEMNAME = x.IMA02 != null && !Convert.IsDBNull(x.IMA02) ? x.IMA02.ToString() : null,
                        MO_DATE = x.SHB32 != null && !Convert.IsDBNull(x.SHB32) ? x.SHB32.ToString() : null,
                        INSPECT_SICREATEDATE = x.QCFDATE != null && !Convert.IsDBNull(x.QCFDATE) ? x.QCFDATE.ToString() : null,
                        MOID = x.QCF02 != null && !Convert.IsDBNull(x.QCF02) ? x.QCF02.ToString() : null,
                        LOT_QTY = x.SFB08 == null || Convert.IsDBNull(x.SFB08) ? 0 : decimal.Parse(x.SFB08.ToString()),
                        APPLY_DATE = ((DateTime)x.QCF04).ToString("yyyy-MM-dd HH:mm:ss")
                    });

                    int insertCount = 0;

                    foreach (var entity in entities) {
                        //判断重复
                        var existingRecord = Db.Ado.GetInt($@"SELECT count(*) FROM INSPECT_SI WHERE ERP_FQCID = '{entity.ERP_FQCID}' AND MOID = '{entity.MOID}'");

                        if (existingRecord != 0) {
                            // 记录已存在
                            _logger.LogInformation($"记录已存在: ERP_FQCID={entity.ERP_FQCID}, MOID={entity.MOID}");
                        }
                        else {
                            // 生成检验单号
                            var inspectionSiId = GenerateInspectionSiId(entity.APPLY_DATE);
                            _logger.LogInformation("生成检验单号: {InspectionSiId}", inspectionSiId);

                            // 保存到数据库
                            _logger.LogDebug("正在保存FQC到数据库...");
                            try {
                                SaveFqcDataToDatabase(entity, inspectionSiId);
                                insertCount++;
                            }
                            catch (Exception ex) {
                                _logger.LogError("保存FQC到数据库异常:" + ex.ToString());
                                throw;
                            }
                        }
                    }

                    var syncConfig = _syncConfigHandler.GetConfig();
                    syncConfig.WRDate = entities.Max(a => a.APPLY_DATE).ToString();
                    _syncConfigHandler.SetConfig(syncConfig);
                    _logger.LogInformation($"同步完成: 新增{insertCount}条QMS_FQC_VIEW数据");
                }
                else {
                    _logger.LogInformation("没有需要同步的QMS_FQC_VIEW数据");
                }

            }
            catch (Exception ex) {
                _logger.LogError(ex, "同步QMS_FQC_VIEW数据失败");
                throw;
            }
        }
        private string GenerateInspectionSiId(string SynTime) {
            string INSPECT_CODE = "";//检验单号

            // 处理SynTime为null的情况，取当天日期
            string effectiveDate = SynTime ?? DateTime.Now.ToString("yyyy-MM-dd");

            const string sql = @"
                DECLARE @INSPECT_CODE  	  NVARCHAR(200) 

                --获得SI检验单号
                SELECT TOP 1 @INSPECT_CODE=CAST(CAST(dbo.getNumericValue(INSPECT_SICODE) AS DECIMAL)+1 AS CHAR)  FROM  INSPECT_SI
                WHERE  TENID='001' AND ISNULL(REPLACE(INSPECT_SICODE,'FQC_',''),'') like REPLACE(CONVERT(VARCHAR(10),TRY_CONVERT(DATETIME, @effectiveDate),120),'-','')+'%' 
                ORDER BY INSPECT_SICODE DESC

                IF(ISNULL(@INSPECT_CODE,'')='')
                   SET @INSPECT_CODE ='FQC_'+REPLACE(CONVERT(VARCHAR(10),TRY_CONVERT(DATETIME, @effectiveDate),120),'-','')+'001'
                ELSE 
                   SET @INSPECT_CODE ='FQC_'+@INSPECT_CODE

                SELECT @INSPECT_CODE AS INSPECT_CODE
                ";

            // 执行 SQL 命令
            var dataTable = Db.Ado.GetDataTable(sql, new { effectiveDate });
            if (dataTable.Rows.Count > 0) {
                INSPECT_CODE = dataTable.Rows[0]["INSPECT_CODE"].ToString().Trim();
            }
            return INSPECT_CODE;
        }

        private void SaveFqcDataToDatabase(erp_fqc entity, string inspectionSiId) {
            string sql = @"INSERT INTO INSPECT_SI (TENID, INSPECT_SIID, MOID, LOT_QTY, REPORT_QTY, ITEMID, ITEMNAME, 
                            INSPECT_SICREATEDATE, APPLY_DATE, INSPECT_SICODE, ERP_FQCID, MO_DATE, TS) 
                        VALUES (@TenId, @INSPECT_SIID, @MoId, @LotQty, @ReportQty, @ItemId, @ItemName, 
                            @INSPECT_SICREATEDATE, @APPLY_DATE, @InspectSiCode, @ERP_FQCID, @MO_DATE, @TS)";

            // 定义参数
            var parameters = new SugarParameter[]
            {
                new SugarParameter("@TenId", "001"),
                new SugarParameter("@INSPECT_SIID", inspectionSiId),
                new SugarParameter("@MoId", entity.MOID),
                new SugarParameter("@LotQty", entity.LOT_QTY),
                new SugarParameter("@ReportQty", entity.REPORT_QTY),
                new SugarParameter("@ItemId", entity.ITEMID),
                new SugarParameter("@ItemName", entity.ITEMNAME),
                new SugarParameter("@INSPECT_SICREATEDATE", entity.INSPECT_SICREATEDATE),
                new SugarParameter("@APPLY_DATE", entity.APPLY_DATE),
                new SugarParameter("@InspectSiCode", inspectionSiId),
                new SugarParameter("@ERP_FQCID", entity.ERP_FQCID),
                new SugarParameter("@MO_DATE", entity.MO_DATE),
                new SugarParameter("@TS", entity.APPLY_DATE)
           };

            // 执行 SQL 命令
            Db.Ado.ExecuteCommand(sql, parameters);
        }
        #endregion

        #region 同步物料数据
        public async Task SyncItemDataAsync()
        {
            _logger.LogInformation("开始处理物料数据");
            try
            {
                //获取上次同步时间lastSyncTime
                string lastSyncTime;
                lastSyncTime = GetLastSyncTime("ITEM", "INSPECT_ITEMCREATEDATE");

                _logger.LogInformation($"开始同步QMS_ITEM_VIEW数据...开始时间:{lastSyncTime}");

                var oracleData = await _oracleDb.Ado.SqlQueryAsync<dynamic>(
                    $"SELECT ima01, tc_ima02, imaud03, imaud04, ima06, ima901 " +
                    $"FROM qms_item_view " +
                    $"WHERE ima901 >= TO_DATE('{lastSyncTime}', 'YYYY-MM-DD HH24:MI:SS')");

                if (oracleData.Any())
                {
                    var entities = oracleData.Select(x => new erp_item
                    {
                        ITEMID = x.IMA01,
                        ITEMCODE = x.IMA01,
                        ITEMNAME = x.TC_IMA02,
                        ISSPEC = x.IMAUD03,
                        MAINITEMID = x.IMAUD04,
                        ITEM_GROUPID = x.IMA06,
                        INSPECT_ITEMCREATEDATE = ((DateTime)x.IMA901).ToString("yyyy-MM-dd HH:mm:ss")
                    });

                    var response = new MaterialSyncResponse
                    {
                        TotalCount = entities.Count()
                    };

                    foreach (var entity in entities)
                    {

                        SyncItemTable(entity);

                        response.SuccessCount++;
                    }

                    _logger.LogInformation($"共{response.TotalCount}条数据，同步成功{response.SuccessCount}条，失败{response.FailedCount}条");


                }
                else
                {
                    _logger.LogInformation("没有需要同步的QMS_ITEM_VIEW数据");
                }

            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "同步QMS_ITEM_VIEW数据失败");
                throw;
            }
        }

        private void SyncItemTable(erp_item entity)
        {
            string sql = @"
                    MERGE INTO ITEM AS target
                    USING (SELECT @ItemId AS ITEMID, @ITEMCODE AS ITEMCODE,@ItemName AS ITEMNAME, @ISSPEC AS ISSPEC,@MAINITEMID AS MAINITEMID,@ItemGroupId AS ITEMGROUPID, @INSPECT_ITEMCREATEDATE AS INSPECT_ITEMCREATEDATE) AS source
                    ON target.ITEMID = source.ITEMID
                    WHEN MATCHED THEN
                        UPDATE SET ITEMCODE = source.ITEMCODE,ITEMNAME = source.ITEMNAME,
                                   ISSPEC = source.ISSPEC,MAINITEMID = source.MAINITEMID,
                                   ITEM_GROUPID = source.ITEMGROUPID,
                                   INSPECT_ITEMCREATEDATE = source.INSPECT_ITEMCREATEDATE,
                                   ITEMCREATEDATE = getdate()
                    WHEN NOT MATCHED THEN
                        INSERT (ITEMID, ITEMCODE,ITEMNAME, ISSPEC,MAINITEMID,ITEM_GROUPID, INSPECT_ITEMCREATEDATE, ITEMCREATEUSER, ITEMCREATEDATE)
                        VALUES (source.ITEMID, source.ITEMCODE,source.ITEMNAME,source.ISSPEC,source.MAINITEMID, source.ITEMGROUPID, source.INSPECT_ITEMCREATEDATE, 'system', getdate());";
            // 定义参数
            var parameters = new SugarParameter[]
            {
                new SugarParameter("@ItemId", entity.ITEMID),
                new SugarParameter("@ITEMCODE", entity.ITEMID),
                new SugarParameter("@ItemName", entity.ITEMNAME),
                new SugarParameter("@ISSPEC", entity.ISSPEC),
                new SugarParameter("@MAINITEMID", entity.MAINITEMID),
                new SugarParameter("@ItemGroupId", entity.ITEM_GROUPID),
                new SugarParameter("@INSPECT_ITEMCREATEDATE", entity.INSPECT_ITEMCREATEDATE)
            };

            Db.Ado.ExecuteCommand(sql, parameters);
        }
        #endregion

        #region 同步供应商数据
        public async Task SyncVendDataAsync()
        {
            _logger.LogInformation("开始处理供应商数据");
            try
            {
                //获取上次同步时间lastSyncTime
                string lastSyncTime;
                lastSyncTime = GetLastSyncTime("SUPP", "INSPECT_SUPPCREATEDATE");

                _logger.LogInformation($"开始同步QMS_VEND_VIEW数据...开始时间:{lastSyncTime}");

                var oracleData = await _oracleDb.Ado.SqlQueryAsync<dynamic>(
                    $"SELECT pmc03, pmc01, pmccrat " +
                    $"FROM qms_vend_view " +
                    $"WHERE pmccrat >= TO_DATE('{lastSyncTime}', 'YYYY-MM-DD HH24:MI:SS') " +
                    $"OR pmccrat IS NULL");

                if (oracleData.Any())
                {
                    var entities = oracleData.Select(x => new erp_vend {
                        SUPPNAME = x.PMC03,
                        SUPPID = x.PMC01,
                        SUPPCODE = x.PMC01,
                        // 若pmccrat为null则使用2000-01-01，否则使用实际值
                        INSPECT_SUPPCREATEDATE = (x.PMCCRAT != null
                            ? (DateTime)x.PMCCRAT : new DateTime(2000, 1, 1)).ToString("yyyy-MM-dd HH:mm:ss")
                    });


                    var response = new SuppSyncResponse
                    {
                        TotalCount = entities.Count()
                    };

                    foreach (var entity in entities)
                    {

                        SyncSuppTable(entity);

                        response.SuccessCount++;
                    }

                    _logger.LogInformation($"共{response.TotalCount}条数据，同步成功{response.SuccessCount}条，失败{response.FailedCount}条");
                }

                else
                {
                    _logger.LogInformation("没有需要同步的QMS_VEND_VIEW数据");
                }

            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "同步QMS_VEND_VIEW数据失败");
                throw;
            }
        }

        private void SyncSuppTable(erp_vend item)
        {
            string sql = @"
                MERGE INTO SUPP AS target
                USING (SELECT @SuppCode AS SUPPCODE,@SuppId AS SUPPID, @SuppName AS SUPPNAME, @INSPECT_SUPPCREATEDATE AS INSPECT_SUPPCREATEDATE) AS source
                ON target.SUPPID = source.SUPPID
                WHEN MATCHED THEN
                    UPDATE SET SUPPCODE = source.SUPPCODE,SUPPNAME = source.SUPPNAME,
                                INSPECT_SUPPCREATEDATE = source.INSPECT_SUPPCREATEDATE,
                                SUPPCREATEDATE = getdate()
                WHEN NOT MATCHED THEN
                    INSERT (SUPPID, SUPPCODE, SUPPNAME, INSPECT_SUPPCREATEDATE, SUPPCREATEUSER, SUPPCREATEDATE)
                    VALUES (source.SUPPID, source.SUPPCODE,source.SUPPNAME, source.INSPECT_SUPPCREATEDATE, 'system', getdate());";
            // 定义参数
            var parameters = new SugarParameter[]
            {
                new SugarParameter("@SuppId", item.SUPPID),
                new SugarParameter("@SuppCode", item.SUPPCODE),
                new SugarParameter("@SuppName", item.SUPPNAME),
                new SugarParameter("@INSPECT_SUPPCREATEDATE", item.INSPECT_SUPPCREATEDATE)
            };

            Db.Ado.ExecuteCommand(sql, parameters);
        }
        #endregion

        #region 同步客户数据
        public async Task SyncCustDataAsync()
        {
            _logger.LogInformation("开始处理客户数据");
            try
            {
                //获取上次同步时间lastSyncTime
                string lastSyncTime;
                lastSyncTime = GetLastSyncTime("CUSTOM", "INSPECT_CUSTOMCREATEDATE");

                _logger.LogInformation($"开始同步QMS_CUST_VIEW数据...开始时间:{lastSyncTime}");

                var oracleData = await _oracleDb.Ado.SqlQueryAsync<dynamic>(
                    "SELECT * FROM qms_cust_view " +
                    $"WHERE occdate >= TO_DATE('{lastSyncTime}', 'YYYY-MM-DD HH24:MI:SS') " +
                    $"OR occdate IS NULL"
                );
                if (oracleData.Any())
                {
                    var entities = oracleData.Select(x => new erp_cust {
                        CUSTOMCODE = x.OCC01,
                        CUSTOMNAME = x.OCC02,
                        // 若OCCDATE为null则使用默认日期2000-01-01，否则用实际值
                        INSPECT_CUSTOMCREATEDATE = (x.OCCDATE != null
                        ? (DateTime)x.OCCDATE : new DateTime(2000, 1, 1)).ToString("yyyy-MM-dd HH:mm:ss")
                    });

                    var response = new CustomerSyncResponse
                    {
                        TotalCount = entities.Count()
                    };

                    foreach (var entity in entities)
                    {

                        SyncCustomerTable(entity);

                        response.SuccessCount++;
                    }

                    _logger.LogInformation($"共{response.TotalCount}条数据，同步成功{response.SuccessCount}条，失败{response.FailedCount}条");
                }
                else
                {
                    _logger.LogInformation("没有需要同步的QMS_CUST_VIEW数据");
                }

            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "同步QMS_CUST_VIEW数据失败");
                throw;
            }
        }

        private void SyncCustomerTable(erp_cust item)
        {
            string sql = @"
                MERGE INTO CUSTOM AS target
                USING (SELECT @CustomID AS CustomID, @CustomCode AS CUSTOMCODE, @CustomName AS CUSTOMNAME, @INSPECT_CUSTOMCREATEDATE AS INSPECT_CUSTOMCREATEDATE) AS source
                ON target.CUSTOMCODE = source.CUSTOMCODE
                WHEN MATCHED THEN
                    UPDATE SET CUSTOMNAME = source.CUSTOMNAME,
                                INSPECT_CUSTOMCREATEDATE = source.INSPECT_CUSTOMCREATEDATE,
                                CUSTOMCREATEDATE = getdate()
                WHEN NOT MATCHED THEN
                    INSERT (CustomID, CUSTOMCODE, CUSTOMNAME, INSPECT_CUSTOMCREATEDATE, CUSTOMCREATEUSER, CUSTOMCREATEDATE)
                    VALUES (source.CustomID,source.CUSTOMCODE, source.CUSTOMNAME, source.INSPECT_CUSTOMCREATEDATE, 'system', getdate());";
            // 定义参数
            var parameters = new SugarParameter[]
            {
                new SugarParameter("@CustomID", Guid.NewGuid().ToString()),
                new SugarParameter("@CustomCode", item.CUSTOMCODE),
                new SugarParameter("@CustomName", item.CUSTOMNAME),
                new SugarParameter("@INSPECT_CUSTOMCREATEDATE", item.INSPECT_CUSTOMCREATEDATE)
            };

            Db.Ado.ExecuteCommand(sql, parameters);
        }
        #endregion

        #region 获取上次同步时间
        private readonly SyncConfigHandler _syncConfigHandler = new SyncConfigHandler();
        public string GetLastSyncTime(string tableName, string timeFieldName)
        {
            try
            {
                var syncConfig = _syncConfigHandler.GetConfig();

                if (tableName == "INSPECT_IQC") {
                    return syncConfig.RCDate;
                }
                if (tableName == "INSPECT_SI") {
                    return syncConfig.WRDate;
                }

                string sql = $"SELECT CONVERT(VARCHAR(20), MAX({timeFieldName}), 120) AS LastTimeStr FROM {tableName}";

                //string sql = $"SELECT CONVERT(VARCHAR(20), MAX(INSPECT_IQCCREATEDATE), 120) AS LastTimeStr FROM {tableName}";

                string result = Db.Ado.GetString(sql);
                if (string.IsNullOrEmpty(result))
                {
                    return "2000-01-01 00:00:00"; // 默认最小时间
                }

                return result;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, $"获取表{tableName}的最后同步时间失败");
                return "2000-01-01 00:00:00";// 默认最小时间
            }

        }

        public class SyncConfig {
            public string RCDate { get; set; }
            public string WRDate { get; set; }
        }

        public class SyncConfigHandler {
            // 定义默认日期变量
            private const string DEFAULT_DATE = "2025-10-05";
            private readonly string _configFilePath;

            public SyncConfigHandler() {
                // 设置配置文件路径
                _configFilePath = Path.Combine(AppContext.BaseDirectory, "SyncConfig.json");
            }

            // 获取配置，如果文件不存在则创建并返回默认值
            public SyncConfig GetConfig() {
                // 检查文件是否存在
                if (!File.Exists(_configFilePath)) {
                    // 创建默认配置，使用默认日期变量
                    var defaultConfig = new SyncConfig {
                        RCDate = DEFAULT_DATE,
                        WRDate = DEFAULT_DATE
                    };

                    // 使用JSONConvert序列化并保存到文件
                    string json = JsonConvert.SerializeObject(defaultConfig, Newtonsoft.Json.Formatting.Indented);
                    File.WriteAllText(_configFilePath, json);

                    return defaultConfig;
                }

                // 读取现有配置文件
                try {
                    string json = File.ReadAllText(_configFilePath);
                    var config = JsonConvert.DeserializeObject<SyncConfig>(json);

                    // 确保配置项存在，不存在则设置默认值
                    if (config == null) {
                        return new SyncConfig {
                            RCDate = DEFAULT_DATE,
                            WRDate = DEFAULT_DATE
                        };
                    }

                    // 检查是否有缺失的字段，如有则补充默认值
                    if (string.IsNullOrEmpty(config.RCDate))
                        config.RCDate = DEFAULT_DATE;

                    if (string.IsNullOrEmpty(config.WRDate))
                        config.WRDate = DEFAULT_DATE;

                    return config;
                }
                catch (Exception) {
                    // 处理其他错误
                    return new SyncConfig {
                        RCDate = DEFAULT_DATE,
                        WRDate = DEFAULT_DATE
                    };
                }
            }

            public void SetConfig(SyncConfig config) {
                if (config == null) {
                    throw new ArgumentNullException(nameof(config), "配置对象不能为null");
                }

                try {
                    // 确保日期字段不为空
                    if (string.IsNullOrEmpty(config.RCDate))
                        config.RCDate = DEFAULT_DATE;

                    if (string.IsNullOrEmpty(config.WRDate))
                        config.WRDate = DEFAULT_DATE;

                    // 序列化并写入文件
                    string json = JsonConvert.SerializeObject(config, Newtonsoft.Json.Formatting.Indented);
                    File.WriteAllText(_configFilePath, json);
                }
                catch (IOException ex) {
                    throw new InvalidOperationException("写入配置文件失败", ex);
                }
                catch (Exception ex) {
                    throw new InvalidOperationException("更新配置时发生错误", ex);
                }
            }
        }
        #endregion

        #region 回调方法
        public async Task UpdateReceiveInspectResult() {
            var requestData = GetQmsLotNoticeResultRequest();
            if (requestData != null) {
                foreach (var item in requestData) {
                    string requestXml = $@"<?xml version='1.0' encoding='utf-8'?>
<Request>
    <Access>
        <Authentication user = 'tiptop' password = 'tiptop'/>
        <Connection application = 'QMS' source = '10.99.80.40'/>
        <Organization name = 'SZHMD'/>
        <Locale language = 'zh_CN'/>
    </Access>
    <RequestContent>
        <Parameter />
        <Document>
            <RecordSet id = '1' >
                <Master name = 'giheader' >
                    <Record>
                        <Field name = 'rvb01' value = '{item.ERP_ARRIVEDID}'/>
                        <Field name = 'rvb02' value = '{item.ID}'/>
                        <Field name = 'rvb05' value = '{item.ITEMID}'/>
                        <Field name = 'rvb33' value = '{(item.Result == "验退" ? 0 : item.QTY)}'/>
                        <Field name = 'rvb40' value = '{item.IQCDate}'/>
                        <Field name = 'rvb41' value = '{item.Result}'/>
                        <Field name = 'rvbud06' value = '{item.INSPECT_IQCCODE}'/>
                    </Record>
                </Master>
          </RecordSet>
        </Document>
    </RequestContent>
</Request>";
                    requestXml = requestXml.Replace("'", "\"");
                    string wsUrl = AppSettings.Configuration["ERP:TiptopWs"];
                    var newEndpointAddress = new EndpointAddress(wsUrl);
                    _logger.LogInformation($"调用Webservice请求Xml：{requestXml}");
                    using (var client = new TiptopService.TIPTOPServiceGateWayPortTypeClient(wsUrl.Contains("https:") ? new BasicHttpsBinding() : new BasicHttpBinding(), newEndpointAddress)) {
                        string encodedValue = EncodeXmlSpecialChars(requestXml);
                        var result = await client.UpdateIqcAsync(encodedValue);
                        string responseXml = result.response;
                        _logger.LogInformation($"调用Webservice返回Xml：{responseXml}");

                        // 解析结果：基于QMS响应XML结构（Execution+Parameter）
                        XmlDocument xmlDoc = new XmlDocument();
                        // 1. 加载响应XML（处理XML格式错误）
                        xmlDoc.LoadXml(responseXml);
                        Console.WriteLine("响应XML加载成功，开始解析...");

                        // 2. 解析【Execution段】：获取ERP处理状态（成功/失败）
                        XmlNode statusNode = xmlDoc.SelectSingleNode("/Response/Execution/Status");
                        if (statusNode == null) {
                            throw new Exception("响应XML缺失核心节点：/Response/Execution/Status");
                        }

                        // 提取Status节点属性（文档定义：code=0表示成功，<>0表示失败）
                        string statusCode = statusNode.Attributes["code"]?.Value ?? string.Empty;
                        string sqlCode = statusNode.Attributes["sqlcode"]?.Value ?? string.Empty;
                        string statusDesc = statusNode.Attributes["description"]?.Value ?? "无描述信息";
                        bool isSuccess = statusCode.Equals("0", StringComparison.Ordinal); // 处理成功标记

                        // 3. 解析【Parameter段】：获取ERP生成的入库单号等结果
                        XmlNode paramRecordNode = xmlDoc.SelectSingleNode("/Response/ResponseContent/Parameter/Record");
                        string erpInboundNo = "未获取到"; // 文档定义的rvu01（ERP入库单号）
                        string paramDesc = "无说明";      // Parameter段的执行结果说明

                        if (paramRecordNode != null) {
                            // 提取rvu01（ERP入库单号）
                            XmlNode rvu01Node = paramRecordNode.SelectSingleNode("Field[@name='rvu01']");
                            if (rvu01Node != null) {
                                erpInboundNo = rvu01Node.Attributes["value"]?.Value ?? "未获取到";
                            }

                            // 提取Parameter段的description
                            XmlNode descNode = paramRecordNode.SelectSingleNode("Field[@name='description']");
                            if (descNode != null) {
                                paramDesc = descNode.Attributes["value"]?.Value ?? "无说明";
                            }
                        }
                        else {
                            _logger.LogWarning("警告：响应XML缺失Parameter/Record节点，无法获取ERP入库单号");
                        }

                        // 4. 输出解析结果
                        _logger.LogInformation("\n=== QMS IQC响应解析结果 ===");
                        _logger.LogInformation($"1. ERP处理状态：{(isSuccess ? "成功" : "失败")}");
                        _logger.LogInformation($"   - 状态码（code）：{statusCode}");
                        _logger.LogInformation($"   - SQL状态码（sqlcode）：{sqlCode}");
                        _logger.LogInformation($"   - 处理描述：{statusDesc}");
                        _logger.LogInformation($"2. ERP业务结果：");
                        _logger.LogInformation($"   - ERP入库单号（rvu01）：{erpInboundNo}");
                        _logger.LogInformation($"   - 结果说明：{paramDesc}");
                        _logger.LogInformation("===========================\n");

                        // 5. 业务逻辑分支（根据成功/失败执行后续操作）
                        if (isSuccess) {
                            CallBackQmsLotNoticeResult(item);
                            _logger.LogInformation($"执行成功：使用ERP入库单号【{erpInboundNo}】更新本地记录");
                        }
                        else {
                            _logger.LogInformation($"执行失败：错误信息：{statusDesc}");
                            throw new Exception($"{item.INSPECT_IQCCODE}：{statusDesc}");
                        }
                    }
                }
            }
         }

        public async Task TestUpdateReceiveInspectResult(string requestXml) {
            string wsUrl = AppSettings.Configuration["ERP:TiptopWs"];
            var newEndpointAddress = new EndpointAddress(wsUrl);
            requestXml = requestXml.Replace("'", "\"");
            _logger.LogInformation($"调用Webservice请求Xml：{requestXml}");
            using (var client = new TiptopService.TIPTOPServiceGateWayPortTypeClient(wsUrl.Contains("https:") ? new BasicHttpsBinding() : new BasicHttpBinding(), newEndpointAddress)) {
                string encodedValue = EncodeXmlSpecialChars(requestXml);
                var result = await client.UpdateIqcAsync(encodedValue);
                string responseXml = result.response;
                _logger.LogInformation($"调用Webservice返回Xml：{responseXml}");

                // 解析结果：基于QMS响应XML结构（Execution+Parameter）
                XmlDocument xmlDoc = new XmlDocument();
                // 1. 加载响应XML（处理XML格式错误）
                xmlDoc.LoadXml(responseXml);
                Console.WriteLine("响应XML加载成功，开始解析...");

                // 2. 解析【Execution段】：获取ERP处理状态（成功/失败）
                XmlNode statusNode = xmlDoc.SelectSingleNode("/Response/Execution/Status");
                if (statusNode == null) {
                    throw new Exception("响应XML缺失核心节点：/Response/Execution/Status");
                }

                // 提取Status节点属性（文档定义：code=0表示成功，<>0表示失败）
                string statusCode = statusNode.Attributes["code"]?.Value ?? string.Empty;
                string sqlCode = statusNode.Attributes["sqlcode"]?.Value ?? string.Empty;
                string statusDesc = statusNode.Attributes["description"]?.Value ?? "无描述信息";
                bool isSuccess = statusCode.Equals("0", StringComparison.Ordinal); // 处理成功标记

                // 3. 解析【Parameter段】：获取ERP生成的入库单号等结果
                XmlNode paramRecordNode = xmlDoc.SelectSingleNode("/Response/ResponseContent/Parameter/Record");
                string erpInboundNo = "未获取到"; // 文档定义的rvu01（ERP入库单号）
                string paramDesc = "无说明";      // Parameter段的执行结果说明

                if (paramRecordNode != null) {
                    // 提取rvu01（ERP入库单号）
                    XmlNode rvu01Node = paramRecordNode.SelectSingleNode("Field[@name='rvu01']");
                    if (rvu01Node != null) {
                        erpInboundNo = rvu01Node.Attributes["value"]?.Value ?? "未获取到";
                    }

                    // 提取Parameter段的description
                    XmlNode descNode = paramRecordNode.SelectSingleNode("Field[@name='description']");
                    if (descNode != null) {
                        paramDesc = descNode.Attributes["value"]?.Value ?? "无说明";
                    }
                }
                else {
                    _logger.LogWarning("警告：响应XML缺失Parameter/Record节点，无法获取ERP入库单号");
                }

                // 4. 输出解析结果
                _logger.LogInformation("\n=== QMS IQC响应解析结果 ===");
                _logger.LogInformation($"1. ERP处理状态：{(isSuccess ? "成功" : "失败")}");
                _logger.LogInformation($"   - 状态码（code）：{statusCode}");
                _logger.LogInformation($"   - SQL状态码（sqlcode）：{sqlCode}");
                _logger.LogInformation($"   - 处理描述：{statusDesc}");
                _logger.LogInformation($"2. ERP业务结果：");
                _logger.LogInformation($"   - ERP入库单号（rvu01）：{erpInboundNo}");
                _logger.LogInformation($"   - 结果说明：{paramDesc}");
                _logger.LogInformation("===========================\n");

                // 5. 业务逻辑分支（根据成功/失败执行后续操作）
                if (isSuccess) {
                    _logger.LogInformation($"执行成功：使用ERP入库单号【{erpInboundNo}】更新本地记录");
                }
                else {
                    _logger.LogInformation($"执行失败：错误信息：{statusDesc}");
                    throw new Exception($"{statusDesc}");
                }
            }
        }

        /// <summary>
        /// 编码XML中的特殊字符
        /// </summary>
        public static string EncodeXmlSpecialChars(string input) {
            string encodeXml = AppSettings.Configuration["ERP:EncodeXml"];
            if(encodeXml == null || encodeXml == "0")
                return input;
            if (string.IsNullOrEmpty(input))
                return input;

            // 替换XML中不允许的特殊字符
            return input
                .Replace("&", "&amp;")   // & → &amp;
                .Replace("<", "&lt;")    // < → &lt;
                .Replace(">", "&gt;")    // > → &gt;
                .Replace("\"", "&quot;") // " → &quot;
                .Replace("'", "&apos;"); // ' → &apos;
        }

        private List<LotNoticeResultRequestHMD> GetQmsLotNoticeResultRequest() {
            var sql = @" SELECT TOP 100 
    KEEID AS ID,
    ITEMID,
    SUPPLOTNO,
    INSPECT_IQCNAME AS IQCDate,
    ERP_ARRIVEDID, 
    FQC_CNT AS QTY,
    INSPECT_IQCCODE,
    -- 优先使用SQM_STATE判断，当SQM_STATE为NULL时再使用OQC_STATE
    CASE 
        WHEN SQM_STATE IN ('OQC_STATE_005', 'OQC_STATE_006') THEN '合格'
        WHEN SQM_STATE = 'OQC_STATE_008' THEN '特采'
        WHEN SQM_STATE IS NULL THEN 
            CASE 
                WHEN OQC_STATE IN ('OQC_STATE_005', 'OQC_STATE_006') THEN '合格'
                WHEN OQC_STATE = 'OQC_STATE_008' THEN '特采'
                ELSE '验退'
            END
        ELSE '验退' 
    END AS Result
FROM INSPECT_IQC
WHERE (ISSY <> '1' OR ISSY IS NULL) 
    AND (
        SQM_STATE IN ('OQC_STATE_005', 'OQC_STATE_006', 'OQC_STATE_007', 'OQC_STATE_008')
        OR OQC_STATE IN ('OQC_STATE_005', 'OQC_STATE_006', 'OQC_STATE_007', 'OQC_STATE_008')
    )
ORDER BY INSPECT_IQCCREATEDATE DESC;";

            var list = Db.Ado.SqlQuery<LotNoticeResultRequestHMD>(sql);
            return list;
        }

        private void CallBackQmsLotNoticeResult(LotNoticeResultRequestHMD request) {
            var sql = string.Format(@"update INSPECT_IQC set ISSY='1' where KEEID='{0}' and INSPECT_IQCCODE='{1}' ", request.ID, request.INSPECT_IQCCODE);
            Db.Ado.ExecuteCommand(sql);
        }
        #endregion
    }
}
