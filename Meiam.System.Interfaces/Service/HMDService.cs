//------------------------------------------------------------------------------
// <auto-generated>
//     此代码已从模板生成手动更改此文件可能导致应用程序出现意外的行为。
//     如果重新生成代码，将覆盖对此文件的手动更改。
//     author MEIAM
// </auto-generated>
//------------------------------------------------------------------------------
using Meiam.System.Model;
using System.Threading.Tasks;
using System;
using Microsoft.Extensions.Logging;
using Microsoft.EntityFrameworkCore;
using System.Collections.Generic;
using Microsoft.Data.SqlClient;
using System.Data.Common;
using Microsoft.Extensions.Configuration;
using DocumentFormat.OpenXml.Office2013.Word;
using Meiam.System.Common;
using SqlSugar;
using System.Data;
using System.Linq;
using Newtonsoft.Json;
using Meiam.System.Model.Dto;
using System.Reflection.Emit;
using Microsoft.IdentityModel.Tokens;
using Aspose.Pdf.Operators;
using Microsoft.EntityFrameworkCore.Metadata;
using System.Numerics;
using System.Text;
using Meiam.System.Core;
using Oracle.ManagedDataAccess.Client;

namespace Meiam.System.Interfaces {
    /// <summary>
    /// 恒铭达
    /// </summary>
    public class HMDService : BaseService<INSPECT_TENSILE_D>, IHMDService {

        public HMDService(IUnitOfWork unitOfWork) : base(unitOfWork) {
        }

        private readonly ILogger<HMDService> _logger;
        private readonly string _connectionString;
        private readonly IOracleSqlSugarClient _oracleDb;

        public HMDService(IOracleSqlSugarClient oracleSugar, IUnitOfWork unitOfWork, ILogger<HMDService> logger) : base(unitOfWork) {
            _logger = logger;
            _oracleDb = oracleSugar;
        }


        #region ProcessHMDData
        public async Task<ApiResponse> GetInspectSpecDataAsync(INSPECT_SYSM002_REQBYID input) {
            try {
                var parameters = new SugarParameter[] {
                  new SugarParameter("@SYSM001ID", input.SYSM001ID) };

                List<INSPECT_SYSM002_BYID> data = await Db.Ado.SqlQueryAsync<INSPECT_SYSM002_BYID>(
                    "select SYSM002ID,SYSM002NAME from SYSM002 where SYSM001ID = @SYSM001ID",
                    parameters
                );

                return new ApiResponse {
                    Success = true,
                    Message = "数据获取成功",
                    Data = JsonConvert.SerializeObject(data)
                };
            }
            catch (Exception ex) {
                return new ApiResponse {
                    Success = false,
                    Message = $"数据获取失败：{ex.Message}"
                };
            }
        }

        public async Task<ApiResponse> GetProgressDataByDocCodeAsync(INSPECT_REQCODE input) {
            try {
                var parameters = new SugarParameter[] {
                  new SugarParameter("@DOC_CODE", input.DOC_CODE) };

                List<INSPECT_PROGRESS_BYCODE> data = await Db.Ado.SqlQueryAsync<INSPECT_PROGRESS_BYCODE>(
                    "select INSPECT_PROGRESSNAME, INSPECT_PROGRESSID from INSPECT_PROGRESS where DOC_CODE = @DOC_CODE and INSPECT_DEV='INSPECT_DEV_002'",
                    parameters
                );

                return new ApiResponse {
                    Success = true,
                    Message = "数据获取成功",
                    Data = JsonConvert.SerializeObject(data)
                };
            }
            catch (Exception ex) {
                return new ApiResponse {
                    Success = false,
                    Message = $"数据获取失败：{ex.Message}"
                };
            }
        }
        public async Task<ApiResponse> GetInspectInfoByDocCodeAsync(INSPECT_REQCODE input){
            try {
                var parameters = new SugarParameter[] {
                  new SugarParameter("@DOC_CODE", input.DOC_CODE) };

                var data = await Db.Ado.SqlQueryAsync<INSPECT_INFO_BYCODE>(
                    "select TOP 1 ITEMID,ITEMNAME,LOTNO,LOT_QTY from INSPECT_VIEW where INSPECT_CODE = @DOC_CODE",
                    parameters
                );

                return new ApiResponse {
                    Success = true,
                    Message = "数据获取成功",
                    Data = JsonConvert.SerializeObject(data.FirstOrDefault())
                };
            }
            catch (Exception ex) {
                return new ApiResponse {
                    Success = false,
                    Message = $"数据获取失败：{ex.Message}"
                };
            }
        }

        public async Task<ApiResponse> GetInspectInfoByConditionAsync(INSPECT_CONDITION input) {
            try {
                var parameters = new SugarParameter[] {
                    new SugarParameter("@ITEMID", string.IsNullOrEmpty(input.ITEMID) ? null : $"%{input.ITEMID}%"),
                    new SugarParameter("@ITEMNAME", string.IsNullOrEmpty(input.ITEMNAME) ? null : $"%{input.ITEMNAME}%"),
                    new SugarParameter("@DOC_CODE", string.IsNullOrEmpty(input.DOC_CODE) ? null : $"%{input.DOC_CODE}%"),
                    new SugarParameter("@LOTNO", string.IsNullOrEmpty(input.LOTNO) ? null : $"%{input.LOTNO}%"),
                    new SugarParameter("@LOT_QTY", string.IsNullOrEmpty(input.LOT_QTY) ? null : $"%{input.LOT_QTY}%"),
                 };
                // 构建基础SQL
                var sql = @"select INSPECT_CODE,ITEMID,ITEMNAME,LOTNO,LOT_QTY from INSPECT_VIEW 
            where PSTATE!='PSTATE_003'";
                // 动态添加条件（只添加值不为空的参数对应的条件）
                if (!string.IsNullOrEmpty(input.DOC_CODE))
                    sql += " and INSPECT_CODE like @DOC_CODE";
                if (!string.IsNullOrEmpty(input.ITEMID))
                    sql += " and ITEMID like @ITEMID";
                if (!string.IsNullOrEmpty(input.ITEMNAME))
                    sql += " and ITEMNAME like @ITEMNAME";
                if (!string.IsNullOrEmpty(input.LOTNO))
                    sql += " and LOTNO like @LOTNO";
                if (!string.IsNullOrEmpty(input.LOT_QTY))
                    sql += " and LOT_QTY = @LOT_QTY";
                // 执行查询
                var data = await Db.Ado.SqlQueryAsync<INSPECT_INFO_BYCODE>(sql, parameters);
                return new ApiResponse {
                    Success = true,
                    Message = "数据获取成功",
                    Data = JsonConvert.SerializeObject(data)
                };
            }
            catch (Exception ex) {
                return new ApiResponse {
                    Success = false,
                    Message = $"数据获取失败：{ex.Message}"
                };
            }
        }

        public async Task<ApiResponse> ProcessHMDInpectDev1DataAsync(InspectDev1Entity input) {
            try {
                // 1. 检查主表是否存在相同数据
                var checkSql = @"SELECT COUNT(1) FROM INSPECT_DEV1 
                                WHERE INSPECT_CODE = @INSPECT_CODE 
                                  AND INSPECT_PROGRESSID = @INSPECT_PROGRESSID 
                                  AND ITEMID = @ITEMID";

                var checkParams = new SugarParameter[]
                {
                    new SugarParameter("@INSPECT_CODE", input.INSPECT_CODE),
                    new SugarParameter("@INSPECT_PROGRESSID", input.INSPECT_PROGRESSID),
                    new SugarParameter("@ITEMID", input.ITEMID)
                };

                // 执行查询，判断是否存在
                var exists = await Db.Ado.GetIntAsync(checkSql, checkParams) > 0;

                // 2. 主表数据处理
                if (!exists) {
                    // 主表不存在，插入新主表数据
                    var mainSql = @"INSERT INTO INSPECT_DEV1 (
                        INSPECT_DEV1ID, INSPECT_CODE, INSPECT_PROGRESSID, ISBUILD, INSPECT_SPEC,
                        ITEMID, ITEMNAME, INSPECTTYPE1, LOTID, LOT_QTY, SAMPLE_CNT, BATCHID,
                        DEFORMATION_START, DEFORMATION_END, DEFORMATION_START2, DEFORMATION_END2,
                        DEFORMATION_START3, DEFORMATION_END3, DEFORMATION_START4, DEFORMATION_END4,
                        DEFORMATION_START5, DEFORMATION_END5, PEOPLE02, APPEOPLE02, TENID,
                        INSPECT_DEV1CREATEUSER, INSPECT_DEV1CREATEDATE
                    ) VALUES (
                        @INSPECT_DEV1ID, @INSPECT_CODE, @INSPECT_PROGRESSID, @ISBUILD, @INSPECT_SPEC,
                        @ITEMID, @ITEMNAME, @INSPECTTYPE1, @LOTID, @LOT_QTY, @SAMPLE_CNT, @BATCHID,
                        @DEFORMATION_START, @DEFORMATION_END, @DEFORMATION_START2, @DEFORMATION_END2,
                        @DEFORMATION_START3, @DEFORMATION_END3, @DEFORMATION_START4, @DEFORMATION_END4,
                        @DEFORMATION_START5, @DEFORMATION_END5, @PEOPLE02, @APPEOPLE02, @TENID,
                        @INSPECT_DEV1CREATEUSER, @INSPECT_DEV1CREATEDATE
                    )";

                    var mainParams = new SugarParameter[]
                    {
                        new SugarParameter("@INSPECT_DEV1ID", input.INSPECT_DEV1ID),
                        new SugarParameter("@INSPECT_CODE", input.INSPECT_CODE),
                        new SugarParameter("@INSPECT_PROGRESSID", input.INSPECT_PROGRESSID),
                        new SugarParameter("@ISBUILD", input.ISBUILD),
                        new SugarParameter("@INSPECT_SPEC", input.INSPECT_SPEC),
                        new SugarParameter("@ITEMID", input.ITEMID),
                        new SugarParameter("@ITEMNAME", input.ITEMNAME),
                        new SugarParameter("@INSPECTTYPE1", input.INSPECTTYPE1),
                        new SugarParameter("@LOTID", input.LOTID),
                        new SugarParameter("@LOT_QTY", input.LOT_QTY),
                        new SugarParameter("@SAMPLE_CNT", input.SAMPLE_CNT),
                        new SugarParameter("@BATCHID", input.BATCHID),
                        new SugarParameter("@DEFORMATION_START", input.DEFORMATION_START),
                        new SugarParameter("@DEFORMATION_END", input.DEFORMATION_END),
                        new SugarParameter("@DEFORMATION_START2", input.DEFORMATION_START2),
                        new SugarParameter("@DEFORMATION_END2", input.DEFORMATION_END2),
                        new SugarParameter("@DEFORMATION_START3", input.DEFORMATION_START3),
                        new SugarParameter("@DEFORMATION_END3", input.DEFORMATION_END3),
                        new SugarParameter("@DEFORMATION_START4", input.DEFORMATION_START4),
                        new SugarParameter("@DEFORMATION_END4", input.DEFORMATION_END4),
                        new SugarParameter("@DEFORMATION_START5", input.DEFORMATION_START5),
                        new SugarParameter("@DEFORMATION_END5", input.DEFORMATION_END5),
                        new SugarParameter("@PEOPLE02", input.PEOPLE02),
                        new SugarParameter("@APPEOPLE02", input.APPEOPLE02),
                        new SugarParameter("@TENID", input.TENID),
                        new SugarParameter("@INSPECT_DEV1CREATEUSER", input.INSPECT_DEV1CREATEUSER),
                        new SugarParameter("@INSPECT_DEV1CREATEDATE", input.INSPECT_DEV1CREATEDATE)
                    };

                    await Db.Ado.ExecuteCommandAsync(mainSql, mainParams);
                }
                else {
                    // 如果主表存在，获取已存在的主表ID用于关联明细
                    var getMainIdSql = @"SELECT INSPECT_DEV1ID FROM INSPECT_DEV1 
                                        WHERE INSPECT_CODE = @INSPECT_CODE 
                                          AND INSPECT_PROGRESSID = @INSPECT_PROGRESSID 
                                          AND ITEMID = @ITEMID";

                    var mainId = await Db.Ado.GetStringAsync(getMainIdSql, checkParams);
                    if (!string.IsNullOrEmpty(mainId)) {
                        input.INSPECT_DEV1ID = mainId; // 更新主表ID用于明细关联
                    }
                    else {
                        throw new Exception("主表数据存在但获取ID失败");
                    }
                }

                // 3. 保存明细表数据（无论主表是否存在都追加明细）
                if (input.Details != null && input.Details.Count > 0) {
                    var detailSql = @"INSERT INTO INSPECT_TENSILE (
                        INSPECT_TENSILEID, ITEMNAME, TESTLOT, TESTTYPE, INSPECTTYPE1, INSPECT_DATE,
                        PEOPLE02, APPEOPLE02, X_AXIS, Y_AXIS, SAMPLEID, BATCHID, EAB, MPA, AREA,
                        THICKNESS, WIDTH, DEFORMATION_START, DEFORMATION_END, DEFORMATION_START2,
                        DEFORMATION_END2, DEFORMATION_START3, DEFORMATION_END3, DEFORMATION_START4,
                        DEFORMATION_END4, DEFORMATION_START5, DEFORMATION_END5, INSPECT_DEV1ID,
                        TENID, INSPECT_TENSILECREATEUSER, INSPECT_TENSILECREATEDATE
                    ) VALUES (
                        @INSPECT_TENSILEID, @ITEMNAME, @TESTLOT, @TESTTYPE, @INSPECTTYPE1, @INSPECT_DATE,
                        @PEOPLE02, @APPEOPLE02, @X_AXIS, @Y_AXIS, @SAMPLEID, @BATCHID, @EAB, @MPA, @AREA,
                        @THICKNESS, @WIDTH, @DEFORMATION_START, @DEFORMATION_END, @DEFORMATION_START2,
                        @DEFORMATION_END2, @DEFORMATION_START3, @DEFORMATION_END3, @DEFORMATION_START4,
                        @DEFORMATION_END4, @DEFORMATION_START5, @DEFORMATION_END5, @INSPECT_DEV1ID,
                        @TENID, @INSPECT_TENSILECREATEUSER, @INSPECT_TENSILECREATEDATE
                    )";

                    string INSPECT_DATE = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");//服务器时间
                    foreach (var detail in input.Details) {
                        // 关联主表ID
                        detail.INSPECT_DEV1ID = input.INSPECT_DEV1ID;
                        if(detail.BATCHID == "NOSELECT") {//客户端未勾选
                            continue;
                        }
                        bool containsInspectDate = DateTime.TryParse(detail.INSPECT_DATE, out DateTime inspectDate);
                        var detailParams = new SugarParameter[]
                        {
                            new SugarParameter("@INSPECT_TENSILEID", detail.INSPECT_TENSILEID),
                            new SugarParameter("@ITEMNAME", detail.ITEMNAME),
                            new SugarParameter("@TESTLOT", detail.TESTLOT),
                            new SugarParameter("@TESTTYPE", detail.TESTTYPE),
                            new SugarParameter("@INSPECTTYPE1", detail.INSPECTTYPE1),
                            new SugarParameter("@INSPECT_DATE",(containsInspectDate ? detail.INSPECT_DATE : INSPECT_DATE)),
                            new SugarParameter("@PEOPLE02", detail.PEOPLE02),
                            new SugarParameter("@APPEOPLE02", detail.APPEOPLE02),
                            new SugarParameter("@X_AXIS", detail.X_AXIS),
                            new SugarParameter("@Y_AXIS", detail.Y_AXIS),
                            new SugarParameter("@SAMPLEID", detail.SAMPLEID),
                            new SugarParameter("@BATCHID", detail.BATCHID),
                            new SugarParameter("@EAB", detail.EAB),
                            new SugarParameter("@MPA", detail.MPA),
                            new SugarParameter("@AREA", detail.AREA),
                            new SugarParameter("@THICKNESS", detail.THICKNESS),
                            new SugarParameter("@WIDTH", detail.WIDTH),
                            new SugarParameter("@DEFORMATION_START", detail.DEFORMATION_START),
                            new SugarParameter("@DEFORMATION_END", detail.DEFORMATION_END),
                            new SugarParameter("@DEFORMATION_START2", detail.DEFORMATION_START2),
                            new SugarParameter("@DEFORMATION_END2", detail.DEFORMATION_END2),
                            new SugarParameter("@DEFORMATION_START3", detail.DEFORMATION_START3),
                            new SugarParameter("@DEFORMATION_END3", detail.DEFORMATION_END3),
                            new SugarParameter("@DEFORMATION_START4", detail.DEFORMATION_START4),
                            new SugarParameter("@DEFORMATION_END4", detail.DEFORMATION_END4),
                            new SugarParameter("@DEFORMATION_START5", detail.DEFORMATION_START5),
                            new SugarParameter("@DEFORMATION_END5", detail.DEFORMATION_END5),
                            new SugarParameter("@INSPECT_DEV1ID", detail.INSPECT_DEV1ID),
                            new SugarParameter("@TENID", detail.TENID),
                            new SugarParameter("@INSPECT_TENSILECREATEUSER", detail.INSPECT_TENSILECREATEUSER),
                            new SugarParameter("@INSPECT_TENSILECREATEDATE", detail.INSPECT_TENSILECREATEDATE)
                        };

                        await Db.Ado.ExecuteCommandAsync(detailSql, detailParams);
                    }
                }

                return new ApiResponse {
                    Success = true,
                    Message = exists ? "主表数据已存在，仅明细细数据保存成功" : "主表和明细数据保存成功"
                };
            }
            catch (Exception ex) {
                return new ApiResponse {
                    Success = false,
                    Message = $"拉力机数据保存失败：{ex.Message}"
                };
            }
        }

        public async Task<ApiResponse> ProcessHMDInpectProcessDataAsync(List<INSPECT_PROGRESSDto> input) {
            try {
                if (input.Count == 0) {
                    return new ApiResponse {
                        Success = false,
                        Message = $"传入数据为空!"
                    };
                }
                var firstEntity = input[0];
                var parameters = new SugarParameter[] {
                  new SugarParameter("@DOC_CODE", firstEntity.DOC_CODE) };

                // 1. 查询历史数据（包含版本、检验项目和顺序号）
                var dtOldData = Db.Ado.GetDataTable(
                    @"select VER,INSPECT_PROGRESSNAME,OID,INSPECT_CNT,INSPECT_PLANID
      from INSPECT_PROGRESS 
      where DOC_CODE = @DOC_CODE and COC_ATTR='COC_ATTR_001'",
                    parameters
                );

                var dtEnum = dtOldData.AsEnumerable();
                string newVer = "01"; // 新版本号
                int lastMaxVer = 0;   // 上一版本号（数字形式）

                // 2. 处理版本号逻辑
                if (dtOldData.Rows.Count > 0) {
                    lastMaxVer = dtEnum
                        .Select(row => {
                            int.TryParse(row["VER"].ToString().TrimStart('0'), out int v);
                            return v;
                        })
                        .Max();
                    newVer = (lastMaxVer + 1).ToString("00");
                }
                if (newVer == "01") {
                    int oIdIndex = 1;
                    int INSPECT_CNT = 0;
                    var entityType = firstEntity.GetType();
                    // 遍历A1到A64的所有属性
                    for (int i = 1; i <= 64; i++) {
                        // 构造属性名（A1, A2, ..., A64）
                        string propertyName = $"A{i}";
                        // 获取属性信息
                        var property = entityType.GetProperty(propertyName);
                        if (property != null) {
                            var value = property.GetValue(firstEntity);
                            if (value != null) {
                                if (value is string strValue) {
                                    if (!string.IsNullOrEmpty(strValue.Trim())) {
                                        INSPECT_CNT++;
                                    }
                                }
                            }
                        }
                    }
                    // 定义查询参数（避免 SQL 注入）
                    var planParameters = new SugarParameter[] {
                        new SugarParameter("@SPOT_CNT", INSPECT_CNT)};
                    // 查询 INSPECT_PLAN 表，获取 SPOT_CNT 等于样本数量的 INSPECT_PLANID
                    var planId = Db.Ado.GetString(
                        @"select INSPECT_PLANID from INSPECT_PLAN where SPOT_CNT = @SPOT_CNT", // 条件：样本数量匹配
                        planParameters
                    );
                    foreach (var item in input) {
                        item.VER = newVer; // 设置新版本号
                        item.OID = (oIdIndex++).ToString("00");
                        item.INSPECT_CNT = INSPECT_CNT.ToString();
                        item.INSPECT_PLANID = planId;
                    }
                }
                else {//第二次上传
                      // 非首次上传：处理OID逻辑
                      // 2.1 提取历史数据中每个检验项目最近出现的OID（按版本倒序取最近）
                    var lastestOidMap = dtEnum
                        .GroupBy(row => row["INSPECT_PROGRESSNAME"].ToString(), StringComparer.OrdinalIgnoreCase)
                        .ToDictionary(
                            group => group.Key,
                            group => {
                                // 按版本号降序排序，取第一个（最近版本）的OID
                                var latestRow = group
                                    .OrderByDescending(row => {
                                        int.TryParse(row["VER"].ToString().TrimStart('0'), out int v);
                                        return v;
                                    })
                                    .FirstOrDefault();

                                // 转换OID为整数（默认0）
                                if (latestRow != null && int.TryParse(latestRow["OID"].ToString(), out int oid)) {
                                    return oid;
                                }
                                return 0;
                            }
                        );

                    // 2.2 获取历史数据中最大的OID（用于新增项目累加）
                    int maxHistoryOid = dtEnum
                        .Select(row => {
                            int.TryParse(row["OID"].ToString(), out int oid);
                            return oid;
                        })
                        .DefaultIfEmpty(0)
                        .Max();
                    var firstVerRow = dtEnum
                        .Where(row => row["VER"].ToString() == "01")  // 筛选条件：VER等于"01"
                        .FirstOrDefault();  // 取第一条符合条件的记录

                    // 2.3 遍历输入项分配OID
                    int currentMaxOid = maxHistoryOid; // 当前最大OID（用于累加）
                    foreach (var item in input) {
                        item.VER = newVer;
                        item.INSPECT_CNT = firstVerRow["INSPECT_CNT"].ToString();
                        item.INSPECT_PLANID = firstVerRow["INSPECT_PLANID"].ToString();
                        // 检查当前检验项目是否在历史记录中存在
                        if (lastestOidMap.TryGetValue(item.INSPECT_PROGRESSNAME, out int existOid) && existOid > 0) {
                            // 规则2：存在则使用最近版本的OID
                            item.OID = existOid.ToString("00");
                        }
                        else {
                            // 规则1：不存在则从最大OID累加
                            currentMaxOid++;
                            item.OID = currentMaxOid.ToString("00");
                        }
                    }
                }

                #region 保存数据
                await SaveInspectProgressList(input);
                #endregion

                return new ApiResponse {
                    Success = true,
                    Message = "数据保存成功",
                    Data = JsonConvert.SerializeObject(input)
                };
            }
            catch (Exception ex) {
                return new ApiResponse {
                    Success = false,
                    Message = $"二次元数据保存失败：{ex.Message}"
                };
            }
        }

        /// <summary>
        /// 批量保存检验进度数据
        /// </summary>
        /// <param name="input">检验进度实体数组</param>
        /// <returns>是否保存成功</returns>
        private async Task SaveInspectProgressList(List<INSPECT_PROGRESSDto> input) {
            if (input == null || input.Count == 0)
                return;

            // 每个实体需要的基础参数数量：18个基础字段 + 64个A字段 = 82个
            // 但通过复用相同值的参数，实际数量会减少
            int parametersPerItem = 82;
            int maxBatchSize = 2100 / parametersPerItem; // 仍保持分批处理基础逻辑

            for (int i = 0; i < input.Count; i += maxBatchSize) {
                var batchItems = input.Skip(i).Take(maxBatchSize).ToList();
                if (batchItems.Count == 0)
                    continue;

                var (sql, parameters) = BuildBatchSqlWithReusedParameters(batchItems);
                await Db.Ado.ExecuteCommandAsync(sql, parameters.ToArray());
            }
        }

        private (string Sql, List<SugarParameter> Parameters) BuildBatchSqlWithReusedParameters(List<INSPECT_PROGRESSDto> batchItems) {
            var sqlBuilder = new StringBuilder();
            sqlBuilder.Append("INSERT INTO INSPECT_PROGRESS (");
            sqlBuilder.Append("INSPECT_PROGRESSID, DOC_CODE, ITEMID, VER, OID, COC_ATTR, ");
            sqlBuilder.Append("INSPECT_PROGRESSNAME, INSPECT_DEV, COUNTTYPE, INSPECT_PLANID, ");
            sqlBuilder.Append("INSPECT_CNT, STD_VALUE, MAX_VALUE, MIN_VALUE, UP_VALUE, DOWN_VALUE, ");

            // 拼接A1-A64样本字段
            for (int i = 1; i <= 64; i++) {
                sqlBuilder.Append($"A{i}, ");
            }

            sqlBuilder.Append("INSPECT_PROGRESSCREATEUSER, INSPECT_PROGRESSCREATEDATE, TENID");
            sqlBuilder.Append(") VALUES ");

            var parameters = new List<SugarParameter>();
            var parameterCache = new Dictionary<string, string>(); // 缓存值与参数名的映射
            int paramIndex = 0;

            foreach (var item in batchItems) {
                sqlBuilder.Append("(");

                // 处理主键ID（通常唯一，难以复用）
                paramIndex++;
                var progressIdParamName = $"@INSPECT_PROGRESSID_{paramIndex}";
                sqlBuilder.Append($"{progressIdParamName}, ");
                parameters.Add(new SugarParameter(progressIdParamName,
                    string.IsNullOrEmpty(item.INSPECT_PROGRESSID) ? Guid.NewGuid().ToString() : item.INSPECT_PROGRESSID));

                // 处理可复用的字段 - 使用值作为键缓存参数名
                sqlBuilder.Append(AddReusableParameter(
                    "DOC_CODE", item.DOC_CODE, ref paramIndex, parameters, parameterCache) + ", ");

                sqlBuilder.Append(AddReusableParameter(
                    "ITEMID", item.ITEMID, ref paramIndex, parameters, parameterCache) + ", ");

                sqlBuilder.Append(AddReusableParameter(
                    "VER", item.VER, ref paramIndex, parameters, parameterCache) + ", ");

                sqlBuilder.Append(AddReusableParameter(
                    "OID", item.OID, ref paramIndex, parameters, parameterCache) + ", ");

                sqlBuilder.Append(AddReusableParameter(
                    "COC_ATTR", item.COC_ATTR, ref paramIndex, parameters, parameterCache) + ", ");

                sqlBuilder.Append(AddReusableParameter(
                    "INSPECT_PROGRESSNAME", item.INSPECT_PROGRESSNAME, ref paramIndex, parameters, parameterCache) + ", ");

                sqlBuilder.Append(AddReusableParameter(
                    "INSPECT_DEV", item.INSPECT_DEV, ref paramIndex, parameters, parameterCache) + ", ");

                sqlBuilder.Append(AddReusableParameter(
                    "COUNTTYPE", item.COUNTTYPE, ref paramIndex, parameters, parameterCache) + ", ");

                sqlBuilder.Append(AddReusableParameter(
                    "INSPECT_PLANID", item.INSPECT_PLANID, ref paramIndex, parameters, parameterCache) + ", ");

                sqlBuilder.Append(AddReusableParameter(
                    "INSPECT_CNT", item.INSPECT_CNT, ref paramIndex, parameters, parameterCache) + ", ");

                sqlBuilder.Append(AddReusableParameter(
                    "STD_VALUE", item.STD_VALUE, ref paramIndex, parameters, parameterCache) + ", ");

                sqlBuilder.Append(AddReusableParameter(
                    "MAX_VALUE", item.MAX_VALUE, ref paramIndex, parameters, parameterCache) + ", ");

                sqlBuilder.Append(AddReusableParameter(
                    "MIN_VALUE", item.MIN_VALUE, ref paramIndex, parameters, parameterCache) + ", ");

                sqlBuilder.Append(AddReusableParameter(
                    "UP_VALUE", item.UP_VALUE, ref paramIndex, parameters, parameterCache) + ", ");

                sqlBuilder.Append(AddReusableParameter(
                    "DOWN_VALUE", item.DOWN_VALUE, ref paramIndex, parameters, parameterCache) + ", ");

                // 处理A1-A64样本字段
                for (int j = 1; j <= 64; j++) {
                    var propName = $"A{j}";
                    var propValue = item.GetType().GetProperty(propName)?.GetValue(item);
                    var paramKey = $"{propName}_{propValue}";

                    sqlBuilder.Append(AddReusableParameter(
                        propName, propValue, ref paramIndex, parameters, parameterCache) + (j < 64 ? ", " : ""));
                }

                // 处理创建用户和日期
                sqlBuilder.Append(", " + AddReusableParameter(
                    "INSPECT_PROGRESSCREATEUSER", item.INSPECT_PROGRESSCREATEUSER, ref paramIndex, parameters, parameterCache));

                sqlBuilder.Append(", " + AddReusableParameter(
                    "INSPECT_PROGRESSCREATEDATE", item.INSPECT_PROGRESSDATE, ref paramIndex, parameters, parameterCache));

                sqlBuilder.Append(", " + AddReusableParameter(
                    "TENID", item.TENID, ref paramIndex, parameters, parameterCache));

                sqlBuilder.Append("),");
            }

            // 移除最后一个逗号
            if (sqlBuilder.Length > 0 && sqlBuilder[sqlBuilder.Length - 1] == ',') {
                sqlBuilder.Length--;
            }

            return (sqlBuilder.ToString(), parameters);
        }

        // 复用参数的核心方法：相同值使用同一个参数
        private string AddReusableParameter(string fieldName, object value, ref int paramIndex,
            List<SugarParameter> parameters, Dictionary<string, string> parameterCache) {
            // 创建唯一键：字段名+值（处理null情况）
            var cacheKey = $"{fieldName}_{(value ?? "NULL").ToString()}";

            // 如果已有相同值的参数，直接返回已存在的参数名
            if (parameterCache.TryGetValue(cacheKey, out var existingParamName)) {
                return existingParamName;
            }

            // 否则创建新参数
            paramIndex++;
            var newParamName = $"@{fieldName}_{paramIndex}";
            parameters.Add(new SugarParameter(newParamName, value ?? DBNull.Value));
            parameterCache[cacheKey] = newParamName;

            return newParamName;
        }

        #endregion

        #region 同步收货数据
        public async Task SyncRcDataAsync(string lastSyncTime) {
            _logger.LogInformation("开始处理收料通知单");
            try {
                // 最多取近一周数据，处理lastSyncTime赋值逻辑
                DateTime defaultStartTime = DateTime.Now.AddDays(-7); // 一周前的当前时间
                DateTime syncStartTime;

                // 尝试解析传入的lastSyncTime
                if (DateTime.TryParse(lastSyncTime, out DateTime parsedTime)) {
                    // 如果解析成功，判断是否超出一周范围
                    if (parsedTime < defaultStartTime) {
                        // 若超出一周，则强制设为一周前
                        syncStartTime = defaultStartTime;
                        _logger.LogWarning("传入的同步时间超出一周范围，自动调整为一周前: {Time}", syncStartTime);
                    }
                    else {
                        // 未超出范围则使用解析后的时间
                        syncStartTime = parsedTime;
                    }
                }
                else {
                    // 解析失败（如首次同步或格式错误），使用默认一周前时间
                    syncStartTime = defaultStartTime;
                    _logger.LogWarning("同步时间格式无效或未提供，使用默认时间: {Time}", syncStartTime);
                }
                _logger.LogInformation($"开始同步QMS_RC_VIEW数据...开始时间:{syncStartTime.ToString("yyyy-MM-dd HH:mm:ss")}");

                // 从Oracle视图查询增量数据
                var oracleData = await _oracleDb.Ado.SqlQueryAsync<dynamic>(
                    $"SELECT rvb02, rva01, rvb05, rvb051, rvb07, rva06, ima021, rvb38, rvbud07, rvbud01, rvbud08, rvbud13, rvbud14, pmc03, rva05, rvadate " +
                    $"FROM qms_rc_view " +
                    $"WHERE rvadate >= TO_DATE('{syncStartTime.ToString("yyyy-MM-dd HH:mm:ss")}', 'YYYY-MM-DD HH24:MI:SS')");

                if (oracleData.Any()) {
                    // 转换为目标实体
                    var entities = oracleData.Select(x => new erp_rc {
                        KEEID = x.RVB02 != null && !Convert.IsDBNull(x.RVB02) ? x.RVB02.ToString() : null,
                        ERP_ARRIVEDID = x.RVA01,
                        ITEMID = x.RVB05,
                        ITEMNAME = x.RVB051,
                        LOT_QTY = x.RVB07 == null || Convert.IsDBNull(x.RVB07) ? 0 : decimal.Parse(x.RVB07.ToString()),
                        APPLY_DATE = x.RVA06 != null && !Convert.IsDBNull(x.RVA06) ? x.RVA06.ToString() : null,
                        MODEL_SPEC = x.IMA021,
                        LOTNO = x.RVB38,
                        LENGTH = x.RVBUD07 == null || Convert.IsDBNull(x.RVBUD07) ? 0 : decimal.Parse(x.RVBUD07.ToString()),
                        WIDTH = x.RVBUD01 == null || Convert.IsDBNull(x.RVBUD01) ? 0 : decimal.Parse(x.RVBUD01.ToString()),
                        INUM = x.RVBUD08 == null || Convert.IsDBNull(x.RVBUD08) ? 0 : decimal.Parse(x.RVBUD08.ToString()),
                        PRO_DATE = x.RVBUD13 != null && !Convert.IsDBNull(x.RVBUD13) ? x.RVBUD13.ToString() : null,
                        QUA_DATE = x.RVBUD14 != null && !Convert.IsDBNull(x.RVBUD14) ? x.RVBUD14.ToString() : null,
                        SUPPNAME = x.PMC03,
                        SUPPID = x.RVA05,
                        TS = x.RVADATE != null && !Convert.IsDBNull(x.RVADATE) ? x.RVADATE.ToString() : null
                    });

                    foreach (var entity in entities) {
                        //判断重复
                        bool isExist = Db.Ado.GetInt($@"SELECT count(*) FROM INSPECT_IQC WHERE ITEMID = '{entity.ITEMID}' AND LOTNO = '{entity.LOTNO}' ") > 0;
                        if (isExist) {
                            _logger.LogWarning($"收料通知单已存在: {entity.KEEID}");
                            continue;
                        }

                        // 生成检验单号
                        var inspectionId = GenerateInspectionId();
                        _logger.LogInformation("生成检验单号: {InspectionId}", inspectionId);

                        // 保存到数据库
                        _logger.LogDebug("正在保存收料通知单到数据库...");
                        try {
                            SaveRcDataToDatabase(entity, inspectionId);
                        }
                        catch (Exception ex) {
                            _logger.LogError("保存收料通知单到数据库异常:" + ex.ToString());
                            throw;
                        }
                    }

                    _logger.LogInformation($"成功同步{entities.Count()}条QMS_RC_VIEW数据");
                }
                else {
                    _logger.LogInformation("没有需要同步的QMS_RC_VIEW数据");
                }

            }
            catch (Exception ex) {
                _logger.LogError(ex, "同步QMS_RC_VIEW数据失败");
                throw;
            }
        }

        private string GenerateInspectionId() {
            string INSPECT_CODE = "";//检验单号

            const string sql = @"
                DECLARE @INSPECT_CODE  	  NVARCHAR(200) 

                --获得IQC检验单号
                SELECT TOP 1 @INSPECT_CODE=CAST(CAST(dbo.getNumericValue(INSPECT_IQCCODE) AS DECIMAL)+1 AS CHAR)  FROM  INSPECT_IQC
                WHERE  TENID='001' AND ISNULL(REPLACE(INSPECT_IQCCODE,'IQC_',''),'') like REPLACE(CONVERT(VARCHAR(10),GETDATE(),120),'-','')+'%' 
                ORDER BY INSPECT_IQCCODE DESC

                IF(ISNULL(@INSPECT_CODE,'')='')
                   SET @INSPECT_CODE ='IQC_'+REPLACE(CONVERT(VARCHAR(10),GETDATE(),120),'-','')+'001'
                ELSE 
                   SET @INSPECT_CODE ='IQC_'+@INSPECT_CODE

                SELECT @INSPECT_CODE AS INSPECT_CODE
                ";

            // 执行 SQL 命令
            var dataTable = Db.Ado.GetDataTable(sql);
            if (dataTable.Rows.Count > 0) {
                INSPECT_CODE = dataTable.Rows[0]["INSPECT_CODE"].ToString().Trim();
            }
            return INSPECT_CODE;
        }

        private void SaveRcDataToDatabase(erp_rc entity, string inspectionId) {
            string sql = @"
                INSERT INTO INSPECT_IQC (
                    TENID, INSPECT_IQCID, INSPECT_IQCCREATEUSER, 
                    INSPECT_IQCCREATEDATE, ITEMNAME, ERP_ARRIVEDID, 
                    LOT_QTY, INSPECT_IQCCODE, ITEMID, LOTNO, 
                    APPLY_DATE, ITEM_SPECIFICATION, QUA_DATE,
                    PRO_DATE, LENGTH, WIDTH, INUM, KEEID,
                    SUPPID, TS
                ) VALUES (
                    @TenId, @InspectIqcId, @InspectIqcCreateUser, 
                    getdate(), @ItemName, @ErpArrivedId,
                    @LotQty, @InspectIqcCode, @ItemId, @LotNo, 
                    @ApplyDate, @ItemSpecification, @QuaDate,
                    @ProDate, @Length, @Width, @Inum, @KeeId,
                    @SuppId, @TS
                )";

            // 定义参数
            var parameters = new SugarParameter[]
            {
                new SugarParameter("@TenId", "001"),
                new SugarParameter("@InspectIqcId", Guid.NewGuid().ToString()),
                new SugarParameter("@InspectIqcCreateUser", "system"),
                new SugarParameter("@ItemName", entity.ITEMNAME),
                new SugarParameter("@ErpArrivedId", entity.ERP_ARRIVEDID),
                new SugarParameter("@LotQty", entity.LOT_QTY),
                new SugarParameter("@InspectIqcCode", inspectionId),
                new SugarParameter("@ItemId", entity.ITEMID),
                new SugarParameter("@LotNo", (entity.LOTNO==null?"":entity.LOTNO.ToString())),
                new SugarParameter("@ApplyDate", entity.APPLY_DATE),
                new SugarParameter("@ItemSpecification", entity.MODEL_SPEC),
                new SugarParameter("@QuaDate", entity.QUA_DATE),
                new SugarParameter("@ProDate", entity.PRO_DATE),
                new SugarParameter("@Length", entity.LENGTH),
                new SugarParameter("@Width", entity.WIDTH),
                new SugarParameter("@Inum", entity.INUM),
                new SugarParameter("@KeeId", entity.KEEID),
                new SugarParameter("@SuppId", entity.SUPPID),
                new SugarParameter("@TS", entity.TS)
            };

            // 执行 SQL 命令
            Db.Ado.ExecuteCommand(sql, parameters);
        }
        #endregion

        #region 同步报工数据
        public async Task SyncWrDataAsync(string lastSyncTime) {
            _logger.LogInformation("开始处理报工单");
            try {
                // 最多取近一周数据，处理lastSyncTime赋值逻辑
                DateTime defaultStartTime = DateTime.Now.AddDays(-7); // 一周前的当前时间
                DateTime syncStartTime;

                // 尝试解析传入的lastSyncTime
                if (DateTime.TryParse(lastSyncTime, out DateTime parsedTime)) {
                    // 如果解析成功，判断是否超出一周范围
                    if (parsedTime < defaultStartTime) {
                        // 若超出一周，则强制设为一周前
                        syncStartTime = defaultStartTime;
                        _logger.LogWarning("传入的同步时间超出一周范围，自动调整为一周前: {Time}", syncStartTime);
                    }
                    else {
                        // 未超出范围则使用解析后的时间
                        syncStartTime = parsedTime;
                    }
                }
                else {
                    // 解析失败（如首次同步或格式错误），使用默认一周前时间
                    syncStartTime = defaultStartTime;
                    _logger.LogWarning("同步时间格式无效或未提供，使用默认时间: {Time}", syncStartTime);
                }
                _logger.LogInformation($"开始同步QMS_WR_VIEW数据...开始时间:{syncStartTime.ToString("yyyy-MM-dd HH:mm:ss")}");

                var oracleData = await _oracleDb.Ado.SqlQueryAsync<dynamic>(
                    $"SELECT shb05, sfb08, shb111, shb10, ima02, shb02, shb09, eci06, shbdate  " +
                    $"FROM qms_wr_view " +
                    $"WHERE shbdate >= TO_DATE('{syncStartTime.ToString("yyyy-MM-dd HH:mm:ss")}', 'YYYY-MM-DD HH24:MI:SS')");

                if (oracleData.Any()) {
                    var entities = oracleData.Select(x => new erp_wr {
                        INSPECT_SIID = Guid.NewGuid().ToString(),
                        MOID = x.SHB05,
                        LOT_QTY = decimal.Parse(x.SFB08.ToString()),
                        REPORT_QTY = decimal.Parse(x.SHB111.ToString()),
                        ITEMID = x.SHB10,
                        ITEMNAME = x.IMA02,
                        INSPECT_SICREATEDATE = x.SHB02.ToString(),
                        INSPECT02CODE = x.SHB09,
                        INSPECT02NAME = x.ECI06,
                        TS = x.SHBDATE.ToString()
                    });

                    foreach (var entity in entities) {
                        //判断重复
                        bool isExist = Db.Ado.GetInt($@"SELECT count(*) FROM INSPECT_SI WHERE MOID = '{entity.MOID}' AND ITEMID = '{entity.ITEMID}' AND INSPECT_SICREATEDATE = '{entity.INSPECT_SICREATEDATE}' ") > 0;
                        if (isExist) {
                            _logger.LogWarning($"报工单已存在: {entity.MOID}");
                            continue;
                        }

                        // 保存到数据库
                        _logger.LogDebug("正在保存报工单到数据库...");
                        try {
                            SaveWrDataToDatabase(entity);
                        }
                        catch (Exception ex) {
                            _logger.LogError("保存报工单到数据库异常:" + ex.ToString());
                            throw;
                        }
                    }
                    _logger.LogInformation($"成功同步{entities.Count()}条QMS_WR_VIEW数据");
                }
                else {
                    _logger.LogInformation("没有需要同步的QMS_WR_VIEW数据");
                }

            }
            catch (Exception ex) {
                _logger.LogError(ex, "同步QMS_WR_VIEW数据失败");
                throw;
            }
        }

        private void SaveWrDataToDatabase(erp_wr entity) {
            string sql = @"
                INSERT INTO INSPECT_SI (
                    INSPECT_SIID, MOID, LOT_QTY, REPORT_QTY, 
                    ITEMID, ITEMNAME, INSPECT_SICREATEDATE, 
                    INSPECT02CODE, INSPECT02NAME, TS
                ) VALUES (
                    @INSPECT_SIID, @MoId, @LotQty, @ReportQty, 
                    @ItemId, @ItemName, @INSPECT_SICREATEDATE,
                    @Inspect02Code, @Inspect02Name, @TS
                )";

            // 定义参数
            var parameters = new SugarParameter[]
            {
                new SugarParameter("@INSPECT_SIID", entity.INSPECT_SIID),
                new SugarParameter("@MoId", entity.MOID),
                new SugarParameter("@LotQty", entity.LOT_QTY),
                new SugarParameter("@ReportQty", entity.REPORT_QTY),
                new SugarParameter("@ItemId", entity.ITEMID),
                new SugarParameter("@ItemName", entity.ITEMNAME),
                new SugarParameter("@INSPECT_SICREATEDATE", entity.INSPECT_SICREATEDATE),
                new SugarParameter("@Inspect02Code", entity.INSPECT02CODE),
                new SugarParameter("@Inspect02Name", entity.INSPECT02NAME),
                new SugarParameter("@TS", entity.TS)
            };

            // 执行 SQL 命令
            Db.Ado.ExecuteCommand(sql, parameters);
        }
        #endregion

        #region 同步物料数据
        public async Task SyncItemDataAsync(string lastSyncTime) {
            _logger.LogInformation("开始处理物料数据");
            try {
                _logger.LogInformation($"开始同步QMS_ITEM_VIEW数据...开始时间:{lastSyncTime}");

                var oracleData = await _oracleDb.Ado.SqlQueryAsync<dynamic>(
                    $"SELECT ima01, tc_ima02, ima06, ima901 " +
                    $"FROM qms_item_view " +
                    $"WHERE ima901 >= TO_DATE('{lastSyncTime}', 'YYYY-MM-DD HH24:MI:SS')");

                if (oracleData.Any()) {
                    var entities = oracleData.Select(x => new erp_item {
                        ITEMID = x.IMA01,
                        ITEMCODE = x.IMA01,
                        ITEMNAME = x.TC_IMA02,
                        ITEM_GROUPID = x.IMA06,
                        INSPECT_ITEMCREATEDATE = x.IMA901.ToString()
                    });

                    var response = new MaterialSyncResponse {
                        TotalCount = entities.Count()
                    };

                    foreach (var entity in entities) {

                        SyncItemTable(entity);

                        response.SuccessCount++;
                    }

                    _logger.LogInformation($"共{response.TotalCount}条数据，同步成功{response.SuccessCount}条，失败{response.FailedCount}条");


                }
                else {
                    _logger.LogInformation("没有需要同步的QMS_ITEM_VIEW数据");
                }

            }
            catch (Exception ex) {
                _logger.LogError(ex, "同步QMS_ITEM_VIEW数据失败");
                throw;
            }
        }

        private void SyncItemTable(erp_item entity) {
            string sql = @"
                    MERGE INTO ITEM AS target
                    USING (SELECT @ItemId AS ITEMID, @ITEMCODE AS ITEMCODE,@ItemName AS ITEMNAME, @ItemGroupId AS ITEMGROUPID, @INSPECT_ITEMCREATEDATE AS INSPECT_ITEMCREATEDATE) AS source
                    ON target.ITEMID = source.ITEMID
                    WHEN MATCHED THEN
                        UPDATE SET ITEMCODE = source.ITEMCODE,ITEMNAME = source.ITEMNAME,
                                   ITEM_GROUPID = source.ITEMGROUPID,
                                   INSPECT_ITEMCREATEDATE = source.INSPECT_ITEMCREATEDATE,
                                   ITEMCREATEDATE = getdate()
                    WHEN NOT MATCHED THEN
                        INSERT (ITEMID, ITEMCODE,ITEMNAME, ITEM_GROUPID, INSPECT_ITEMCREATEDATE, ITEMCREATEUSER, ITEMCREATEDATE)
                        VALUES (source.ITEMID, source.ITEMCODE,source.ITEMNAME, source.ITEMGROUPID, source.INSPECT_ITEMCREATEDATE, 'system', getdate());";
            // 定义参数
            var parameters = new SugarParameter[]
            {
                new SugarParameter("@ItemId", entity.ITEMID),
                new SugarParameter("@ITEMCODE", entity.ITEMID),
                new SugarParameter("@ItemName", entity.ITEMNAME),
                new SugarParameter("@ItemGroupId", entity.ITEM_GROUPID),
                new SugarParameter("@INSPECT_ITEMCREATEDATE", entity.INSPECT_ITEMCREATEDATE)
            };

            Db.Ado.ExecuteCommand(sql, parameters);
        }
        #endregion

        #region 同步供应商数据
        public async Task SyncVendDataAsync(string lastSyncTime) {
            _logger.LogInformation("开始处理供应商数据");
            try {
                _logger.LogInformation($"开始同步QMS_VEND_VIEW数据...开始时间:{lastSyncTime}");

                var oracleData = await _oracleDb.Ado.SqlQueryAsync<dynamic>(
                    $"SELECT pmc03, pmc01, pmccrat " +
                    $"FROM qms_vend_view " +
                    $"WHERE pmccrat >= TO_DATE('{lastSyncTime}', 'YYYY-MM-DD HH24:MI:SS')");

                if (oracleData.Any()) {
                    var entities = oracleData.Select(x => new erp_vend {
                        SUPPNAME = x.PMC03,
                        SUPPID = x.PMC01,
                        SUPPCODE = x.PMC01,
                        INSPECT_SUPPCREATEDATE = x.PMCCRAT.ToString()
                    });


                    var response = new SuppSyncResponse {
                        TotalCount = entities.Count()
                    };

                    foreach (var entity in entities) {

                        SyncSuppTable(entity);

                        response.SuccessCount++;
                    }

                    _logger.LogInformation($"共{response.TotalCount}条数据，同步成功{response.SuccessCount}条，失败{response.FailedCount}条");
                }

                else {
                    _logger.LogInformation("没有需要同步的QMS_VEND_VIEW数据");
                }

            }
            catch (Exception ex) {
                _logger.LogError(ex, "同步QMS_VEND_VIEW数据失败");
                throw;
            }
        }

        private void SyncSuppTable(erp_vend item) {
            string sql = @"
                MERGE INTO SUPP AS target
                USING (SELECT @SuppCode AS SUPPCODE,@SuppId AS SUPPID, @SuppName AS SUPPNAME, @INSPECT_SUPPCREATEDATE AS INSPECT_SUPPCREATEDATE) AS source
                ON target.SUPPID = source.SUPPID
                WHEN MATCHED THEN
                    UPDATE SET SUPPCODE = source.SUPPCODE,SUPPNAME = source.SUPPNAME,
                                INSPECT_SUPPCREATEDATE = source.INSPECT_SUPPCREATEDATE,
                                SUPPCREATEDATE = getdate()
                WHEN NOT MATCHED THEN
                    INSERT (SUPPID, SUPPCODE, SUPPNAME, INSPECT_SUPPCREATEDATE, SUPPCREATEUSER, SUPPCREATEDATE)
                    VALUES (source.SUPPID, source.SUPPCODE,source.SUPPNAME, source.INSPECT_SUPPCREATEDATE, 'system', getdate());";
            // 定义参数
            var parameters = new SugarParameter[]
            {
                new SugarParameter("@SuppId", item.SUPPID),
                new SugarParameter("@SuppCode", item.SUPPCODE),
                new SugarParameter("@SuppName", item.SUPPNAME),
                new SugarParameter("@INSPECT_SUPPCREATEDATE", item.INSPECT_SUPPCREATEDATE)
            };

            Db.Ado.ExecuteCommand(sql, parameters);
        }
        #endregion

        #region 同步客户数据
        public async Task SyncCustDataAsync(string lastSyncTime) {
            _logger.LogInformation("开始处理客户数据");
            try {
                _logger.LogInformation($"开始同步QMS_CUST_VIEW数据...开始时间:{lastSyncTime}");

                var oracleData = await _oracleDb.Ado.SqlQueryAsync<dynamic>(
                    "SELECT * FROM qms_cust_view " +
                    $"WHERE OCCDATE >= TO_DATE('{lastSyncTime}', 'YYYY-MM-DD HH24:MI:SS')"
                );
                if (oracleData.Any()) {
                    var entities = oracleData.Select(x => new erp_cust {
                        CUSTOMCODE = x.OCC01,
                        CUSTOMNAME = x.OCC02,
                        INSPECT_CUSTOMCREATEDATE = x.OCCDATE.ToString()
                    });

                    var response = new CustomerSyncResponse {
                        TotalCount = entities.Count()
                    };

                    foreach (var entity in entities) {

                        SyncCustomerTable(entity);

                        response.SuccessCount++;
                    }

                    _logger.LogInformation($"共{response.TotalCount}条数据，同步成功{response.SuccessCount}条，失败{response.FailedCount}条");
                }
                else {
                    _logger.LogInformation("没有需要同步的QMS_CUST_VIEW数据");
                }

            }
            catch (Exception ex) {
                _logger.LogError(ex, "同步QMS_CUST_VIEW数据失败");
                throw;
            }
        }

        private void SyncCustomerTable(erp_cust item) {
            string sql = @"
                MERGE INTO CUSTOM AS target
                USING (SELECT @CustomID AS CustomID, @CustomCode AS CUSTOMCODE, @CustomName AS CUSTOMNAME, @INSPECT_CUSTOMCREATEDATE AS INSPECT_CUSTOMCREATEDATE) AS source
                ON target.CUSTOMCODE = source.CUSTOMCODE
                WHEN MATCHED THEN
                    UPDATE SET CUSTOMNAME = source.CUSTOMNAME,
                                INSPECT_CUSTOMCREATEDATE = source.INSPECT_CUSTOMCREATEDATE,
                                CUSTOMCREATEDATE = getdate()
                WHEN NOT MATCHED THEN
                    INSERT (CustomID, CUSTOMCODE, CUSTOMNAME, INSPECT_CUSTOMCREATEDATE, CUSTOMCREATEUSER, CUSTOMCREATEDATE)
                    VALUES (source.CustomID,source.CUSTOMCODE, source.CUSTOMNAME, source.INSPECT_CUSTOMCREATEDATE, 'system', getdate());";
            // 定义参数
            var parameters = new SugarParameter[]
            {
                new SugarParameter("@CustomID", Guid.NewGuid().ToString()),
                new SugarParameter("@CustomCode", item.CUSTOMCODE),
                new SugarParameter("@CustomName", item.CUSTOMNAME),
                new SugarParameter("@INSPECT_CUSTOMCREATEDATE", item.INSPECT_CUSTOMCREATEDATE)
            };

            Db.Ado.ExecuteCommand(sql, parameters);
        }
        #endregion

        #region 获取上次同步时间
        public string GetLastSyncTime(string tableName, string timeFieldName) {
            try {
                string sql = $"SELECT CONVERT(VARCHAR(20), MAX({timeFieldName}), 120) AS LastTimeStr FROM {tableName}";

                //string sql = $"SELECT CONVERT(VARCHAR(20), MAX(INSPECT_IQCCREATEDATE), 120) AS LastTimeStr FROM {tableName}";

                string result = Db.Ado.GetString(sql);
                if (string.IsNullOrEmpty(result)) {
                    return "2000-01-01 00:00:00"; // 默认最小时间
                }

                return result;
            }
            catch (Exception ex) {
                _logger.LogError(ex, $"获取表{tableName}的最后同步时间失败");
                return "2000-01-01 00:00:00";// 默认最小时间
            }

        }
        #endregion

    }
}
