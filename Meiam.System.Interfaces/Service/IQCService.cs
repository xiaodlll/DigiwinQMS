//------------------------------------------------------------------------------
// <auto-generated>
//     此代码已从模板生成手动更改此文件可能导致应用程序出现意外的行为。
//     如果重新生成代码，将覆盖对此文件的手动更改。
//     author MEIAM
// </auto-generated>
//------------------------------------------------------------------------------
using Meiam.System.Model;
using Meiam.System.Model.Dto;
using System.Collections.Generic;
using System.Threading.Tasks;
using SqlSugar;
using System.Linq;
using System;
using System.IO;
using OxyPlot.Axes;
using OxyPlot.Series;
using OxyPlot;
using OxyPlot.Core.Drawing;
using OxyPlot.Legends;
using Microsoft.Data.SqlClient;
using System.Data;
using static Microsoft.EntityFrameworkCore.DbLoggerCategory;
using Microsoft.Extensions.Options;
using DotNetCore.CAP;
using Mapster.Utils;
using Newtonsoft.Json.Linq;
using System.Text.RegularExpressions;
using SqlSugar.Extensions;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using System.Reflection.Emit;
using System.Data;
using Meiam.System.Common;

namespace Meiam.System.Interfaces
{
    public class IQCService : BaseService<INSPECT_TENSILE>, IIQCService {

        public IQCService(IUnitOfWork unitOfWork) : base(unitOfWork) {
        }

        #region GetInspectReport 
        public byte[] GetInspectReport(InspectInputDto parm)
        {
            string INSPECT_CODE;//检验单号
            string INSPECT_PUR; //检验来源
            string COLUM002ID;//检验项目ID
            string ITEMID;//物料编码
            string LOTID;//批次号
            string INSPECT_DATE;
            string COLUM001ID;//COLUM001ID
            #region 获得检验单号和检验来源
            string sql = @"SELECT TOP 1 ISNULL(INSPECT_DEV1.INSPECT_CODE,''),ISNULL(INSPECT_DEV1.INSPECT_PUR,''),
INSPECT_DEV1.COLUM002ID,INSPECT_DEV1.ITEMID,INSPECT_DEV1.LOTID,INSPECT_DEV1.INSPECT_DATE,INSPECT_DEV1.COLUM001ID
FROM INSPECT_DEV1 
LEFT JOIN INSPECT_FLOW ON INSPECT_FLOW.INSPECT_FLOWID=INSPECT_DEV1.INSPECT_FLOWID
LEFT JOIN COLUM002 ON COLUM002.COLUM002ID=INSPECT_DEV1.COLUM002ID
WHERE INSPECT_DEV1ID=@INSPECT_DEV1ID";
            // 定义参数
            var parameters = new SugarParameter[]
            {
                new SugarParameter("@INSPECT_DEV1ID", parm.INSPECT_DEV1ID)
            };

            // 执行 SQL 命令
            var dataTable = Db.Ado.GetDataTable(sql, parameters);

            if (dataTable.Rows.Count > 0)
            {
                INSPECT_CODE = dataTable.Rows[0][0].ToString();
                INSPECT_PUR = dataTable.Rows[0][1].ToString();
                COLUM002ID = dataTable.Rows[0][2].ToString();
                ITEMID = dataTable.Rows[0][3].ToString();
                LOTID = dataTable.Rows[0][4].ToString();
                INSPECT_DATE = DateTime.Parse(dataTable.Rows[0][5].ToString()).ToString("yyyyMMddHHmmss");
                COLUM001ID = dataTable.Rows[0][6].ToString();
            }
            else
            {
                throw new Exception("未获取到检验单号和检验来源");
            }
            #endregion

            #region 判断检验单是否已经完成
            //如果 检验单号 不为空 并且 检验来源 不为空 @动态表名 =“INSPECT_”+@INSPECT_PUR
            //@动态表面ID栏位 = @动态表名 +“ID”
            //    SELECT STATE FROM @动态表名 WHERE @动态表面ID栏位 = @INSPECT_CODE
            //    如果 STATE =“已完成”
            //    返回错误：”检验单已完成，无法再次产生检验报告” 提出API
            string table = string.Empty;
            string surfaceId = string.Empty;
            if (!string.IsNullOrEmpty(INSPECT_CODE) && !string.IsNullOrEmpty(INSPECT_PUR))
            {
                table = "INSPECT_" + INSPECT_PUR;
                surfaceId = table + "ID";
                string state = string.Empty;

                sql = @$"SELECT STATE FROM {table} WHERE {surfaceId}=@INSPECT_CODE";
                // 定义参数
                parameters = new SugarParameter[]
                {
                    new SugarParameter("@INSPECT_CODE", INSPECT_CODE)
                };
                // 执行 SQL 命令
                dataTable = Db.Ado.GetDataTable(sql, parameters);

                if (dataTable.Rows.Count > 0)
                {
                    state = dataTable.Rows[0][0].ToString();
                }
                else
                {
                    throw new Exception("未获取到检验单状态");
                }

                if (state == "已完成")
                {
                    throw new Exception("检验单已完成，无法再次产生检验报告");
                }
            }
            else
            {
                throw new Exception("检验单号或检验来源为空");
            }
            #endregion

            #region 获取应检样本数
            int lot_Qyt = 0;
            sql = @$"SELECT top 1 LOT_QTY FROM {table} WHERE {surfaceId}=@INSPECT_CODE";
            // 定义参数
            parameters = new SugarParameter[]
            {
                    new SugarParameter("@INSPECT_CODE", INSPECT_CODE)
            };
            // 执行 SQL 命令
            dataTable = Db.Ado.GetDataTable(sql, parameters);
            if (dataTable.Rows.Count > 0)
            {
                lot_Qyt = int.Parse(dataTable.Rows[0][0].ToString());
            }
            else
            {
                throw new Exception("未获取到检验批次数量LOT_QTY");
            }

            //1. 获得应检样本量
            int inspect_Qyt = Db.Ado.GetInt(@$"GET_INPECT_CNT  '{COLUM002ID}','{lot_Qyt}'");
            if (inspect_Qyt == 0)
                inspect_Qyt = 1;//测试1笔
            //2.获得@实际记录量
            int actCount = Db.Ado.GetInt(@$"SELECT COUNT(1) FROM INSPECT_TENSILE WHERE INSPECT_DEV1ID='{parm.INSPECT_DEV1ID}'");

            //3.如果@实际记录量<应检样本量
            if (actCount < inspect_Qyt)
            {
                //历史样本数
                int historyCount = Db.Ado.GetInt(@$"Select COUNT(1) FROM INSPECT_TENSILE 
LEFT JOIN INSPECT_DEV1 ON INSPECT_TENSILE.INSPECT_DEV1ID=INSPECT_DEV1.INSPECT_DEV1ID
WHERE INSPECT_DEV1.ITEMID='{ITEMID}'  AND INSPECT_TENSILE.INSPECT_DEV1<>'{parm.INSPECT_DEV1ID}'");
                if (historyCount < inspect_Qyt - actCount)
                {
                    throw new Exception("历史数据记录笔数不满足，无法产生报告");
                }
            }

            //1. 获取编码
            string INPECT_CODE = Db.Ado.GetString(@$"DEV2_GET_INPECT_CODE '{parm.INSPECT_DEV1ID}','{lot_Qyt}'");
            if (INPECT_CODE.Contains("错误"))
            {
                throw new Exception($"DEV2_GET_INPECT_CODE获取异常：{INPECT_CODE}");
            }
            #endregion

            //重新获取主资料
            var dtMain = Db.Ado.GetDataTable(@$"SELECT 
INSPECT_DEV1.INSPECT_CODE   -- 检验单号  
,INSPECT_DEV1.INSPECT_PUR     -- 检验来源    IQC OQC
,INSPECT_FLOW.ITEMID		      -- 物料编码    (有个低代码待办)
,INSPECT_DEV1.LOTID			      -- 批次号      
,INSPECT_DEV1.DOC_CODE		      -- 来源单号  
,INSPECT_DEV1.COLUM002ID
,COLUM002.COC_ATTR           --特殊设定
,INSPECT_DEV1.INSPECT_FLOWID	
FROM INSPECT_DEV1 
LEFT JOIN INSPECT_FLOW ON INSPECT_FLOW.INSPECT_FLOWID=INSPECT_DEV1.INSPECT_FLOWID
LEFT JOIN COLUM002 ON COLUM002.COLUM002ID=INSPECT_DEV1.COLUM002ID
WHERE INSPECT_DEV1ID='{parm.INSPECT_DEV1ID}'");

            List<INSPECT_TENSILE_D> listToSave = new List<INSPECT_TENSILE_D>();
            //实际检测集合
            var dtActiveMain = Db.Ado.GetDataTable(@$"SELECT TOP {inspect_Qyt} *,FLAG=0 FROM INSPECT_TENSILE WHERE INSPECT_DEV1ID='{parm.INSPECT_DEV1ID}'");
            foreach (DataRow item in dtActiveMain.Rows)
            {
                listToSave.Add(GetDetailByInspect(item));
            }
            //四.如果@应检样本数>@实际记录笔
            if (inspect_Qyt > dtActiveMain.Rows.Count)
            {
                var dtRandomAddData = Db.Ado.GetDataTable(@$"SELECT TOP {inspect_Qyt - dtActiveMain.Rows.Count} *，FLAG=1
FROM INSPECT_TENSILE
LEFT JOIN INSPECT_DEV1 
ON INSPECT_TENSILE.INSPECT_DEV1ID = INSPECT_DEV1.INSPECT_DEV1ID
WHERE INSPECT_DEV1.ITEMID ='{ITEMID}'
AND INSPECT_TENSILE.INSPECT_DEV1ID <>'{parm.INSPECT_DEV1ID}' ORDER BY NEWID()");
                foreach (DataRow item in dtRandomAddData.Rows)
                {
                    listToSave.Add(GetDetailByInspect(item));
                }
            }

            #region SaveToInspectDetail
            try
            {
                // 开启事务
                Db.Ado.BeginTran();

                Db.Ado.ExecuteCommand($"DELETE INSPECT_TENSILE_D WHERE INSPECT_DEV1ID='{parm.INSPECT_DEV1ID}'");
                Db.Ado.ExecuteCommand($"DELETE INSPECT_TENSILE_D_R WHERE INSPECT_DEV1ID='{parm.INSPECT_DEV1ID}'");

                // 批量插入数据
                Db.Insertable<INSPECT_TENSILE_D>(listToSave).ExecuteCommand();

                List<INSPECT_TENSILE_D_R> listInspectDataR = new List<INSPECT_TENSILE_D_R>();
                foreach (var detail in listToSave)
                {
                    // 去除字符串首尾的花括号
                    string trimmedInput = detail.Y_AXIS.Trim('{', '}');
                    // 按逗号分割字符串
                    string[] numberStrings = trimmedInput.Split(',');
                    // 将分割后的字符串数组转换为双精度浮点数数组
                    decimal[] numbers = Array.ConvertAll(numberStrings, decimal.Parse);
                    decimal max = numbers.Max();
                    decimal min = numbers.Min();
                    decimal avg = numbers.Average();

                    var drItem = new INSPECT_TENSILE_D_R()
                    {
                        INSPECT_TENSILE_D_RID = Guid.NewGuid().ToString(),
                        INSPECT_TENSILE_DID = detail.INSPECT_TENSILE_DID,
                        INSPECT_DEV1ID = detail.INSPECT_DEV1ID,
                        SAMPLEID = detail.SAMPLEID,
                        MaxValue = max,
                        MinValue = min,
                        AvgValue = avg
                    };
                    listInspectDataR.Add(drItem);
                }

                Db.Insertable<INSPECT_TENSILE_D_R>(listInspectDataR).ExecuteCommand();

                //将【INSPECT_TENSILE_D_R】中的平均值作为检验结果同步给QMS
                Db.Ado.ExecuteCommand($"DELETE INSPECT_ZONE WHERE COLUM002ID='{COLUM002ID}' AND INSPECTCODE='{INSPECT_CODE}'");

                var dtSAMPLEID = Db.Ado.GetDataTable(@$"SELECT SAMPLEID FROM INSPECT_TENSILE_D_R WHERE INSPECT_DEV1ID='{parm.INSPECT_DEV1ID}' GROUP BY SAMPLEID");
                int number = 1;
                foreach (DataRow item in dtSAMPLEID.Rows)
                {
                    string sampleId = item[0].ToString();
                    //1. 获得@检验内容编码
                    DataTable dtCOLUM001CODE = Db.Ado.GetDataTable($"SELECT COLUM001CODE FROM COLUM001 WHERE COLUM001ID='{COLUM001ID}'");
                    string COLUM001CODEs = string.Empty;
                    foreach (DataRow dr in dtCOLUM001CODE.Rows)
                    {
                        COLUM001CODEs += "," + dr[0].ToString();
                    }
                    COLUM001CODEs = COLUM001CODEs.TrimEnd(',');
                    //2. 获得@检验值
                    DataTable dtAvgValue = Db.Ado.GetDataTable($"SELECT AvgValue FROM INSPECT_TENSILE_D_R WHERE  INSPECT_DEV1ID='{parm.INSPECT_DEV1ID}' AND SAMPLEID ='{sampleId}'");
                    string AvgValues = string.Empty;
                    foreach (DataRow dr in dtAvgValue.Rows)
                    {
                        AvgValues += ",'" + dr[0].ToString() + "'";
                    }
                    AvgValues = AvgValues.TrimEnd(',');
                    if(dtCOLUM001CODE.Rows.Count!= dtAvgValue.Rows.Count)
                    {
                        throw new Exception($"{sampleId}检验内容编码{COLUM001CODEs}和检测值{AvgValues}数量不匹配");
                    }

                    sql = @$"INSERT INSPECT_ZONE (INSPECT_ZONECREATEUSER,INSPECT_ZONECREATEDATE,INSPECT_ZONEID,INSPECTTYPE,COLUM002ID,CUSTOM_ITEMID,LOTNO,INSPECTCODE,PCSCODE,ISAUTO {COLUM001CODEs} ) VALUES  (
'{parm.UserName}'                        --传参@userName
,CONVERT(varchar(20),GETDATE(),120)
,newid()
,'{INSPECT_PUR}'                      --@INSPECT_PUR
,'{COLUM002ID}'                       --@COLUM002ID
,'{ITEMID}'                           --@ITEMID
,'{LOTID}'                            --@LOTID
,'{INSPECT_CODE}'                     --@INSPECT_CODE 检验单号
,'{number++}'                         --样本序号 (第1个SAMPLEID 给1，第2个给2,依次类推)
,'0'                                 --固定给 0
{AvgValues} )";
                    Db.Ado.ExecuteCommand(sql);
                }

                // 提交事务
                Db.Ado.CommitTran();
            }
            catch (Exception)
            {
                // 回滚事务
                Db.Ado.RollbackTran();
                throw;
            }
            #endregion

            byte[] fileContents = GetInspectImage(listToSave);

            //返回文件流
            var fileName = $"{ITEMID}_{LOTID}{INSPECT_DATE}.jpg";
            string filePath = Path.Combine(AppSettings.Configuration["AppSettings:FileServerPath"], @$"TENSILE\{ITEMID}\{fileName}");

            //保存到SCANDOC
            SaveToScanDoc("拉力机检测图", fileContents, filePath, INSPECT_CODE, parm.INSPECT_DEV1ID);

            return fileContents;
        }
        private INSPECT_TENSILE_D GetDetailByInspect(DataRow item)
        {
            var newItem = new INSPECT_TENSILE_D();
            newItem.INSPECT_TENSILE_DID = Guid.NewGuid().ToString();
            var mapping = new Dictionary<string, string>
            {
                { "X-AXIS", "X_AXIS" },
                { "Y-AXIS", "Y_AXIS" }
            };
            var properties = typeof(INSPECT_TENSILE_D).GetProperties();
            foreach (var prop in properties)
            {
                string columnName = prop.Name; // 默认按类的属性名查找
                if (mapping.ContainsValue(prop.Name)) // 如果属性名在映射字典的值中，获取对应的数据库列名
                {
                    columnName = mapping.FirstOrDefault(x => x.Value == prop.Name).Key;
                }

                // 赋值逻辑
                if (item.Table.Columns.Contains(columnName) && item[columnName] != DBNull.Value)
                {
                    Type propType = Nullable.GetUnderlyingType(prop.PropertyType) ?? prop.PropertyType;
                    object value = Convert.ChangeType(item[columnName], propType);
                    prop.SetValue(newItem, value);
                }
            }
            //newItem.INSPECT_DEV1ID = item["INSPECT_DEV1ID"].ToString();
            return newItem;
        }
        
        private byte[] GetInspectImage(List<INSPECT_TENSILE_D> listInspectData){
            byte[] result = null;

            // 创建一个 PlotModel 对象，它代表整个图表
            var plotModel = new PlotModel {
                Title = "拉力机检测图",
                Background = OxyColors.White
            };
            var legend = new Legend
            {
                LegendPlacement = LegendPlacement.Inside, // 图例放在绘图区域外部
                LegendPosition = LegendPosition.TopLeft,  // 设置左上角
                LegendOrientation = LegendOrientation.Vertical, // 纵向排列
                LegendBackground = OxyColors.White, // 背景色
            };

            plotModel.Legends.Add(legend); // 添加图例

            int xMax = 1; int yMax = 1;
            foreach (var detail in listInspectData)
            {
                string trimmedInput = detail.X_AXIS.Trim('{', '}');
                string[] numberStrings = trimmedInput.Split(',');
                double[] dataArraysX = Array.ConvertAll(numberStrings, double.Parse);

                trimmedInput = detail.Y_AXIS.Trim('{', '}');
                numberStrings = trimmedInput.Split(',');
                double[] dataArraysY = Array.ConvertAll(numberStrings, double.Parse);
                // 更新 xMax 和 yMax
                if (dataArraysX.Length > 0)
                    xMax = Math.Max(xMax, (int)dataArraysX.Max());

                if (dataArraysY.Length > 0)
                    yMax = Math.Max(yMax, (int)dataArraysY.Max());
            }

            // 计算 Max 的 110%，并取整数
            xMax = (int)Math.Ceiling(xMax * 1.1);
            yMax = (int)Math.Ceiling(yMax * 1.1);

            // 创建一个线性坐标轴作为 X 轴
            plotModel.Axes.Add(new LinearAxis {
            Position = AxisPosition.Bottom,
            Title = "变形(mm)",
            Minimum = 0,
            Maximum = xMax
            });

            // 创建一个线性坐标轴作为 Y 轴
            plotModel.Axes.Add(new LinearAxis {
                Position = AxisPosition.Left,
                Title = "力(gt)",
                Minimum = 0,
                Maximum = yMax
            });

            int i = 1;
            Random random = new Random();
            foreach (var detail in listInspectData) {
                string trimmedInput = detail.X_AXIS.Trim('{', '}');
                string[] numberStrings = trimmedInput.Split(',');
                double[] dataArraysX = Array.ConvertAll(numberStrings, double.Parse);

                trimmedInput = detail.Y_AXIS.Trim('{', '}');
                numberStrings = trimmedInput.Split(',');
                double[] dataArraysY = Array.ConvertAll(numberStrings, double.Parse);

                // 生成随机颜色
                byte r = (byte)random.Next(256);
                byte g = (byte)random.Next(256);
                byte b = (byte)random.Next(256);
                OxyColor randomColor = OxyColor.FromRgb(r, g, b);

                var lineSeries = new LineSeries {
                    Title = $"Plot{i++}",
                    MarkerType = MarkerType.Circle,
                    MarkerSize = 0.2,
                    MarkerStroke = randomColor,
                    StrokeThickness = 1,
                    MarkerFill = OxyColors.White,
                Color = randomColor
                };

                for (int j = 0; j < dataArraysX.Length; j++) {
                    DataPoint p = new DataPoint(dataArraysX[j], dataArraysY[j]);
                    lineSeries.Points.Add(p);
                }

                // 将曲线添加到图表模型中
                plotModel.Series.Add(lineSeries);
            }

            // 保存图表为 PNG 图片
            var exporter = new PngExporter { Width = 800, Height = 600, Resolution = 50 };
            using (MemoryStream stream = new MemoryStream()) {
                exporter.Export(plotModel, stream);
                stream.Position = 0;
                result = stream.ToArray();
                stream.Flush();
            }
            return result;
        }
        private void SaveToScanDoc(string docType, byte[] fileContents, string scandocName, string peopleId, string INSPECT_DEV1ID) {
            FileInfo file = new FileInfo(scandocName);
            if (!file.Directory.Exists) {
                file.Directory.Create();
            }
            File.WriteAllBytes(scandocName, fileContents);

            Db.Ado.ExecuteCommand($"DELETE SCANDOC WHERE INSPECT_DEV1ID='{INSPECT_DEV1ID}'");

            string sql = @"
            INSERT INTO SCANDOC (TENID, SCANDOCID, SCANDOCCODE, SCANDOCNAME, DOCTYPE, PEOPLEID, createdate, SCANDOC_user,INSPECT_DEV1ID)
            VALUES ('001', @SCANDOCID, @SCANDOCID, @SCANDOCNAME, @DOCTYPE, @PEOPLEID, CONVERT(VARCHAR(20), GETDATE(), 120), @PEOPLEID, @INSPECT_DEV1ID)";

            // 定义参数
            var parameters = new SugarParameter[]
            {
                new SugarParameter("@SCANDOCID", Guid.NewGuid().ToString()),
                new SugarParameter("@SCANDOCNAME", scandocName),
                new SugarParameter("@DOCTYPE", docType),
                new SugarParameter("@PEOPLEID", peopleId),
                new SugarParameter("@INSPECT_DEV1ID", INSPECT_DEV1ID)
            };

            // 执行 SQL 命令
            Db.Ado.ExecuteCommand(sql, parameters);
        }
        #endregion

        #region GetCPKfile
        public byte[] GetCPKfile(string INSPECT_DEV2ID, string userName)
        {
            string INSPECT_CODE;//检验单号
            string INSPECT_PUR; //检验来源

            #region 一．获得检验单号和检验来源
            string sql = @$"SELECT Top 1 ISNULL(INSPECT_DEV2.INSPECT_CODE,'') AS INSPECT_CODE,ISNULL(INSPECT_DEV2.INSPECT_PUR,'') As INSPECT_PUR    
                        FROM INSPECT_DEV2 
                        LEFT JOIN INSPECT_FLOW ON INSPECT_FLOW.INSPECT_FLOWID=INSPECT_DEV2.INSPECT_FLOWID
                        LEFT JOIN COLUM002 ON COLUM002.COLUM002ID=INSPECT_DEV2.COLUM002ID
                        WHERE INSPECT_DEV2ID='{INSPECT_DEV2ID}'";
            // 执行 SQL 命令
            DataTable dtDEV2 = Db.Ado.GetDataTable(sql);

            if (dtDEV2.Rows.Count > 0)
            {
                INSPECT_CODE = dtDEV2.Rows[0]["INSPECT_CODE"].ToString();
                INSPECT_PUR = dtDEV2.Rows[0]["INSPECT_PUR"].ToString();
            }
            else
            {
                throw new Exception("未获取到检验单号和检验来源");
            }
            #endregion

            #region 二．判断检验单是否已经完成
            //如果 检验单号 不为空 并且 检验来源 不为空 @动态表名 =“INSPECT_”+@INSPECT_PUR
            //@动态表面ID栏位 = @动态表名 +“ID”
            //    SELECT STATE FROM @动态表名 WHERE @动态表面ID栏位 = @INSPECT_CODE
            //    如果 STATE =“已完成”
            //    返回错误：”检验单已完成，无法再次产生检验报告” 提出API
            string table = string.Empty;
            string surfaceId = string.Empty;

            if (!string.IsNullOrEmpty(INSPECT_CODE) && !string.IsNullOrEmpty(INSPECT_PUR))
            {
                table = "INSPECT_" + INSPECT_PUR;
                surfaceId = table + "ID";
                string state = string.Empty;

                sql = @$"SELECT STATE FROM {table} WHERE {surfaceId}='{INSPECT_CODE}'";
                // 执行 SQL 命令
                DataTable dtPUR = Db.Ado.GetDataTable(sql);

                if (dtPUR.Rows.Count > 0)
                {
                    state = dtPUR.Rows[0]["STATE"].ToString();
                }
                else
                {
                    throw new Exception("未获取到检验单状态");
                }

                if (state == "已完成")
                {
                    throw new Exception("检验单已完成，无法再次产生检验报告");
                }
            }
            else
            {
                throw new Exception("检验单号或检验来源为空");
            }
            #endregion

            #region 三．执行存储过程  

            //执行存储过程 wjj 临时
            //如果 返回值前两位 =“错误”，则 退出API，将返回值返回
            // 执行 SQL 命令
            string INPECT_CODE = Db.Ado.GetString(@$"EXEC DEV2_GET_INPECT_CODE '{INSPECT_DEV2ID}','COC_ATTR_001'");
            //if (INPECT_CODE.Contains("错误"))
            //{
            //    throw new Exception($"DEV2_GET_INPECT_CODE获取异常：{INPECT_CODE}");
            //}

            #endregion

            #region 四．重新获得主档资料
            string COLUM002ID = string.Empty;
            string ITEMID = string.Empty;
            string LOTID = string.Empty;
            string INSPECT_FLOWID = string.Empty;

            sql = @$"SELECT Top 1 ISNULL(INSPECT_DEV2.INSPECT_CODE, '') AS INSPECT_CODE
                    ,ISNULL(INSPECT_DEV2.INSPECT_PUR, '') AS INSPECT_PUR  -- 检验来源 IQC OQC
                    ,ISNULL(INSPECT_FLOW.ITEMID, '') AS ITEMID-- 物料编码(有个低代码待办)
                    ,ISNULL(INSPECT_DEV2.LOTID, '') AS LOTID-- 批次号
                    ,ISNULL(INSPECT_DEV2.DOC_CODE, '') AS DOC_CODE-- 来源单号
                    ,ISNULL(INSPECT_DEV2.COLUM002ID, '') AS COLUM002ID
                    ,ISNULL(COLUM002.COC_ATTR, '') AS COC_ATTR--特殊设定
                    ,ISNULL(INSPECT_DEV2.INSPECT_FLOWID, '') AS INSPECT_FLOWID
                    FROM INSPECT_DEV2
                    LEFT JOIN INSPECT_FLOW ON INSPECT_FLOW.INSPECT_FLOWID = INSPECT_DEV2.INSPECT_FLOWID
                    LEFT JOIN COLUM002 ON COLUM002.COLUM002ID = INSPECT_DEV2.COLUM002ID
                    WHERE INSPECT_DEV2ID = '{INSPECT_DEV2ID}'";
            // 执行 SQL 命令
            DataTable dtMainDEV2 = Db.Ado.GetDataTable(sql);

            if (dtMainDEV2.Rows.Count > 0)
            {
                COLUM002ID = dtMainDEV2.Rows[0]["COLUM002ID"].ToString();
                ITEMID = dtMainDEV2.Rows[0]["ITEMID"].ToString();
                LOTID = dtMainDEV2.Rows[0]["LOTID"].ToString();
                INSPECT_FLOWID = dtMainDEV2.Rows[0]["INSPECT_FLOWID"].ToString();
            }

            #endregion

            #region 五．获得一些资料 为第七、第八步使用
            //得到 @COLUM002结果集
            sql = @$"SELECT * FROM COLUM002 where COLUM002ID = '{COLUM002ID}'";
            // 执行 SQL 命令
            DataTable dtCOLUM002 = Db.Ado.GetDataTable(sql);
            int count_COLUM002 = dtCOLUM002.Rows.Count;

            //得到 @第一个样本ID
            sql = @$"SELECT TOP 1 SAMPLEID FROM INSPECT_2D  WHERE INSPECT_DEV2ID = '{INSPECT_DEV2ID}'";
            int sampleId = Db.Ado.GetInt(sql);

            //如果 INSPECT_2D异常结果集 记录数> 0 则
            //返回错误：“当前设备原始LOCATION资料和当前选择的检验项目的检验内容不一致”
            //得到 INSPECT_2D异常结果集
            sql = @$"SELECT * FROM  INSPECT_2D
                LEFT JOIN COLUM001 ON INSPECT_2D.LOCATION = COLUM001.COLUM001NAME
                WHERE INSPECT_DEV2ID = '{INSPECT_DEV2ID}'  AND SAMPLEID = {sampleId}
                AND COLUM001.COLUM002ID = '{COLUM002ID}'  AND COLUM001.COLUM001CODE IS NOT NULL
                ORDER BY LOCATION";
            // 执行 SQL 命令
            DataTable dtSAMPLEID = Db.Ado.GetDataTable(sql);
            int count_INSPECT_2D = dtSAMPLEID.Rows.Count;

            #region 七．进一步检验

            if (count_INSPECT_2D > 0)
            {
                throw new Exception("当前设备原始LOCATION资料和当前选择的检验项目的检验内容不一致");
            }
            #endregion

            #endregion

            #region 六 .检验批次数量LOT_QTY和应检样本数 

            //得到@检验批次数量LOT_QTY
            int lot_Qyt = 0;
            sql = @$"SELECT top 1 ISNULL(LOT_QTY,0)  FROM {table} WHERE {surfaceId}='{INSPECT_CODE}'";
            // 执行 SQL 命令
            DataTable dtLotQty = Db.Ado.GetDataTable(sql);
            if (dtLotQty.Rows.Count > 0)
            {
                lot_Qyt = int.Parse(dtLotQty.Rows[0][0].ToString());
            }
            else
            {
                throw new Exception("未获取到检验批次数量LOT_QTY");
            }
            //六．获得应检样本数
            //由@COLUM002ID获得应检样本数
            //执行存储过程：GET_INPECT_CNT @COLUM002ID, @检验批次数量LOT_QTY
            //@应检样本数 = 结果集CNT列的值
            //获得应检样本量
            int inspect_Qyt = Db.Ado.GetInt(@$"EXEC GET_INPECT_CNT  '{COLUM002ID}','{lot_Qyt}'");

            #endregion

            #region 八．更新检验内容的CODE给 INSPECT_2D
            //如果 @COLUM002结果集 记录数 > 0 并且 @INSPECT_2D异常结果集 记录数 > 0
            if (count_COLUM002 > 0 && count_INSPECT_2D > 0)
            {
                //（通过LOCATION关联检验内容，更新设备原始记录）
                sql = @$"UPDATE INSPECT_2D SET
                        COLUM001CODE = COLUM001.COLUM001CODE,ADD_VALUE = COLUM001.ADD_VALUE
                        FROM INSPECT_2D
                        LEFT JOIN COLUM001 ON INSPECT_2D.LOCATION = COLUM001.COLUM001NAME
                        WHERE INSPECT_DEV2ID = '{INSPECT_DEV2ID}'
                        AND SAMPLEID = {sampleId}
                        AND COLUM001.COLUM002ID = '{COLUM002ID}'
                        AND COLUM001.COLUM001CODE IS NOT NULL";
                // 执行 SQL 命令
                Db.Ado.ExecuteCommand(sql);
            }
            #endregion

            #region 九．将 INSPECT_2D 的检验内容（检验位置）传递给QMS
            //如果 @COLUM002结果集 记录数 = 0 或者为NULL  wjj
            if (count_COLUM002 == 0)
            {
                try
                {
                    // 开启事务
                    Db.Ado.BeginTran();

                    #region 1.根据@COLUM002ID 产生检验内容（COLUM001）

                    string CREATEUSER = "system";
                    string TENID = "001";
                    string COLUM001ID = string.Empty;
                    string @CUSTOMID = string.Empty;
                    string RE = string.Empty;
                    string MAX_VALUE = string.Empty;  //--INSPECT_2D.VALUE2
                    string STD_VALUE = string.Empty;  //标准值: INSPECT_2D.VALUE1
                    string COLUM001NAME = string.Empty;//--INSPECT_2D.LOCATION
                    string INSPECT_LEVELID = string.Empty;
                    string OPTIONS = string.Empty;
                    string COLUM001CODE = string.Empty;//--第一个A01，第二个A02，依次类推
                    string MIN_VALUE = string.Empty;  //INSPECT_2D.VALUE3
                    string REMARK1 = "二次元";
                    string AC = string.Empty;
                    string INSPECT_AQLCODE = string.Empty;
                    string REMARK = string.Empty;
                    string REMARK2 = string.Empty;
                    string COLUM0A10 = "Num";
                    string INSPECT_PLANID = "c6cae8ea-24e0-4fbe-ac6e-775843549e5b";
                    string INSPECT_2DID = string.Empty;
                    //根据 @COLUM002ID 产生检验内容（COLUM001）
                    //--得到第一个样本的所有检验内容
                    sql = @$"SELECT VALUE2,VALUE1,LOCATION,VALUE3,INSPECT_2DID,* FROM  INSPECT_2D
                        WHERE  INSPECT_DEV2ID = '{INSPECT_DEV2ID}'  AND SAMPLEID = {sampleId}";
                    // 执行 SQL 命令
                    DataTable dtINSPECT_2D = Db.Ado.GetDataTable(sql);

                    for (int i = 0; i < dtINSPECT_2D.Rows.Count; i++)
                    {
                        STD_VALUE = dtINSPECT_2D.Rows[i]["VALUE1"].ToString();
                        MAX_VALUE = dtINSPECT_2D.Rows[i]["VALUE2"].ToString();
                        MIN_VALUE = dtINSPECT_2D.Rows[i]["VALUE3"].ToString();
                        COLUM001NAME = dtINSPECT_2D.Rows[i]["LOCATION"].ToString();
                        COLUM001CODE = "A" + (i + 1).ToString("D2");
                        INSPECT_2DID = dtINSPECT_2D.Rows[i]["INSPECT_2DID"].ToString();
                        COLUM001ID = Guid.NewGuid().ToString();

                        //insert into TABLE COLUM001
                        sql = @$"INSERT INTO COLUM001(COLUM001CREATEDATE, COLUM001CREATEUSER, TENID, COLUM001ID, 
                            CUSTOMID, RE, MAX_VALUE, STD_VALUE, COLUM001NAME, INSPECT_LEVELID, OPTIONS, 
                            COLUM001CODE, MIN_VALUE, COLUM002ID, REMARK1, AC, INSPECT_AQLCODE, REMARK, REMARK2, 
                            COLUM0A10, INSPECT_PLANID) 
                            VALUES( 
                            CONVERT(VARCHAR(20), GETDATE(), 120), '{CREATEUSER}', '{TENID}', '{COLUM001ID}', '{CUSTOMID}', 
                            '{RE}', '{MAX_VALUE}','{STD_VALUE}', '{COLUM001NAME}', '{INSPECT_LEVELID}', '{OPTIONS}', '{COLUM001CODE}', 
                            '{MIN_VALUE}', '{COLUM002ID}', '{REMARK1}', '{AC}', '{INSPECT_AQLCODE}', '{REMARK}', '{REMARK2}', '{COLUM0A10}', '{INSPECT_PLANID}')";

                        // 执行 SQL 命令
                        Db.Ado.ExecuteCommand(sql);

                        #region 2.回写A01的编码给原始资料
                        sql = @$"UPDATE INSPECT_2D SET COLUM001CODE = '{COLUM001CODE}' WHERE INSPECT_2DID = '{INSPECT_2DID}'";
                        // 执行 SQL 命令
                        Db.Ado.ExecuteCommand(sql);

                        //Db.Ado.ExecuteCommand(@$"UPDATE INSPECT_2D SET COLUM001CODE ='{COLUM001CODE}' WHERE INSPECT_2DID = '{INSPECT_2DID}');
                        #endregion
                    }

                    #endregion

                    // 提交事务
                    Db.Ado.CommitTran();
                }
                catch (Exception)
                {
                    // 回滚事务
                    Db.Ado.RollbackTran();
                    throw;
                }
            }
            #endregion

            #region 十.将INSPECT_2D实际值传入QMS
            //1.获得INSPECT_2D实际测量的样本数量
            int actCNT = Db.Ado.GetInt(@$"SELECT COUNT(DISTINCT SAMPLEID) AS CNT FROM INSPECT_2D WHERE INSPECT_DEV2ID ='{INSPECT_DEV2ID}'");

            //2.如果 @CNT > 0 则
            if (actCNT > 0)
            {
                try
                {
                    // 开启事务
                    Db.Ado.BeginTran();

                    //2.1 删除QMS中的记录：@COLUM002ID @INSPECT_CODE
                    sql = @$" DELETE INSPECT_ZONE WHERE COLUM002ID = '{COLUM002ID}' AND INSPECTCODE = '{INSPECT_CODE}'";
                    Db.Ado.ExecuteCommand(sql);
                    //2.2 开始同步记录
                    //循环每个SAMPLEID
                    sql = @$" SELECT  SAMPLEID  FROM INSPECT_2D WHERE  INSPECT_DEV2ID='{INSPECT_DEV2ID}' GROUP BY SAMPLEID";
                    DataTable dtSAMPLE = Db.Ado.GetDataTable(sql);

                    for (int i = 0; i < dtSAMPLE.Rows.Count; i++)
                    {
                        int sampId = Convert.ToInt32(dtSAMPLE.Rows[i]["SAMPLEID"]);

                        #region 1 循环结果集
                        sql = @$"SELECT COLUM001CODE  AS 检验内容编码, MAX(VALUE)  AS 检验值
                        FROM INSPECT_2D WHERE INSPECT_DEV2ID = '{INSPECT_DEV2ID}'
                        AND SAMPLEID = {sampId}
                        GROUP BY COLUM001CODE
                        ORDER BY COLUM001CODE";
                        DataTable dtCodeValue = Db.Ado.GetDataTable(sql);

                        string sel_Col = string.Empty;
                        string sel_VALUES = string.Empty;
                        for (int j = 0; j < dtCodeValue.Rows.Count; j++)
                        {
                            sel_Col += "," + dtCodeValue.Rows[j]["检验内容编码"].ToString();
                            sel_VALUES += "," + "'" + dtCodeValue.Rows[j]["检验值"].ToString() + "'";
                        }

                        #endregion
                        #region 2.插入检验结果
                        sql = @$"INSERT INSPECT_ZONE(INSPECT_ZONECREATEUSER, INSPECT_ZONECREATEDATE, INSPECT_ZONEID, INSPECTTYPE, COLUM002ID, 
                        CUSTOM_ITEMID, LOTNO, INSPECTCODE, PCSCODE, ISAUTO{sel_Col}) 
                        VALUES(
                        '{userName}',CONVERT(varchar(20), GETDATE(), 120), '{Guid.NewGuid().ToString()}','{INSPECT_PUR}', '{COLUM002ID}',
                        '{ITEMID}','{LOTID}','{INSPECT_CODE}','{i.ToString()}','0'{sel_VALUES})";

                        Db.Ado.ExecuteCommand(sql);

                        #endregion
                    }

                    // 事务提交
                    Db.Ado.CommitTran();
                }
                catch (Exception)
                {
                    // 回滚事务
                    Db.Ado.RollbackTran();
                    throw;
                }
            }

            #endregion

            #region 十一．让QMS产生随机值
            //1.如果 @应检样本数 > @CNT 则 @产生样本数量 = @应检样本数 - @CNT
            int generateQty = 0;

            if (actCNT < inspect_Qyt)
            {
                generateQty = inspect_Qyt - actCNT;
            }
            if (generateQty > 0) //进入这个应该有个前提吧，不然前面插入的数据会清除掉  wjj
                GET_INSPECT_RANK(COLUM002ID, INSPECT_CODE, generateQty, INSPECT_PUR, userName);

            #endregion

            #region 十二．产生【CPK-扩展项目】的随机值
            //1.得到CPK - 扩展项结果集
            sql = @$"SELECT COLUM002ID FROM COLUM002 WHERE INSPECT_FLOWID = '{INSPECT_FLOWID}' and COC_ATTR ='COC_ATTR_002'";
            // 执行 SQL 命令
            DataTable dtCOLUM002ID = Db.Ado.GetDataTable(sql);

            string kz_COLUM002ID = string.Empty;

            //2.循环CPK - 扩展项结果集
            for (int i = 0; i < dtCOLUM002ID.Rows.Count; i++)
            {
                kz_COLUM002ID = dtCOLUM002ID.Rows[i]["COLUM002ID"].ToString();
                //1.获得应检样本量
                inspect_Qyt = Db.Ado.GetInt(@$"EXEC GET_INPECT_CNT  '{kz_COLUM002ID}','{lot_Qyt}'");
                //2.产生检验随机值
                //传入参数：
                //@COLUM002ID(检验项目)--CPK - 扩展项结果集.@COLUM002ID
                //@INSPECT_CODE(检验单号)(前文获取过）
                //@产生样本数--@CPK - 扩展项目应检样本数
                //@INSPECT_PUR--检验类别(前文获取过）
                //@userName
                if (inspect_Qyt == 0) //进入这个应该有个前提吧，不然前面插入的数据会清除掉  wjj
                    inspect_Qyt = 1;

                GET_INSPECT_RANK(kz_COLUM002ID, INSPECT_CODE, inspect_Qyt, INSPECT_PUR, userName);
            }
            #endregion

            #region 十三．产生CPK报告

            #region 得到区块1的 

            DataSet block1DateSet = GetCPKBlock1(COLUM002ID, INSPECT_CODE, INSPECT_PUR);

            #endregion

            #region 得到区块2的 DataSetlist

            List<DataSet> block2DateSetList = GetCPKBlock2(INSPECT_FLOWID, INSPECT_CODE, INSPECT_PUR);

            #endregion

            #endregion

            return null;
        }


        #region GET_INSPECT_RANK
        public void GET_INSPECT_RANK(string COLUM002ID, string INSPECT_CODE, int intSampleCount, string INSPECT_PUR, string userName)
        {
            try
            {
                Db.Ado.BeginTran();

                #region 0.删除QMS中的随机记录
                string sql = @$"DELETE FROM INSPECT_ZONE WHERE COLUM002ID = '{COLUM002ID}' AND INSPECTCODE = '{INSPECT_CODE}' AND ISAUTO = '1'";
                Db.Ado.ExecuteCommand(sql);
                #endregion

                #region 2.获得已存在记录数：
                int exist_Qyt = 0;
                sql = @$"SELECT COUNT(1) FROM INSPECT_ZONE WHERE INSPECTCODE = '{INSPECT_CODE}'";
                // 执行 SQL 命令
                DataTable dtINSPECT_ZONE = Db.Ado.GetDataTable(sql);
                if (dtINSPECT_ZONE.Rows.Count > 0)
                {
                    exist_Qyt = int.Parse(dtINSPECT_ZONE.Rows[0][0].ToString());
                }
                #endregion

                #region 3.获得@ITEMID，@LOTID
                //@动态表名 =“INSPECT_”+@INSPECT_PUR
                //@动态表面ID栏位 = @动态表名 +“ID” 
                //SELECT @ITEMID = ITEMID，@LOTID = LOTID FROM @动态表名 WHERE @动态表面ID栏位 = @INSPECT_CODE
                string table = string.Empty;
                string surfaceId = string.Empty;
                string itemId = string.Empty;
                string lotId = string.Empty;

                table = "INSPECT_" + INSPECT_PUR;
                surfaceId = table + "ID";

                //wjj 此处table 可能无列LOTID问题
                //sql = @$"SELECT top 1 ITEMID,LOTID FROM {table} WHERE {surfaceId}=@INSPECT_CODE";
                //// 定义参数
                //parameters = new SugarParameter[]
                //{
                //    new SugarParameter("@INSPECT_CODE", INSPECT_CODE)
                //};
                //// 执行 SQL 命令
                //dataTable = Db.Ado.GetDataTable(sql, parameters);

                //if (dataTable.Rows.Count > 0)
                //{
                //    itemId = dataTable.Rows[0]["ITEMID"].ToString();
                //    lotId = dataTable.Rows[0]["lotId"].ToString();
                //}
                #endregion

                #region 1.获得结果集A：
                sql = @$"SELECT STD_VALUE,MIN_VALUE, MAX_VALUE, ADD_VALUE,COLUM001CODE
                FROM COLUM001 WHERE COLUM002ID = '{COLUM002ID}' and Colum001CODE like'A%'";
                // 执行 SQL 命令
                DataTable dtCOLUM001 = Db.Ado.GetDataTable(sql);
                #endregion

                #region 4 循环样本：
                string sampleId = string.Empty;
                int sampleCount = 1;

                while (sampleCount <= intSampleCount)
                {
                    #region 1.循环结果集A

                    string sel_Col = string.Empty;
                    string sel_VALUES = string.Empty;

                    for (int i = 0; i < dtCOLUM001.Rows.Count; i++)
                    {
                        double std_VALUE = 0;
                        double min_VALUE = 0;
                        double max_VALUE = 0;
                        double add_VALUE = 0;
                        double lower_Value = 0; //下限值
                        double upper_Value = 0; //上限值
                        string COLUM001CODE = string.Empty;
                        double act_Value = 0; //生成随机数 实际值

                        if (dtCOLUM001.Rows[i]["STD_VALUE"] != DBNull.Value && !string.IsNullOrEmpty(dtCOLUM001.Rows[i]["STD_VALUE"].ToString()))
                        {
                            std_VALUE = Convert.ToDouble(dtCOLUM001.Rows[i]["STD_VALUE"]);
                        }
                        if (dtCOLUM001.Rows[i]["MIN_VALUE"] != DBNull.Value && !string.IsNullOrEmpty(dtCOLUM001.Rows[i]["MIN_VALUE"].ToString()))
                        {
                            min_VALUE = Convert.ToDouble(dtCOLUM001.Rows[i]["MIN_VALUE"]);
                        }
                        if (dtCOLUM001.Rows[i]["MAX_VALUE"] != DBNull.Value && !string.IsNullOrEmpty(dtCOLUM001.Rows[i]["MAX_VALUE"].ToString()))
                        {
                            max_VALUE = Convert.ToDouble(dtCOLUM001.Rows[i]["MAX_VALUE"]);
                        }
                        if (dtCOLUM001.Rows[i]["ADD_VALUE"] != DBNull.Value && !string.IsNullOrEmpty(dtCOLUM001.Rows[i]["ADD_VALUE"].ToString()))
                        {
                            add_VALUE = Convert.ToDouble(dtCOLUM001.Rows[i]["ADD_VALUE"]);
                        }

                        COLUM001CODE = dtCOLUM001.Rows[i]["COLUM001CODE"].ToString();

                        lower_Value = std_VALUE - max_VALUE + add_VALUE;
                        upper_Value = std_VALUE + min_VALUE - add_VALUE;

                        //在范围内生成随机数  
                        Random random = new Random();
                        act_Value = lower_Value + (random.NextDouble() * (upper_Value - lower_Value));

                        sel_Col += "," + COLUM001CODE;
                        sel_VALUES += "," + "'" + act_Value.ToString() + "'";
                    }

                    #endregion

                    #region 2.插入检验结果
                    //样本ID：@已存在记录数 + 循环次数
                    sampleId = exist_Qyt + sampleCount.ToString();

                    sql = @$"INSERT INSPECT_ZONE(INSPECT_ZONECREATEUSER,INSPECT_ZONECREATEDATE,INSPECT_ZONEID,INSPECTTYPE,COLUM002ID,
                        CUSTOM_ITEMID,LOTNO,INSPECTCODE,PCSCODE,ISAUTO{sel_Col}) 
                        VALUES(
                        '{userName}',CONVERT(varchar(20), GETDATE(), 120), '{Guid.NewGuid().ToString()}','{INSPECT_PUR}', '{COLUM002ID}',
                        '{itemId}','{lotId}','{INSPECT_CODE}','{sampleId}','1'{sel_VALUES})";

                    Db.Ado.ExecuteCommand(sql);

                    #endregion

                    sampleCount++;
                }
                #endregion

                Db.Ado.CommitTran();
            }
            catch (Exception)
            {
                Db.Ado.RollbackTran();
                throw;
            }
        }

        #endregion

        #region GET_INSPECT_LIST 返回 第15行的列名+32后数据

        //@COLUM002ID       --需要查询的检验项目
        //@INSPECT_CODE     --检验单号
        //@INSPECT_PUR      --检验类别
        public DataTable GET_INSPECT_LIST(string COLUM002ID, string INSPECT_CODE, string INSPECT_PUR)
        {
            DataTable dataTableR = new DataTable(); // 创建 DataTable 实例
            # region 1.获得结果集A +2.循环结果集A：

            string sql = @$"SELECT COLUM001CODE,STD_VALUE,MIN_VALUE,MAX_VALUE,REMARK1
                FROM COLUM001 WHERE COLUM002ID = '{COLUM002ID}' and Colum001CODE like'A%'";
            // 执行 SQL 命令
            var dataTable = Db.Ado.GetDataTable(sql);

            string COLUM001CODE = string.Empty;
            string sel_Col = string.Empty;
            string sel_ColB = string.Empty;

            for (int i = 0; i < dataTable.Rows.Count; i++)
            {
                COLUM001CODE = dataTable.Rows[i]["COLUM001CODE"].ToString();

                sel_Col += "," + COLUM001CODE;
                sel_ColB += "," + COLUM001CODE.Replace('A', 'B');
            }

            #endregion

            #region 3.组装SQL
            sql = @$"SELECT INSPECT_ZONECREATEUSER, INSPECT_ZONECREATEDATE, INSPECT_ZONEID, INSPECTTYPE, 
                    COLUM002ID, CUSTOM_ITEMID AS ITEMID, LOTNO, INSPECTCODE, PCSCODE,ISAUTO
                    {sel_Col} {sel_ColB}
                    FROM INSPECT_ZONE
                    WHERE COLUM002ID = '{COLUM002ID}' AND INSPECTCODE = '{INSPECT_CODE}' AND INSPECTTYPE = '{INSPECT_PUR}'
                    ORDER BY PCSCODE";
            // 执行 SQL 命令
            dataTableR = Db.Ado.GetDataTable(sql);

            #endregion

            return dataTableR; // 返回填充的数据表  
            //返回的所有列名以A开头的列数量，就是区块1的列数
            //返回的所有列名以A开头的列名，就是区块1第15行的列名
            //返回的数据就是32~63行区域的内容（行数依照查询的结果展示）
        }
        #endregion

        #region GET_STD_VALUE_LIST
        public DataTable GET_STD_VALUE_LIST(string COLUM002ID, string INSPECT_CODE, string INSPECT_PUR)
        {
            string sql = @$"SELECT COLUM001CODE,STD_VALUE,MIN_VALUE,MAX_VALUE,REMARK1
                    FROM COLUM001 WHERE COLUM002ID = '{COLUM002ID}' and Colum001CODE like'A%'";
            // 执行 SQL 命令
            DataTable originalTable = Db.Ado.GetDataTable(sql);

            if (originalTable.Rows.Count > 0)
            {
                // 创建一个新的 transposedTable 并将原始 originalTable 的行列转置到新的 transposedTable 中
                DataTable transposedTable = TransposeDataTable(originalTable);
                return transposedTable;
            }
            else
            {
                return originalTable;
            }

        }
        #endregion

        private DataSet GetCPKBlock1(string COLUM002ID, string INSPECT_CODE, string INSPECT_PUR)
        {
            // 获取两个 DataTable
            //第15行的列名+32后数据
            DataTable inspectListTable = GET_INSPECT_LIST(COLUM002ID, INSPECT_CODE, INSPECT_PUR);

            //获得标准值结果集：
            DataTable stdValueListTable = GET_STD_VALUE_LIST(COLUM002ID, INSPECT_CODE, INSPECT_PUR);

            // 创建一个新的 DataSet
            DataSet dataSet = new DataSet("CombinedDataSet");

            DataTable inspectListTable1 = inspectListTable.Copy(); // 复制 DataTabl
            DataTable stdValueListTable1 = stdValueListTable.Copy(); // 复制 DataTabl

            // 将 DataTable 添加到 DataSet
            dataSet.Tables.Add(inspectListTable1);
            dataSet.Tables.Add(stdValueListTable1);

            return dataSet;
        }

        private List<DataSet> GetCPKBlock2(string INSPECT_FLOWID, string INSPECT_CODE, string INSPECT_PUR)
        {
            // 创建一个 DataSet 列表并将生成的 DataSet 放进去
            List<DataSet> dataSetList = new List<DataSet>
            {
            };

            //得到CPK - 扩展项结果集
            string sql = @$"SELECT COLUM002ID FROM COLUM002 WHERE INSPECT_FLOWID = '{INSPECT_FLOWID}' and COC_ATTR ='COC_ATTR_002'";
            // 执行 SQL 命令
            var dataTable = Db.Ado.GetDataTable(sql);

            string COLUM002ID = string.Empty;

            //2.循环CPK - 扩展项结果集
            for (int i = 0; i < dataTable.Rows.Count; i++)
            {
                COLUM002ID = dataTable.Rows[i]["COLUM002ID"].ToString();

                DataSet block1DateSet = GetCPKBlock1(COLUM002ID, INSPECT_CODE, INSPECT_PUR);

                dataSetList.Add(block1DateSet);
            }

            return dataSetList;
        }

        private DataTable TransposeDataTable(DataTable originalTable)
        {
            DataTable transposedTable = new DataTable();

            // 添加列
            for (int i = 0; i <= originalTable.Rows.Count; i++)
            {
                transposedTable.Columns.Add(i.ToString());
            }

            // 添加行
            for (int j = 0; j < originalTable.Columns.Count; j++)
            {
                DataRow newRow = transposedTable.NewRow();
                newRow[0] = originalTable.Columns[j].ColumnName;
                for (int k = 1; k <= originalTable.Rows.Count; k++)
                {
                    newRow[k] = originalTable.Rows[k - 1][j];
                }
                transposedTable.Rows.Add(newRow);
            }

            return transposedTable;
        }
        #endregion
    }

}
