//------------------------------------------------------------------------------
// <auto-generated>
//     此代码已从模板生成手动更改此文件可能导致应用程序出现意外的行为。
//     如果重新生成代码，将覆盖对此文件的手动更改。
//     author MEIAM
// </auto-generated>
//------------------------------------------------------------------------------
using Meiam.System.Model;
using Meiam.System.Model.Dto;
using System.Collections.Generic;
using System.Threading.Tasks;
using SqlSugar;
using System.Linq;
using System;
using System.IO;
using OxyPlot.Axes;
using OxyPlot.Series;
using OxyPlot;
using OxyPlot.Core.Drawing;
using OxyPlot.Legends;

namespace Meiam.System.Interfaces
{
    public class IQCService : BaseService<INSPECT_TENSILE>, IIQCService {

        public IQCService(IUnitOfWork unitOfWork) : base(unitOfWork) {
        }

        #region CustomInterface 
        public void SaveToInspectDetail(IEnumerable<INSPECT_TENSILE_D> inspectData){
            try {
                // 开启事务
                Db.Ado.BeginTran();
                // 批量插入数据
                Db.Insertable<INSPECT_TENSILE_D>(inspectData).ExecuteCommand();

                List<INSPECT_TENSILE_D_R> listInspectDataR = new List<INSPECT_TENSILE_D_R>();
                foreach (var detail in inspectData) {
                    // 去除字符串首尾的花括号
                    string trimmedInput = detail.Y_AXIS.Trim('{', '}');
                    // 按逗号分割字符串
                    string[] numberStrings = trimmedInput.Split(',');
                    // 将分割后的字符串数组转换为双精度浮点数数组
                    decimal[] numbers = Array.ConvertAll(numberStrings, decimal.Parse);
                    decimal max = numbers.Max();
                    decimal min = numbers.Min();
                    decimal avg = numbers.Average();

                    var drItem = new INSPECT_TENSILE_D_R() {
                        INSPECT_TENSILE_D_RID = Guid.NewGuid().ToString(),
                        INSPECT_TENSILE_DID = detail.INSPECT_TENSILE_DID,
                        MaxValue = max,
                        MinValue = min,
                        AvgValue = avg
                    };
                    listInspectDataR.Add(drItem);
                }

                Db.Insertable<INSPECT_TENSILE_D_R>(listInspectDataR).ExecuteCommand();

                // 提交事务
                Db.Ado.CommitTran();
            }
            catch (Exception) {
                // 回滚事务
                Db.Ado.RollbackTran();
                throw;
            }
        }
        public byte[] GetInspectImage(List<INSPECT_TENSILE_D> listInspectData){
            byte[] result = null;

            // 创建一个 PlotModel 对象，它代表整个图表
            var plotModel = new PlotModel {
                Title = "拉力机检测图"
            };

            // 创建一个线性坐标轴作为 X 轴
            plotModel.Axes.Add(new LinearAxis {
                Position = AxisPosition.Bottom,
                Title = "变形(mm)",
                Minimum = 0,
                Maximum = 1.15
            });

            // 创建一个线性坐标轴作为 Y 轴
            plotModel.Axes.Add(new LinearAxis {
                Position = AxisPosition.Left,
                Title = "力(gt)",
                Minimum = 0,
                Maximum = 200
            });

            int i = 1;
            Random random = new Random();
            foreach (var detail in listInspectData) {
                string trimmedInput = detail.X_AXIS.Trim('{', '}');
                string[] numberStrings = trimmedInput.Split(',');
                double[] dataArraysX = Array.ConvertAll(numberStrings, double.Parse);

                trimmedInput = detail.Y_AXIS.Trim('{', '}');
                numberStrings = trimmedInput.Split(',');
                double[] dataArraysY = Array.ConvertAll(numberStrings, double.Parse);

                // 生成随机颜色
                byte r = (byte)random.Next(256);
                byte g = (byte)random.Next(256);
                byte b = (byte)random.Next(256);
                OxyColor randomColor = OxyColor.FromRgb(r, g, b);

                var lineSeries = new LineSeries {
                    Title = $"Plot{i++}",
                    MarkerType = MarkerType.Circle,
                    MarkerSize = 1,
                    MarkerStroke = randomColor,
                MarkerFill = OxyColors.White,
                Color = randomColor
                };

                for (int j = 0; j < dataArraysX.Length; j++) {
                    lineSeries.Points.Add(new DataPoint(dataArraysX[j], dataArraysY[j]));
                }

                // 将曲线添加到图表模型中
                plotModel.Series.Add(lineSeries);
            }

            // 保存图表为 PNG 图片
            var exporter = new PngExporter { Width = 800, Height = 600, Resolution = 100 };
            using (MemoryStream stream = new MemoryStream()) {
                exporter.Export(plotModel, stream);
                stream.Position = 0;
                result = stream.ToArray();
                stream.Flush();
            }
            return result;
        }

        public bool ExistScanDoc(string docType, string peopleId){
            string sql = @"SELECT COUNT(*) FROM SCANDOC WHERE DOCTYPE=@DOCTYPE AND PEOPLEID=@PEOPLEID";

            // 定义参数
            var parameters = new SugarParameter[]
            {
                new SugarParameter("@DOCTYPE", docType),
                new SugarParameter("@PEOPLEID", peopleId)
            };

            // 执行 SQL 命令
            int count = Db.Ado.GetInt(sql, parameters);
            return count > 0;
        }

        public void SaveToScanDoc(string docType, byte[] fileContents, string scandocName, string peopleId) {
            FileInfo file = new FileInfo(scandocName);
            if (!file.Directory.Exists) {
                file.Directory.Create();
            }
            File.WriteAllBytes(scandocName, fileContents);

            string sql = @"
            INSERT INTO SCANDOC (TENID, SCANDOCID, SCANDOCCODE, SCANDOCNAME, DOCTYPE, PEOPLEID, createdate, SCANDOC_user)
            VALUES ('001', @SCANDOCID, @SCANDOCID, @SCANDOCNAME, @DOCTYPE, @PEOPLEID, CONVERT(VARCHAR(20), GETDATE(), 120), @PEOPLEID)";

            // 定义参数
            var parameters = new SugarParameter[]
            {
                new SugarParameter("@SCANDOCID", Guid.NewGuid().ToString()),
                new SugarParameter("@SCANDOCNAME", scandocName),
                new SugarParameter("@DOCTYPE", docType),
                new SugarParameter("@PEOPLEID", peopleId)
            };

            // 执行 SQL 命令
            Db.Ado.ExecuteCommand(sql, parameters);
        }
        #endregion

        #region
        public byte[] GetCPKfile(string iNSPECT_DEV2ID,string userName) {
            
            string INSPECT_CODE;//检验单号
            string INSPECT_PUR; //检验来源

            # region 获得检验单号和检验来源
            string sql = @"SELECT Top 1 ISNULL(INSPECT_DEV2.INSPECT_CODE,'') AS INSPECT_CODE,ISNULL(INSPECT_DEV2.INSPECT_PUR,'') As INSPECT_PUR    
                        FROM INSPECT_DEV2 
                        LEFT JOIN INSPECT_FLOW ON INSPECT_FLOW.INSPECT_FLOWID=INSPECT_DEV2.INSPECT_FLOWID
                        LEFT JOIN COLUM002 ON COLUM002.COLUM002ID=INSPECT_DEV2.COLUM002ID
                        WHERE INSPECT_DEV2ID=@INSPECT_DEV2ID";
            // 定义参数
            var parameters = new SugarParameter[]
            {
                new SugarParameter("@INSPECT_DEV2ID", iNSPECT_DEV2ID)
            };

            // 执行 SQL 命令
            var dataTable = Db.Ado.GetDataTable(sql, parameters);

            if (dataTable.Rows.Count > 0)
            {
                INSPECT_CODE = dataTable.Rows[0][0].ToString();
                INSPECT_PUR = dataTable.Rows[0][1].ToString();
            }
            else
            {
                throw new Exception("未获取到检验单号和检验来源");
            }
            #endregion

            #region 判断检验单是否已经完成
            //如果 检验单号 不为空 并且 检验来源 不为空 @动态表名 =“INSPECT_”+@INSPECT_PUR
            //@动态表面ID栏位 = @动态表名 +“ID”
            //    SELECT STATE FROM @动态表名 WHERE @动态表面ID栏位 = @INSPECT_CODE
            //    如果 STATE =“已完成”
            //    返回错误：”检验单已完成，无法再次产生检验报告” 提出API
            if (!string.IsNullOrEmpty(INSPECT_CODE) && !string.IsNullOrEmpty(INSPECT_PUR))
            {
                string table= "INSPECT_"+ INSPECT_PUR;
                string surfaceId = table + "ID";
                string state = "";

                sql = @"SELECT STATE FROM @table WHERE @surfaceId=@INSPECT_CODE";
                // 定义参数
                parameters = new SugarParameter[]
                {
                    new SugarParameter("@table", table),
                    new SugarParameter("@surfaceId", surfaceId),
                    new SugarParameter("@INSPECT_CODE", INSPECT_CODE)
                };
                // 执行 SQL 命令
                dataTable = Db.Ado.GetDataTable(sql, parameters);

                if (dataTable.Rows.Count > 0)
                {
                    state = dataTable.Rows[0][0].ToString();
                }
                else
                {
                    throw new Exception("未获取到检验单状态");
                }

                if (state == "已完成")
                {
                    throw new Exception("检验单已完成，无法再次产生检验报告");
                }
            }
            else
            {
                throw new Exception("检验单号或检验来源为空");
            }
            #endregion

            return null;
        }

        #endregion

    }
}
