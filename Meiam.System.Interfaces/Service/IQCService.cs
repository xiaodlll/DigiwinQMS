//------------------------------------------------------------------------------
// <auto-generated>
//     此代码已从模板生成手动更改此文件可能导致应用程序出现意外的行为。
//     如果重新生成代码，将覆盖对此文件的手动更改。
//     author MEIAM
// </auto-generated>
//------------------------------------------------------------------------------
using Aspose.Pdf;
using Aspose.Pdf.Text;
using Meiam.System.Common;
using Meiam.System.Interfaces.Extensions;
using Meiam.System.Model;
using Meiam.System.Model.Dto;
using Microsoft.AspNetCore.Components.Forms;
using NPOI.SS.UserModel;
using NPOI.XSSF.UserModel;
using OxyPlot;
using OxyPlot.Axes;
using OxyPlot.Core.Drawing;
using OxyPlot.Legends;
using OxyPlot.Series;
using SqlSugar;
using System;
using System.Collections.Generic;
using System.Data;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using HorizontalAlignment = NPOI.SS.UserModel.HorizontalAlignment;
using VerticalAlignment = NPOI.SS.UserModel.VerticalAlignment;


namespace Meiam.System.Interfaces {
    public class IQCService : BaseService<INSPECT_TENSILE>, IIQCService {

        public IQCService(IUnitOfWork unitOfWork) : base(unitOfWork) {
        }
        #region xujie
        public void INSPECT_VIEW_RANK(string ID)
        {

            string state = "";
            string _ITEMID = "";
            string sql0 = @$"SELECT PSTATE FROM INSPECT_VIEW WHERE INSPECT_VIEWID=@ID";
            string CustomID = AppSettings.Configuration["AppSettings:CustomID"];
            // 定义参数
            var parameters0 = new SugarParameter[] { new SugarParameter("@ID", ID) }; //检验单号
            // 执行 SQL 命令
            var dataTable0 = Db.Ado.GetDataTable(sql0, parameters0);

            if (dataTable0.Rows.Count > 0)
            {
                state = dataTable0.Rows[0]["PSTATE"].ToString();
                _ITEMID = dataTable0.Rows[0]["ITEMID"].ToString();
                if (state == "PSTATE_003")
                    throw new Exception("检验单已完成，无法产生报告！");
            }
            else
            {
                throw new Exception("未获取到检验单状态");
            }

            //1.处理拉力机（DEV1）
            #region //1.1 DEV1主动关联检验单
            GET_DEV1_UNION(_ITEMID);
            #endregion
            #region //1.2 检验单产生DEV1，并GetInspectReport

            string sql = @"
            SELECT  INSPECT_PROGRESSID,PSTATE,INSPECT_PROGRESSNAME,INSPECT_SPEC,INSPECT_VIEW.ITEMID ITEMID,INSPECT_VIEWID FROM INSPECT_PROGRESS
            LEFT JOIN INSPECT_VIEW ON INSPECT_VIEW.INSPECT_VIEWID=INSPECT_PROGRESS.DOC_CODE
            WHERE ISNULL(INSPECT_PROGRESS.INSPECT_DEV1ID,'')=''  AND DOC_CODE=@ID AND INSPECT_PROGRESS.INSPECT_DEV='INSPECT_DEV_002'        --拉力机
            ";
            // 定义参数
            var parameters = new SugarParameter[] { new SugarParameter("@ID", ID) }; //检验单号
                                                                                     //执行SQL命令
            var dataTable = Db.Ado.GetDataTable(sql, parameters);

            if (dataTable != null)
            {
                if (dataTable.Rows.Count > 0)
                {
                    for (int i = 0; i < dataTable.Rows.Count; i++)
                    {
                        string INSPECT_PROGRESSID = dataTable.Rows[i]["INSPECT_PROGRESSID"].ToString();
                        string INSPECT_PROGRESSNAME = dataTable.Rows[i]["INSPECT_PROGRESSNAME"].ToString();
                        string INSPECT_SPEC = dataTable.Rows[i]["INSPECT_SPEC"].ToString();
                        string ITEMID = dataTable.Rows[i]["ITEMID"].ToString();
                        string INSPECT_VIEWID = dataTable.Rows[i]["INSPECT_VIEWID"].ToString();
                        string PSTATE = dataTable.Rows[i]["PSTATE"].ToString();
                        if (PSTATE != "PSTATE_003")
                        {
                            if (IsNotNULL(INSPECT_SPEC))
                            {
                                string newid = Guid.NewGuid().ToString();
                                Db.Ado.ExecuteCommand(@"        UPDATE INSPECT_PROGRESS SET INSPECT_DEV1ID='" + newid + @"' WHERE INSPECT_PROGRESSID='" + INSPECT_PROGRESSID + @"'  ;

                                                                INSERT INSPECT_DEV1(INSPECT_CODE,TENID,INSPECT_DEV1ID,INSPECT_DATE,DEVID
                                                                ,TESTTYPE
                                                                --,PEOPLE02,APPEOPLE02
                                                                ,SAMPLE_CNT,BATCHID,ITEMID,ITEMNAME,LOTID
                                                                ,DOC_CODE,INSPECT_CODE	--来源单号  --来源单号
                                                                ,INSPECT_SPEC
                                                                ,INSPECT_DEV
                                                                ,INSPECTTYPE1
                                                                ,ISBUILD
                                                                )
                                                                SELECT '" + INSPECT_VIEWID + @"',A.TENID,'" + newid + @"',A.INSPECT_DATE,'检验单触发'
                                                                ,''  --不赋材料OR成品，用于避免反向匹配
                                                                --,A.PEOPLE01,A.APPPEOPLE01
                                                                ,INSPECT_PROGRESS.INSPECT_CNT,'',A.ITEMID,A.ITEMNAME,A.LOTNO
                                                                ,A.INSPECT_VIEWID,A.INSPECT_VIEWID
                                                                ,INSPECT_PROGRESS.INSPECT_SPEC
                                                                ,'INSPECT_DEV_002'
                                                                ,INSPECT_PROGRESS.INSPECT_PROGRESSNAME
                                                                ,'1'
                                                                FROM INSPECT_PROGRESS
                                                                LEFT JOIN INSPECT_VIEW A ON A.INSPECT_VIEWID=INSPECT_PROGRESS.DOC_CODE 
                                                                WHERE  INSPECT_PROGRESSID='" + INSPECT_PROGRESSID + @"' 
                                                        ");

                                GetInspectReport(new InspectInputDto() { INSPECT_DEV1ID = newid, UserName = "system" });
                            }
                            else
                            {
                                //Db.Ado.ExecuteCommand(@"    UPDATE INSPECT_PROGRESS SET ISREPORT='未设置规格' WHERE INSPECT_PROGRESSID='" + INSPECT_PROGRESSID + @"'")  ;                         
                                throw new Exception("<" + INSPECT_PROGRESSNAME + ">:未设置规格");
                            }

                        }

                    }
                }
            }

            #endregion

            //2.处理FTIR
            if(CustomID=="JT")
                 ReplaceFTIRPdf(new FTIRInputDto() { INSPECTCODE = ID, INSPECTTYPE = "", UserName = "system" });
            else if (CustomID == "MS") //小电流 淼昇
                ReplaceFTIRPdf_MS(new FTIRInputDto() { INSPECTCODE = ID, INSPECTTYPE = "", UserName = "system" });

            if (CustomID == "JT")
                //3.处理ROSH
                ReplaceRosh(new FTIRInputDto() { INSPECTCODE = ID, INSPECTTYPE = "", UserName = "system" });
            else if (CustomID == "MS") //小电流 淼昇
                ReplaceRosh_MS(new FTIRInputDto() { INSPECTCODE = ID, INSPECTTYPE = "", UserName = "system" });
            //5.处理硅元素
            if (CustomID == "MS") //小电流 淼昇
                ReplaceSI_MS(new FTIRInputDto() { INSPECTCODE = ID, INSPECTTYPE = "", UserName = "system" });


            #region//4.处理二次元(图纸项目)
            string sql2 = @"
            SELECT  INSPECT_PROGRESSID,INSPECT_VIEW.PSTATE,INSPECT_VIEW.ITEMID,ISREPORT,INSPECT_DEV2ID FROM INSPECT_PROGRESS
            LEFT JOIN INSPECT_VIEW ON INSPECT_VIEW.INSPECT_VIEWID=INSPECT_PROGRESS.DOC_CODE
            WHERE  DOC_CODE=@ID AND INSPECT_PROGRESS.COC_ATTR='COC_ATTR_003' AND INSPECT_PROGRESS.INSPECT_DEV='INSPECT_DEV_001'        --
            ";
            // 定义参数
            var parameters2 = new SugarParameter[] { new SugarParameter("@ID", ID) }; //检验单号
            // 执行 SQL 命令
            var dataTable2 = Db.Ado.GetDataTable(sql2, parameters2);
            if (dataTable2 != null)
            {
                if (dataTable2.Rows.Count > 0)
                {
                    for (int i = 0; i < dataTable2.Rows.Count; i++)
                    {
                        string INSPECT_PROGRESSID = dataTable2.Rows[i]["INSPECT_PROGRESSID"].ToString();
                        string INSPECT_DEV2ID = dataTable2.Rows[i]["INSPECT_DEV2ID"].ToString();
                        string ISREPORT = dataTable2.Rows[i]["ISREPORT"].ToString();
                        //string ISBUILD = dataTable2.Rows[i]["ISBUILD"].ToString();
                        string ITEMID = dataTable2.Rows[i]["ITEMID"].ToString();
                        string guid2 = Guid.NewGuid().ToString();
                        if (!IsNotNULL(INSPECT_DEV2ID)) //没有关联就产生DEV2
                        {
                            INSPECT_DEV2ID = guid2;
                            Db.Ado.ExecuteCommand(@" 
                            DECLARE @_INSPECT_DEV2ID NVARCHAR(50)

                            SELECT TOP 1 @_INSPECT_DEV2ID=INSPECT_DEV2ID FROM INSPECT_DEV2  WHERE ITEMID='" + ITEMID + @"' AND ISBUILD!='1' 
							ORDER BY INSPECT_DATE,INSPECT_DEV2ID DESC
                            IF(ISNULL(@_INSPECT_DEV2ID,'')!='')
                            BEGIN
                                --自动找关联
                                UPDATE INSPECT_PROGRESS SET INSPECT_DEV2ID=@_INSPECT_DEV2ID WHERE INSPECT_PROGRESSID='" + INSPECT_PROGRESSID + @"'  --真
                                UPDATE INSPECT_DEV2 SET ISBUILD='1' WHERE INSPECT_DEV2ID=@_INSPECT_DEV2ID
                            END
                            ELSE
                            BEGIN
                                --产生INSPECT_DEV2
                                INSERT INSPECT_DEV2(TENID, INSPECT_DEV2ID, INSPECT_DATE, DEVID,PEOPLE02, APPEOPLE02, SAMPLE_CNT, BATCHID, ITEMID, ITEMNAME, LOTID
                                , INSPECT_CODE
                                --,INSPECT_SPEC
                                , INSPECT_DEV
                                , ISBUILD
                                )
                                SELECT A.TENID,'" + guid2 + @"',A.INSPECT_DATE,'检验单触发',A.PEOPLEID,A.APPPEOPLEID,'','',A.ITEMID,A.ITEMNAME,A.LOTNO
                                ,'" + ID + @"'
                                --,INSPECT_PROGRESS.INSPECT_SPEC
                                ,'INSPECT_DEV_001'
                                ,'1'
                                FROM INSPECT_VIEW A
                                LEFT JOIN INSPECT_PROGRESS ON A.INSPECT_VIEWID = INSPECT_PROGRESS.DOC_CODE
                                WHERE A.INSPECT_VIEWID = '" + ID + @"' AND  INSPECT_PROGRESSID = '" + INSPECT_PROGRESSID + @"'
                                --关联INSPECT_PROGRESS
                                UPDATE INSPECT_PROGRESS SET INSPECT_DEV2ID = '" + guid2 + @"' WHERE INSPECT_PROGRESSID = '" + INSPECT_PROGRESSID + @"'
                                
                            END                         
                            ");


                        }
                        if (ISREPORT != "1")
                        {
                            GetCPKfile(INSPECT_DEV2ID, "system");

                        }

                    }
                }
            }
            #endregion

            #region
            //5.处理其他常规建议项目
            string sql3 = @"
            SELECT  INSPECT_PROGRESSID,INSPECT_VIEW.PSTATE,INSPECT_VIEW.ITEMID,ISREPORT,INSPECT_DEV2ID,INSPECT_CNT FROM INSPECT_PROGRESS
            LEFT JOIN INSPECT_VIEW ON INSPECT_VIEW.INSPECT_VIEWID=INSPECT_PROGRESS.DOC_CODE
            WHERE  DOC_CODE=@ID AND ISNULL(INSPECT_PROGRESS.COC_ATTR,'')='' AND ISNULL(INSPECT_PROGRESS.INSPECT_DEV,'')=''  AND COUNTTYPE='COUNTTYPE_002'      --
            ";
            // 定义参数
            var parameters3 = new SugarParameter[] { new SugarParameter("@ID", ID) }; //检验单号
            // 执行 SQL 命令
            var dataTable3 = Db.Ado.GetDataTable(sql3, parameters3);
            if (dataTable3 != null)
            {
                if (dataTable3.Rows.Count > 0)
                {
                    for (int k = 0; k < dataTable3.Rows.Count; k++)
                    {
                        string _INSPECT_PROGRESSID = dataTable3.Rows[k]["INSPECT_PROGRESSID"].ToString();
                        string _INSPECT_CNT = dataTable3.Rows[k]["INSPECT_CNT"].ToString();

                        Db.Ado.ExecuteCommand(@$"EXEC [GET_INSPECT_RANK] '{_INSPECT_PROGRESSID}', '{_INSPECT_CNT}'"); //产生随机值

                    }
                }
            }
            #endregion

        }

        public static bool IsNotNULL(string A)
        {
            if (string.IsNullOrEmpty(A))
                return false;
            if (A == "")
                return false;
            if (A == "null")
                return false;
            if (A == null)
                return false;
            if (A == "undefined")
                return false;
            return true;
        }


        public void GET_DEV1_UNION(string _ITEMID)
        {
           
            Db.Ado.ExecuteCommand(@"
            --UPDATE INSPECT_DEV1 SET ISBUILD='未指定材料或成品'
            --WHERE ISNULL(REPLACE(REPLACE(LTRIM(RTRIM(INSPECT_DEV1.TESTTYPE)),CHAR(13), ''),CHAR(10), ''),'') NOT IN('材料','成品')

UPDATE INSPECT_DEV1 SET ISBUILD='未指定品名'
WHERE ISNULL(REPLACE(REPLACE(LTRIM(RTRIM(INSPECT_DEV1.TESTTYPE)),CHAR(13), ''),CHAR(10), ''),'')  IN('材料','成品')
AND ISNULL(ITEMNAME,'')=''  AND ISNULL(ISBUILD,'')!='1'

UPDATE INSPECT_DEV1 SET ISBUILD='未匹配到内部编码'  FROM INSPECT_DEV1
LEFT JOIN ITEM ON INSPECT_DEV1.ITEMNAME=ITEM.ITEMNAME 
WHERE REPLACE(REPLACE(LTRIM(RTRIM(INSPECT_DEV1.TESTTYPE)),CHAR(13), ''),CHAR(10), '') ='材料'
AND  ISNULL(ITEM.ITEMID,'')=''  AND ISNULL(ISBUILD,'')!='1'

UPDATE INSPECT_DEV1 SET ISBUILD='未匹配到内部编码'  FROM INSPECT_DEV1
LEFT JOIN ITEM ON INSPECT_DEV1.ITEMNAME=ITEM.ITEMID  --成品是内部编码 
WHERE REPLACE(REPLACE(LTRIM(RTRIM(INSPECT_DEV1.TESTTYPE)),CHAR(13), ''),CHAR(10), '') ='成品'
AND  ISNULL(ITEM.ITEMID,'')=''  AND ISNULL(ISBUILD,'')!='1'   

--赋品号
--久泰品名栏位上写的是材料品名
UPDATE INSPECT_DEV1 SET INSPECT_DEV1.ITEMID=ITEM.ITEMID  FROM INSPECT_DEV1
LEFT JOIN ITEM ON INSPECT_DEV1.ITEMNAME=ITEM.ITEMNAME  --材料是品名 
WHERE REPLACE(REPLACE(LTRIM(RTRIM(INSPECT_DEV1.TESTTYPE)),CHAR(13), ''),CHAR(10), '') ='材料'
AND  ISNULL(ITEM.ITEMID,'')!=''  AND ISNULL(ISBUILD,'')!='1'   
--久泰品名栏位上写的是成品编码
UPDATE INSPECT_DEV1 SET INSPECT_DEV1.ITEMID=ITEM.ITEMID  FROM INSPECT_DEV1
LEFT JOIN ITEM ON INSPECT_DEV1.ITEMNAME=ITEM.ITEMID  --成品是内部编码 
WHERE REPLACE(REPLACE(LTRIM(RTRIM(INSPECT_DEV1.TESTTYPE)),CHAR(13), ''),CHAR(10), '') ='成品'
AND  ISNULL(ITEM.ITEMID,'')!=''  AND ISNULL(ISBUILD,'')!='1'   
--更新规格
UPDATE INSPECT_DEV1 SET INSPECT_DEV1.INSPECT_SPEC=INSPECT_PROGRESS.INSPECT_SPEC  FROM INSPECT_DEV1
LEFT JOIN INSPECT_PROGRESS ON INSPECT_PROGRESS.DOC_CODE=INSPECT_DEV1.INSPECT_CODE AND INSPECT_PROGRESS.INSPECT_PROGRESSNAME=INSPECT_DEV1.INSPECTTYPE1
WHERE  INSPECT_PROGRESS.INSPECT_DEV='INSPECT_DEV_002'  AND  ISNULL(INSPECT_DEV1.INSPECTTYPE1,'')!=''  AND  INSPECT_DEV1.ISREPORT!='1'

");
            string sql = "";
            if (_ITEMID != "")
                sql = @"
SELECT  
INSPECT_DEV1ID
,ITEMID
,ITEMNAME
,TESTTYPE       --分类
,INSPECTTYPE1   --检验单检验名称
,ISNULL(INSPECT_SPEC,'') INSPECT_SPEC
,ISBUILD
,ISREPORT
,INSPECT_DATE
FROM INSPECT_DEV1
WHERE 
--REPLACE(REPLACE(LTRIM(RTRIM(INSPECT_DEV1.TESTTYPE)),CHAR(13), ''),CHAR(10), '') in('材料','成品') AND
ISNULL(INSPECT_DEV1.ITEMID,'')!=''  
AND (ISNULL(ISBUILD,'')!='1' OR ISNULL(ISREPORT,'')!='1')
AND INSPECT_DEV=@INSPECT_DEV
AND ITEMID='" + _ITEMID + @"'
ORDER BY INSPECT_DATE
";
            else
                sql = @"
SELECT  
INSPECT_DEV1ID
,ITEMID
,ITEMNAME
,TESTTYPE       --分类
,INSPECTTYPE1   --检验单检验名称
,ISNULL(INSPECT_SPEC,'') INSPECT_SPEC
,ISBUILD
,ISREPORT
,INSPECT_DATE
FROM INSPECT_DEV1
WHERE 
--REPLACE(REPLACE(LTRIM(RTRIM(INSPECT_DEV1.TESTTYPE)),CHAR(13), ''),CHAR(10), '') in('材料','成品') AND
ISNULL(INSPECT_DEV1.ITEMID,'')!=''  
AND (ISNULL(ISBUILD,'')!='1' OR ISNULL(ISREPORT,'')!='1')
AND INSPECT_DEV=@INSPECT_DEV
ORDER BY INSPECT_DATE
";
            // 定义参数
            var parameters = new SugarParameter[]
            {
                new SugarParameter("@INSPECT_DEV", "INSPECT_DEV_002")  //拉力机
            };
            // 执行 SQL 命令
            var dataTable = Db.Ado.GetDataTable(sql, parameters);
            if (dataTable.Rows.Count > 0)
            {
                #region//关联规格         
                for (int i = 0; i < dataTable.Rows.Count; i++)
                {
                    string PUR = dataTable.Rows[i]["TESTTYPE"].ToString();
                    string ITEMID = dataTable.Rows[i]["ITEMID"].ToString();                     //拉力机系统中填写的物料名称关联到的物料编码
                    string INSPECT_DEV1ID = dataTable.Rows[i]["INSPECT_DEV1ID"].ToString();
                    string INSPECT_PROGRESSNAME = dataTable.Rows[i]["INSPECTTYPE1"].ToString(); //拉力机系统中填写的检验项目名称
                    string APPLY_DATE = dataTable.Rows[i]["INSPECT_DATE"].ToString();           //拉力机实际检验日期
                    string TABLENAME = "";
                    string INSPECT_SPEC = dataTable.Rows[i]["INSPECT_SPEC"].ToString(); ;

                    if (string.IsNullOrEmpty(INSPECT_PROGRESSNAME))  //检验单检验内容为空，代表是材料
                    {

                        if (!IsNotNULL(INSPECT_SPEC))
                            Db.Ado.ExecuteCommand(@"   
                                    DECLARE @DOC_CODE NVARCHAR(50)
                                    DECLARE @INSPECT_SPEC NVARCHAR(50)

                                    SELECT TOP 1 @INSPECT_SPEC=INSPECT_PROGRESS.INSPECT_SPEC                        
                                    FROM INSPECT_VIEW
                                    LEFT JOIN INSPECT_PROGRESS ON INSPECT_VIEW.INSPECT_VIEWID=INSPECT_PROGRESS.DOC_CODE
                                    WHERE  ISNULL(INSPECT_VIEW.ITEMID,'')='" + ITEMID + @"'  --物料编码相同
                                    --AND ISNULL([PSTATE],'')!='PSTATE_003'                  
                                    AND INSPECT_DEV='INSPECT_DEV_002'                        --拉力机
                                    AND INSPECT_PROGRESS.INSPECT_SPEC!=''                    --没有规格
                                    --AND CONVERT(VARCHAR(10),DATEADD(d,-1,CAST(APPLY_DATE AS DATETIME)),120) <= CONVERT(VARCHAR(10),CAST('" + APPLY_DATE + @"' AS DATETIME),120) 
                                    --GROUP BY INSPECT_VIEWID,INSPECT_PROGRESSID,INSPECT_PROGRESS.INSPECT_SPEC
                                    --HAVING COUNT(INSPECT_PROGRESSID)=1
                                    if(ISNULL(@INSPECT_SPEC,'')='')
                                        UPDATE INSPECT_DEV1 SET ISBUILD='未设定规格' WHERE INSPECT_DEV1ID='" + INSPECT_DEV1ID + @"'
                                    ELSE
                                        UPDATE INSPECT_DEV1 SET INSPECT_SPEC=@INSPECT_SPEC WHERE INSPECT_DEV1ID='" + INSPECT_DEV1ID + @"'
                            ");
                    }
                    else
                    {
                        if (!IsNotNULL(INSPECT_SPEC))
                        {
                            Db.Ado.ExecuteCommand(@"   
                                DECLARE @DOC_CODE NVARCHAR(50)
                                DECLARE @INSPECT_SPEC NVARCHAR(50)

                                SELECT TOP 1 @INSPECT_SPEC=INSPECT_PROGRESS.INSPECT_SPEC                           
                                FROM INSPECT_VIEW
                                LEFT JOIN INSPECT_PROGRESS ON INSPECT_VIEW.INSPECT_VIEWID=INSPECT_PROGRESS.DOC_CODE
                                WHERE  ISNULL(INSPECT_VIEW.ITEMID,'')='" + ITEMID + @"'  --物料编码相同
                                --AND [PSTATE] in ('PSTATE_001','PSTATE_002')   
                                AND INSPECT_DEV='INSPECT_DEV_002'  --拉力机
                                AND INSPECT_PROGRESS.INSPECT_SPEC!='' 
                                --AND CONVERT(VARCHAR(10),DATEADD(d,-1,CAST(APPLY_DATE AS DATETIME)),120) <= CONVERT(VARCHAR(10),CAST('" + APPLY_DATE + @"' AS DATETIME),120) 
                                AND INSPECT_PROGRESSNAME='" + INSPECT_PROGRESSNAME + @"'  --检验项目相同
                                --GROUP BY INSPECT_VIEWID,INSPECT_PROGRESSID,INSPECT_PROGRESS.INSPECT_SPEC
                               
                                if(ISNULL(@INSPECT_SPEC,'')='')
                                    UPDATE INSPECT_DEV1 SET INSPECT_SPEC='未设定规格' WHERE INSPECT_DEV1ID='" + INSPECT_DEV1ID + @"'
                                ELSE
                                    UPDATE INSPECT_DEV1 SET INSPECT_SPEC=@INSPECT_SPEC WHERE INSPECT_DEV1ID='" + INSPECT_DEV1ID + @"'
                                
                            ");
                        }
                    }
                }
                #endregion
                //关联后拉力机
                for (int i = 0; i < dataTable.Rows.Count; i++)
                {
                    string PUR = dataTable.Rows[i]["TESTTYPE"].ToString();
                    string ITEMID = dataTable.Rows[i]["ITEMID"].ToString();
                    string INSPECT_DEV1ID = dataTable.Rows[i]["INSPECT_DEV1ID"].ToString();
                    string INSPECT_PROGRESSNAME = dataTable.Rows[i]["INSPECTTYPE1"].ToString();
                    string ISBUILD = dataTable.Rows[i]["ISBUILD"].ToString();
                    string ISREPORT = dataTable.Rows[i]["ISREPORT"].ToString();
                    string APPLY_DATE = dataTable.Rows[i]["INSPECT_DATE"].ToString();

                    string TABLENAME = "";

                    //if (PUR == "材料")
                    //    TABLENAME = "INSPECT_IQC";
                    //else if (PUR == "成品")
                    //    TABLENAME = "INSPECT_OQC";
                    if (ISBUILD != "1")
                    {
                        if (!IsNotNULL(INSPECT_PROGRESSNAME)) //检验单检验内容为空，去检验单找单个的
                        {
                            Db.Ado.ExecuteCommand(@"   
                                DECLARE @DOC_CODE           NVARCHAR(50)
                                DECLARE @INSPECT_PROGRESSID NVARCHAR(50)
                                DECLARE @INSPECT_SPEC       NVARCHAR(50)
                                --久泰：拉力机数据无检验项目时，去找只有一笔拉力机检验项目的检验单
                                SELECT TOP 1 @DOC_CODE=INSPECT_VIEWID ,@INSPECT_PROGRESSID=INSPECT_PROGRESSID                        
                                FROM INSPECT_VIEW
                                LEFT JOIN INSPECT_PROGRESS ON INSPECT_VIEW.INSPECT_VIEWID=INSPECT_PROGRESS.DOC_CODE
                                WHERE 
								ISNULL(INSPECT_VIEW.ITEMID,'')='" + ITEMID + @"' 
                                --AND [PSTATE]!='PSTATE_003'  --待检验，检验中 
                                AND INSPECT_DEV='INSPECT_DEV_002'  --拉力机
                                AND ISNULL(INSPECT_PROGRESS.INSPECT_DEV1ID,'')=''  --未匹配拉力机数据
                                GROUP BY INSPECT_VIEWID,INSPECT_VIEW.APPLY_DATE,INSPECT_PROGRESSID
                                HAVING COUNT(INSPECT_PROGRESSID)=1  --只有一笔拉力机检验项目的检验单
								ORDER BY INSPECT_VIEW.APPLY_DATE DESC

                                
                                IF(ISNULL(@DOC_CODE,'')='') 
                                    --久泰：如没找到检验单号，提示错误
                                    UPDATE INSPECT_DEV1 SET ISBUILD='没有匹配到检验单' WHERE INSPECT_DEV1ID='" + INSPECT_DEV1ID + @"'  
                                ELSE
                                BEGIN
                                    --久泰：如找到检验单号,更新检验单的INSPECT_PROGRESS.INSPECT_DEV1ID
                                    UPDATE INSPECT_DEV1 SET ISBUILD='1',INSPECT_CODE=@DOC_CODE,INSPECT_PROGRESSID=@INSPECT_PROGRESSID  WHERE INSPECT_DEV1ID='" + INSPECT_DEV1ID + @"';

                                    UPDATE INSPECT_PROGRESS SET  INSPECT_PROGRESS.INSPECT_DEV1ID='" + INSPECT_DEV1ID + @"'
                                    FROM INSPECT_PROGRESS
                                    WHERE  INSPECT_PROGRESSID IN(SELECT 
                                    INSPECT_PROGRESSID                   
                                    FROM INSPECT_VIEW
                                    LEFT JOIN INSPECT_PROGRESS ON INSPECT_VIEW.INSPECT_VIEWID=INSPECT_PROGRESS.DOC_CODE
                                    WHERE  
                                    ISNULL(INSPECT_VIEW.ITEMID,'')='" + ITEMID + @"' 
                                    --AND [PSTATE]!='PSTATE_003'   --待检验，检验中 
                                    AND INSPECT_DEV='INSPECT_DEV_002'  --拉力机 
                                    AND ISNULL(INSPECT_PROGRESS.INSPECT_DEV1ID,'')='' --未匹配
                                    AND INSPECT_VIEW.INSPECT_VIEWID=@DOC_CODE    --过滤检验单号
                                    GROUP BY INSPECT_VIEWID,INSPECT_PROGRESSID
                                    HAVING COUNT(INSPECT_PROGRESSID)=1)

                                END
                                ");
                        }
                        else
                        {
                            Db.Ado.ExecuteCommand(@"   
                                DECLARE @DOC_CODE NVARCHAR(50)
 DECLARE @INSPECT_PROGRESSID NVARCHAR(50)
                                SELECT TOP 1 @DOC_CODE=INSPECT_VIEWID       ,@INSPECT_PROGRESSID=INSPECT_PROGRESSID                     
                                FROM INSPECT_VIEW
                                LEFT JOIN INSPECT_PROGRESS ON INSPECT_VIEW.INSPECT_VIEWID=INSPECT_PROGRESS.DOC_CODE
                                WHERE  ISNULL(INSPECT_VIEW.ITEMID,'')='" + ITEMID + @"'
                                --AND [PSTATE]!='PSTATE_003'  --待检验，检验中 
                                AND INSPECT_DEV='INSPECT_DEV_002'            --拉力机
                                AND ISNULL(INSPECT_PROGRESS.INSPECT_DEV1ID,'')='' --未匹配
                                AND INSPECT_PROGRESSNAME='" + INSPECT_PROGRESSNAME + @"'  --相同检验项目
                                ORDER BY INSPECT_VIEW.APPLY_DATE DESC


                                IF(ISNULL(@DOC_CODE,'')='')
                                    UPDATE INSPECT_DEV1 SET ISBUILD='没有匹配到检验单' WHERE INSPECT_DEV1ID='" + INSPECT_DEV1ID + @"'
                                ELSE
                                BEGIN
                                    UPDATE INSPECT_DEV1 SET ISBUILD='1',INSPECT_CODE=@DOC_CODE,INSPECT_PROGRESSID=@INSPECT_PROGRESSID WHERE INSPECT_DEV1ID='" + INSPECT_DEV1ID + @"';

                                    UPDATE INSPECT_PROGRESS SET  INSPECT_PROGRESS.INSPECT_DEV1ID='" + INSPECT_DEV1ID + @"'
                                    FROM INSPECT_PROGRESS
                                    WHERE  INSPECT_PROGRESSID IN(SELECT 
                                    INSPECT_PROGRESSID                         
                                    FROM INSPECT_VIEW
                                    LEFT JOIN INSPECT_PROGRESS ON INSPECT_VIEW.INSPECT_VIEWID=INSPECT_PROGRESS.DOC_CODE
                                    WHERE  
                                    ISNULL(INSPECT_VIEW.ITEMID,'')='" + ITEMID + @"'
                                    --AND [PSTATE]!='PSTATE_003'   --待检验，检验中 
                                    AND INSPECT_DEV='INSPECT_DEV_002'  --拉力机
                                    AND INSPECT_PROGRESSNAME='" + INSPECT_PROGRESSNAME + @"' --相同检验项目
                                    AND ISNULL(INSPECT_PROGRESS.INSPECT_DEV1ID,'')=''  --未匹配
                                    AND INSPECT_VIEW.INSPECT_VIEWID=@DOC_CODE    --过滤检验单号
                                    )
                                END
                                ");
                        }

                        GetInspectReport(new InspectInputDto() { INSPECT_DEV1ID = INSPECT_DEV1ID, UserName = "system" });
                        
                    }
                    else if (ISREPORT != "1")
                    {
                         GetInspectReport(new InspectInputDto() { INSPECT_DEV1ID = INSPECT_DEV1ID, UserName = "system" });
                       
                    }

                }
            }
           
        }


        public void LogTask(string TaskName, string result)
        {
            Db.Ado.ExecuteCommand(@"INSERT LOGTASK(LOGTASKID,LOGTASKCODE,LOGTASKNAME,RESULT,LOGTASKCREATEDATE,TENID,LOGTASKCREATEUSER) 
                        VALUES(newid(),convert(varchar(20),getdate(),120),'" + TaskName + @"','" + result + @"',convert(varchar(20),getdate(),120),'001','system')");
        }
         
        public void GetInspectReport(InspectInputDto parm)
        {
            string INSPECT_CODE;//检验单号
            string INSPECT_PUR; //检验来源
            //string INSPECT_DEV1ID;
            string ITEMID;//物料编码
            string LOTID;//批次号
            string INSPECT_DATE;
            string INSPECT_SPEC;
            string INSPECT_PROGRESSNAME;
            string PSTATE;
            int inspect_Qyt = 0;
            string INSPECT_PROGRESSID = "";
            string ISBUILD;
            string ISREPORT;
            string error = "";

            #region 获得检验单号和检验来源 徐杰修改
            string sql = @"SELECT  
             ISNULL(INSPECT_VIEW.INSPECT_CODE,'') INSPECT_CODE
            ,ISNULL(INSPECT_VIEW.INSPECT_TYPE,'') INSPECT_PUR
            ,INSPECT_PROGRESS.INSPECT_PROGRESSID INSPECT_PROGRESSID  --检验单检验项目ID
            ,INSPECT_VIEW.ITEMID
            ,INSPECT_VIEW.LOTNO
            ,INSPECT_DEV1.INSPECT_DATE
            ,ISNULL(INSPECT_PROGRESS.INSPECT_CNT,'0') INSPECT_CNT --应样本数
            ,ISNULL(INSPECT_DEV1.INSPECT_SPEC,'')  INSPECT_SPEC
            ,INSPECT_VIEW.PSTATE
            ,INSPECT_DEV1.INSPECT_DEV1ID
            ,INSPECT_DEV1.ISBUILD
            ,INSPECT_DEV1.ISREPORT
            ,INSPECT_PROGRESS.INSPECT_PROGRESSNAME
            FROM INSPECT_DEV1 
            LEFT JOIN INSPECT_PROGRESS ON INSPECT_DEV1.INSPECT_DEV1ID=INSPECT_PROGRESS.INSPECT_DEV1ID
            LEFT JOIN INSPECT_VIEW ON INSPECT_PROGRESS.DOC_CODE=INSPECT_VIEW.INSPECT_CODE
            WHERE INSPECT_DEV1.INSPECT_DEV1ID=@INSPECT_DEV1ID";
            // 定义参数
            var parameters = new SugarParameter[]
            {
                new SugarParameter("@INSPECT_DEV1ID", parm.INSPECT_DEV1ID)
            };

            // 执行 SQL 命令
            var dataTable = Db.Ado.GetDataTable(sql, parameters);

            if (dataTable.Rows.Count > 0)
            {
                #region //校验
                for (int i = 0; i < dataTable.Rows.Count; i++)
                {
                    ISBUILD = dataTable.Rows[i]["ISBUILD"].ToString();
                    INSPECT_CODE = dataTable.Rows[i]["INSPECT_CODE"].ToString();
                    INSPECT_PUR = dataTable.Rows[i]["INSPECT_PUR"].ToString();
                    //INSPECT_DEV1ID = dataTable.Rows[i]["INSPECT_DEV1ID"].ToString();
                    INSPECT_PROGRESSID = dataTable.Rows[i]["INSPECT_PROGRESSID"].ToString();
                    ITEMID = dataTable.Rows[i]["ITEMID"].ToString();
                    LOTID = dataTable.Rows[i]["LOTNO"].ToString();
                    if (IsNotNULL(dataTable.Rows[i]["INSPECT_DATE"].ToString()))
                        INSPECT_DATE = DateTime.Parse(dataTable.Rows[i]["INSPECT_DATE"].ToString()).ToString("yyyyMMddHHmmss");
                    else
                        INSPECT_DATE = "";
                    INSPECT_PROGRESSNAME = dataTable.Rows[i]["INSPECT_PROGRESSNAME"].ToString();
                    inspect_Qyt = int.Parse(dataTable.Rows[i]["INSPECT_CNT"].ToString());  //xujie add
                    INSPECT_SPEC = dataTable.Rows[i]["INSPECT_SPEC"].ToString();
                    PSTATE = dataTable.Rows[i]["PSTATE"].ToString();

                    if (!IsNotNULL(INSPECT_SPEC))
                    {
                        error = "检验项目未设置规格";
                        Db.Ado.ExecuteCommand(@" UPDATE INSPECT_DEV1 SET ISREPORT='" + error + @"' where INSPECT_DEV1ID='" + parm.INSPECT_DEV1ID + @"' ");
                    }

                    //else if (PSTATE == "PSTATE_003")
                    //{
                    //    error = INSPECT_CODE + "<" + INSPECT_PROGRESSNAME + ">:关联的检验单已完成，无法产生！";
                    //    Db.Ado.ExecuteCommand(@" UPDATE INSPECT_DEV1 SET ISREPORT='" + error + @"' where INSPECT_DEV1ID='" + parm.INSPECT_DEV1ID + @"' ");
                    //    //throw new Exception(error);
                    //}
                    else if (ISBUILD != "1")
                    {
                        error = "未关联检验单！";
                        Db.Ado.ExecuteCommand(@" UPDATE INSPECT_DEV1 SET ISREPORT='" + error + @"' where INSPECT_DEV1ID='" + parm.INSPECT_DEV1ID + @"' ");
                        Db.Ado.ExecuteCommand(@" UPDATE INSPECT_PROGRESS SET ISREPORT='" + error + @"' where INSPECT_PROGRESSID='" + INSPECT_PROGRESSID + @"' ");
                        //throw new Exception(error);
                    }
                    else if (error == "")
                    {
                        if (inspect_Qyt == 0)
                            inspect_Qyt = 1;//测试1笔

                        //2.获得@实际记录量
                        int actCount = Db.Ado.GetInt(@$"SELECT COUNT(1) FROM INSPECT_TENSILE WHERE INSPECT_DEV1ID='{parm.INSPECT_DEV1ID}'  ");

                        //3.如果@实际记录量<应检样本量
                        if (actCount < inspect_Qyt)
                        {
                            //SAMPLE_CNT
                            //历史样本数
                            int historyCount = Db.Ado.GetInt(@$"Select COUNT(1) FROM INSPECT_TENSILE 
LEFT JOIN INSPECT_DEV1 ON INSPECT_TENSILE.INSPECT_DEV1ID=INSPECT_DEV1.INSPECT_DEV1ID
WHERE INSPECT_DEV1.ITEMID='{ITEMID}'  
AND INSPECT_TENSILE.INSPECT_DEV1ID<>'{parm.INSPECT_DEV1ID}'
AND INSPECT_DEV1.INSPECT_SPEC='{INSPECT_SPEC}'");
                            if (historyCount < inspect_Qyt - actCount)
                            {
                                error = "历史数据记录笔数不满足";
                                Db.Ado.ExecuteCommand(@" UPDATE INSPECT_DEV1 SET ISREPORT='" + error + @"' where INSPECT_DEV1ID='" + parm.INSPECT_DEV1ID + @"' ");
                                Db.Ado.ExecuteCommand(@" UPDATE INSPECT_PROGRESS SET ISREPORT='" + error + @"' where INSPECT_PROGRESSID='" + INSPECT_PROGRESSID + @"' ");
                                //throw new Exception("历史数据记录笔数不满足，无法产生报告");
                            }
                        }
                    }
                }
                #endregion
                //产生报告
                if (error == "")
                {
                    for (int i = 0; i < dataTable.Rows.Count; i++)
                    {
                        ISBUILD = dataTable.Rows[i]["ISBUILD"].ToString();
                        INSPECT_CODE = dataTable.Rows[i]["INSPECT_CODE"].ToString();
                        INSPECT_PUR = dataTable.Rows[i]["INSPECT_PUR"].ToString();
                        //INSPECT_DEV1ID = dataTable.Rows[i]["INSPECT_DEV1"].ToString();
                        INSPECT_PROGRESSID = dataTable.Rows[i]["INSPECT_PROGRESSID"].ToString();
                        ITEMID = dataTable.Rows[i]["ITEMID"].ToString();
                        LOTID = dataTable.Rows[i]["LOTNO"].ToString();
                        try
                        {
                            INSPECT_DATE = DateTime.Parse(dataTable.Rows[i]["INSPECT_DATE"].ToString()).ToString("yyyyMMddHHmmss");
                        }
                        catch
                        {
                            INSPECT_DATE = "1900-01-01";
                        }
                        INSPECT_PROGRESSNAME = dataTable.Rows[i]["INSPECT_PROGRESSNAME"].ToString();
                        inspect_Qyt = int.Parse(dataTable.Rows[i]["INSPECT_CNT"].ToString());  //xujie add
                        INSPECT_SPEC = dataTable.Rows[i]["INSPECT_SPEC"].ToString();
                        PSTATE = dataTable.Rows[i]["PSTATE"].ToString();

                        if (!IsNotNULL(INSPECT_SPEC))
                        {
                            error = "未获取到规格";
                            Db.Ado.ExecuteCommand(@" UPDATE INSPECT_DEV1 SET ISREPORT='" + error + @"' where INSPECT_DEV1ID='" + parm.INSPECT_DEV1ID + @"' ");
                        }
                        if (error == "")
                        {
                            if (inspect_Qyt == 0)
                                inspect_Qyt = 1;//测试1笔

                            //2.获得@实际记录量
                            int actCount = Db.Ado.GetInt(@$"SELECT COUNT(1) FROM INSPECT_TENSILE WHERE INSPECT_DEV1ID='{parm.INSPECT_DEV1ID}'  ");

                            //3.如果@实际记录量<应检样本量
                            if (actCount < inspect_Qyt)
                            {
                                //历史样本数
                                int historyCount = Db.Ado.GetInt(@$"Select COUNT(1) FROM INSPECT_TENSILE 
LEFT JOIN INSPECT_DEV1 ON INSPECT_TENSILE.INSPECT_DEV1ID=INSPECT_DEV1.INSPECT_DEV1ID
WHERE INSPECT_DEV1.ITEMID='{ITEMID}'  
AND INSPECT_TENSILE.INSPECT_DEV1ID<>'{parm.INSPECT_DEV1ID}'

AND INSPECT_DEV1.INSPECT_SPEC='{INSPECT_SPEC}'");
                                if (historyCount < inspect_Qyt - actCount)
                                {
                                    error = "历史数据记录笔数不满足，无法产生报告";
                                    Db.Ado.ExecuteCommand(@" UPDATE INSPECT_DEV1 SET ISREPORT='" + error + @"' where INSPECT_DEV1ID='" + parm.INSPECT_DEV1ID + @"' ");
                                    //throw new Exception("历史数据记录笔数不满足，无法产生报告");
                                }
                            }
                            if (error == "")
                            {

                                List<INSPECT_TENSILE_D> listToSave = new List<INSPECT_TENSILE_D>();
                                int s1 = 0;
                                //实际检测集合
                                var dtActiveMain = Db.Ado.GetDataTable(@$"SELECT TOP {inspect_Qyt} *,FLAG=0 FROM INSPECT_TENSILE WHERE INSPECT_DEV1ID='{parm.INSPECT_DEV1ID}'   ");
                                foreach (DataRow item in dtActiveMain.Rows)
                                {
                                    s1++;

                                    listToSave.Add(GetDetailByInspect(item, parm.INSPECT_DEV1ID, INSPECT_PROGRESSID, s1.ToString()));
                                }
                                //四.如果@应检样本数>@实际记录笔
                                if (inspect_Qyt > dtActiveMain.Rows.Count)
                                {
                                    var dtRandomAddData = Db.Ado.GetDataTable(@$"SELECT TOP {inspect_Qyt - dtActiveMain.Rows.Count} *,FLAG=1
                                                                                FROM INSPECT_TENSILE
                                                                                LEFT JOIN INSPECT_DEV1 
                                                                                ON INSPECT_TENSILE.INSPECT_DEV1ID = INSPECT_DEV1.INSPECT_DEV1ID
                                                                                WHERE INSPECT_DEV1.ITEMID ='{ITEMID}'
                                                                                AND INSPECT_TENSILE.INSPECT_DEV1ID <>'{parm.INSPECT_DEV1ID}'
                                                                                AND INSPECT_DEV1.INSPECT_SPEC='{INSPECT_SPEC}' ORDER BY NEWID()");
                                    foreach (DataRow item in dtRandomAddData.Rows)
                                    {
                                        s1++;
                                        listToSave.Add(GetDetailByInspect(item, parm.INSPECT_DEV1ID, INSPECT_PROGRESSID, s1.ToString()));
                                    }
                                }

                                #region SaveToInspectDetail
                                try
                                {

                                    // 开启事务
                                    Db.Ado.BeginTran();

                                    Db.Ado.ExecuteCommand($"DELETE INSPECT_TENSILE_D WHERE INSPECT_DEV1ID='{parm.INSPECT_DEV1ID}'  AND INSPECT_PROGRESSID='{INSPECT_PROGRESSID}'");
                                    Db.Ado.ExecuteCommand($"DELETE INSPECT_TENSILE_D_R WHERE INSPECT_DEV1ID='{parm.INSPECT_DEV1ID}'  AND INSPECT_PROGRESSID='{INSPECT_PROGRESSID}'");

                                    // 批量插入数据
                                    Db.Insertable<INSPECT_TENSILE_D>(listToSave).ExecuteCommand();

                                    List<INSPECT_TENSILE_D_R> listInspectDataR = new List<INSPECT_TENSILE_D_R>();
                                    foreach (var detail in listToSave)
                                    {
                                        // 去除字符串首尾的花括号
                                        string trimmedInput = detail.Y_AXIS.Trim('{', '}');

                                        // 按逗号分割字符串
                                        string[] numberStrings = trimmedInput.Split(',');
                                        // 将分割后的字符串数组转换为双精度浮点数数组
                                        decimal[] numbers = Array.ConvertAll(numberStrings, decimal.Parse);
                                        decimal max = numbers.Max();
                                        decimal min = numbers.Min();
                                        decimal avg = numbers.Average();

                                        var drItem = new INSPECT_TENSILE_D_R()
                                        {
                                            INSPECT_TENSILE_D_RID = Guid.NewGuid().ToString(),
                                            INSPECT_TENSILE_DID = detail.INSPECT_TENSILE_DID,
                                            INSPECT_DEV1ID = detail.INSPECT_DEV1ID,
                                            INSPECT_PROGRESSID = detail.INSPECT_PROGRESSID,
                                            SAMPLEID = detail.SAMPLEID,
                                            MaxValue = max,
                                            MinValue = min,
                                            AvgValue = avg
                                        };
                                        listInspectDataR.Add(drItem);
                                    }

                                    Db.Insertable<INSPECT_TENSILE_D_R>(listInspectDataR).ExecuteCommand();


                                    sql = @"SELECT AvgValue
                        FROM INSPECT_TENSILE_D_R 
                        WHERE INSPECT_DEV1ID=@INSPECT_DEV1ID  
                                AND INSPECT_PROGRESSID=@INSPECT_PROGRESSID
                        ";
                                    // 定义参数
                                    var para = new SugarParameter[]
                                    {
                                new SugarParameter("@INSPECT_DEV1ID", parm.INSPECT_DEV1ID)
                               ,new SugarParameter("@INSPECT_PROGRESSID",INSPECT_PROGRESSID)
                                    };

                                    // 执行 SQL 命令
                                    var dataTable1 = Db.Ado.GetDataTable(sql, para);
                                    string SETVALUES = "";
                                    if (dataTable1 != null && dataTable1.Rows.Count > 0)
                                    {
                                        for (int ii = 0; ii < dataTable1.Rows.Count; ii++)
                                        {
                                            if (SETVALUES == "")
                                                SETVALUES += "A" + (ii + 1).ToString() + "='" + dataTable1.Rows[ii]["AvgValue"].ToString() + "'";
                                            else
                                                SETVALUES += ",A" + (ii + 1).ToString() + "='" + dataTable1.Rows[ii]["AvgValue"].ToString() + "'";
                                        }

                                        if (SETVALUES != "")
                                        {
                                            sql = @"UPDATE INSPECT_PROGRESS SET " + SETVALUES + " WHERE  INSPECT_PROGRESSID='" + INSPECT_PROGRESSID + "' ";
                                            Db.Ado.ExecuteCommand(sql);
                                        }
                                    }





                                    // 提交事务
                                    Db.Ado.CommitTran();
                                }
                                catch (Exception)
                                {
                                    // 回滚事务
                                    Db.Ado.RollbackTran();
                                    throw;
                                }
                                #endregion

                                byte[] fileContents = GetInspectImage(listToSave);

                                //返回文件流
                                var fileName = $"{ITEMID}_{LOTID}{INSPECT_DATE}.jpg";
                                string filePath = Path.Combine(AppSettings.Configuration["AppSettings:FileServerPath"], @$"Test\TENSILE\{ITEMID}\{fileName}");

                                //保存到SCANDOC
                                SaveToScanDoc("拉力机检测图", fileContents, filePath, INSPECT_CODE, parm.INSPECT_DEV1ID, INSPECT_PROGRESSID, ITEMID);



                                Db.Ado.ExecuteCommand(@" UPDATE INSPECT_DEV1 SET ISREPORT='1' WHERE INSPECT_DEV1ID='" + parm.INSPECT_DEV1ID + @"'");
                                Db.Ado.ExecuteCommand(@" UPDATE INSPECT_PROGRESS SET ISREPORT='1' where INSPECT_PROGRESSID='" + INSPECT_PROGRESSID + @"' ");
                                COCInputDto COCInputDto = new COCInputDto();
                                COCInputDto.COCID = "005";
                                string[] FIX=new string[1];
                                FIX[0] = INSPECT_CODE;
                                COCInputDto.FIX_VALUE= FIX;
                                COCInputDto.ID = INSPECT_CODE;
                                COCInputDto.INSPECT_DEV1ID= parm.INSPECT_DEV1ID;
                                COCInputDto.INSPECT_PROGRESSID = INSPECT_PROGRESSID;
                                COCInputDto.DOCTYPE = "拉力机报告";

                                GetCOCfile(COCInputDto);
                                Db.Ado.ExecuteCommand(@" UPDATE INSPECT_DEV1 SET ISREPORT1='1' WHERE INSPECT_DEV1ID='" + parm.INSPECT_DEV1ID + @"'");

                                // return "{\"INSPECT_DEV1ID\":\"" + parm.INSPECT_DEV1ID + "\",\"INSPECT_CODE\":\"" + INSPECT_CODE + "\",\"INSPECT_PROGRESSID\":\"" + INSPECT_PROGRESSID + "\"}";
                                // LogTask("拉力机报告", INSPECT_CODE + ";" + INSPECT_PROGRESSNAME + " 成功");
                                // 产生拉力机报告
                            }

                        }

                    }

                }

            }

            #endregion
        }

 
        private INSPECT_TENSILE_D GetDetailByInspect(DataRow item, string INSPECT_DEV1ID, string INSPECT_PROGRESSID, string s1)
        {
            var newItem = new INSPECT_TENSILE_D();
            newItem.INSPECT_TENSILE_DID = Guid.NewGuid().ToString();
            var properties = typeof(INSPECT_TENSILE_D).GetProperties();
            foreach (var prop in properties)
            {
                string columnName = prop.Name; // 默认按类的属性名查找
                // 赋值逻辑
                if (item.Table.Columns.Contains(columnName) && item[columnName] != DBNull.Value)
                {
                    // 获取属性类型（处理可空类型）
                    Type propType = Nullable.GetUnderlyingType(prop.PropertyType) ?? prop.PropertyType;

                    object value = Convert.ChangeType(item[columnName], propType);
                    prop.SetValue(newItem, value);
                }
            }
            newItem.INSPECT_DEV1ID = INSPECT_DEV1ID;
            newItem.INSPECT_PROGRESSID = INSPECT_PROGRESSID;
            newItem.SAMPLEID = s1;


            return newItem;
        }

        private byte[] GetInspectImage(List<INSPECT_TENSILE_D> listInspectData)
        {
            byte[] result = null;

            // 创建一个 PlotModel 对象，它代表整个图表
            var plotModel = new PlotModel
            {
                Title = "拉力机检测图",
                Background = OxyColors.White
            };
            var legend = new Legend
            {
                LegendPlacement = LegendPlacement.Inside, // 图例放在绘图区域外部
                LegendPosition = LegendPosition.TopLeft,  // 设置左上角
                LegendOrientation = LegendOrientation.Vertical, // 纵向排列
                LegendBackground = OxyColors.White, // 背景色
            };

            plotModel.Legends.Add(legend); // 添加图例

            int xMax = 1; int yMax = 1;
            foreach (var detail in listInspectData)
            {
                string trimmedInput = detail.X_AXIS.Trim('{', '}');
                string[] numberStrings = trimmedInput.Split(',');
                double[] dataArraysX = Array.ConvertAll(numberStrings, double.Parse);

                trimmedInput = detail.Y_AXIS.Trim('{', '}');
                numberStrings = trimmedInput.Split(',');
                double[] dataArraysY = Array.ConvertAll(numberStrings, double.Parse);
                // 更新 xMax 和 yMax
                if (dataArraysX.Length > 0)
                    xMax = Math.Max(xMax, (int)dataArraysX.Max());

                if (dataArraysY.Length > 0)
                    yMax = Math.Max(yMax, (int)dataArraysY.Max());
            }

            // 计算 Max 的 110%，并取整数
            xMax = (int)Math.Ceiling(xMax * 1.1);
            yMax = (int)Math.Ceiling(yMax * 1.1);

            // 创建一个线性坐标轴作为 X 轴
            plotModel.Axes.Add(new LinearAxis
            {
                Position = AxisPosition.Bottom,
                Title = "变形(mm)",
                Minimum = 0,
                Maximum = xMax,
                MajorGridlineStyle = OxyPlot.LineStyle.Solid,
                MinorGridlineStyle = OxyPlot.LineStyle.Dot,
                MajorGridlineColor = OxyColors.LightGray,
                MinorGridlineColor = OxyColors.LightGray
            });

            // 创建一个线性坐标轴作为 Y 轴
            plotModel.Axes.Add(new LinearAxis
            {
                Position = AxisPosition.Left,
                Title = "力(gt)",
                Minimum = 0,
                Maximum = yMax,
                MajorGridlineStyle = OxyPlot.LineStyle.Solid,
                MinorGridlineStyle = OxyPlot.LineStyle.Dot,
                MajorGridlineColor = OxyColors.LightGray,
                MinorGridlineColor = OxyColors.LightGray
            });

            int i = 1;
            Random random = new Random();
            foreach (var detail in listInspectData)
            {
                string trimmedInput = detail.X_AXIS.Trim('{', '}');
                string[] numberStrings = trimmedInput.Split(',');
                double[] dataArraysX = Array.ConvertAll(numberStrings, double.Parse);

                trimmedInput = detail.Y_AXIS.Trim('{', '}');
                numberStrings = trimmedInput.Split(',');
                double[] dataArraysY = Array.ConvertAll(numberStrings, double.Parse);

                // 生成随机颜色
                byte r = (byte)random.Next(256);
                byte g = (byte)random.Next(256);
                byte b = (byte)random.Next(256);
                OxyColor randomColor = OxyColor.FromRgb(r, g, b);

                var lineSeries = new LineSeries
                {
                    Title = $"Plot{i++}",
                    MarkerType = MarkerType.Circle,
                    MarkerSize = 0.2,
                    MarkerStroke = randomColor,
                    StrokeThickness = 1,
                    MarkerFill = OxyColors.White,
                    Color = randomColor
                };

                for (int j = 0; j < dataArraysX.Length; j++)
                {
                    DataPoint p = new DataPoint(dataArraysX[j], dataArraysY[j]);
                    lineSeries.Points.Add(p);
                }

                // 将曲线添加到图表模型中
                plotModel.Series.Add(lineSeries);
            }

            // 保存图表为 PNG 图片
            var exporter = new PngExporter { Width = 800, Height = 600, Resolution = 50 };
            using (MemoryStream stream = new MemoryStream())
            {
                exporter.Export(plotModel, stream);
                stream.Position = 0;
                result = stream.ToArray();
                stream.Flush();
            }
            return result;
        }
        private void SaveToScanDoc(string docType, byte[] fileContents, string scandocName, string peopleId, string INSPECT_DEV1ID, string INSPECT_PROGRESSID, string ITEMID)
        {
            FileInfo file = new FileInfo(scandocName);
            if (!file.Directory.Exists)
            {
                file.Directory.Create();
            }
            if (fileContents != null)
            {
                File.WriteAllBytes(scandocName, fileContents);
            }

            //Db.Ado.ExecuteCommand($"DELETE SCANDOC WHERE PEOPLEID='{peopleId}' AND COLUM001ID='{COLUM001ID}'");

            string sql = @"
            IF EXISTS(SELECT 1 FROM SCANDOC WHERE  INSPECT_PROGRESSID=@INSPECT_PROGRESSID)
                UPDATE SCANDOC SET SCANDOCNAME=@SCANDOCNAME,INSPECT_DEV1ID=@INSPECT_DEV1ID,ITEMID=@ITEMID WHERE INSPECT_PROGRESSID=@INSPECT_PROGRESSID
            ELSE
            INSERT INTO SCANDOC (TENID, SCANDOCID, SCANDOCCODE, SCANDOCNAME, DOCTYPE, PEOPLEID, createdate, SCANDOC_user,INSPECT_DEV1ID,INSPECT_PROGRESSID,ITEMID)
            VALUES ('001', @SCANDOCID, @SCANDOCID, @SCANDOCNAME, @DOCTYPE, @PEOPLEID, CONVERT(VARCHAR(20), GETDATE(), 120), @PEOPLEID, @INSPECT_DEV1ID,@INSPECT_PROGRESSID,@ITEMID)
            
";

            // 定义参数
            var parameters = new SugarParameter[]
            {
                new SugarParameter("@SCANDOCID", Guid.NewGuid().ToString()),
                new SugarParameter("@SCANDOCNAME", scandocName.Replace(AppSettings.Configuration["AppSettings:FileServerPath"],@"\")),
                new SugarParameter("@DOCTYPE", docType),
                new SugarParameter("@PEOPLEID", peopleId),
                new SugarParameter("@ITEMID", ITEMID),
                new SugarParameter("@INSPECT_PROGRESSID", INSPECT_PROGRESSID),
                new SugarParameter("@INSPECT_DEV1ID", INSPECT_DEV1ID)

            };

            // 执行 SQL 命令
            Db.Ado.ExecuteCommand(sql, parameters);
        }

        private void SaveROSHToScanDoc(string docType, byte[] fileContents, string scandocName, string peopleId, string INSPECT_DEV1ID, string INSPECT_PROGRESSID, string ITEMID)
        {
            FileInfo file = new FileInfo(scandocName);
            if (!file.Directory.Exists)
            {
                file.Directory.Create();
            }
            if (fileContents != null)
            {
                File.WriteAllBytes(scandocName, fileContents);
            }

            //Db.Ado.ExecuteCommand($"DELETE SCANDOC WHERE PEOPLEID='{peopleId}' AND COLUM001ID='{COLUM001ID}'");

            string sql = @"
            IF EXISTS(SELECT 1 FROM SCANDOC WHERE  INSPECT_PROGRESSID=@INSPECT_PROGRESSID)
                UPDATE SCANDOC SET SCANDOCNAME=@SCANDOCNAME,INSPECT_DEV1ID=@INSPECT_DEV1ID,ITEMID=@ITEMID WHERE INSPECT_PROGRESSID=@INSPECT_PROGRESSID
            ELSE
            INSERT INTO SCANDOC (TENID, SCANDOCID, SCANDOCCODE, SCANDOCNAME, DOCTYPE, PEOPLEID, createdate, SCANDOC_user,INSPECT_DEV1ID,INSPECT_PROGRESSID,ITEMID)
            VALUES ('001', @SCANDOCID, @SCANDOCID, @SCANDOCNAME, @DOCTYPE, @PEOPLEID, CONVERT(VARCHAR(20), GETDATE(), 120), @PEOPLEID, @INSPECT_DEV1ID,@INSPECT_PROGRESSID,@ITEMID)
            
";

            // 定义参数
            var parameters = new SugarParameter[]
            {
                new SugarParameter("@SCANDOCID", Guid.NewGuid().ToString()),
                new SugarParameter("@SCANDOCNAME", scandocName.Replace(AppSettings.Configuration["AppSettings:FileServerPath"],@"\")),
                new SugarParameter("@DOCTYPE", docType),
                new SugarParameter("@PEOPLEID", peopleId),
                 new SugarParameter("@ITEMID", ITEMID),
                new SugarParameter("@INSPECT_PROGRESSID", INSPECT_PROGRESSID),
                new SugarParameter("@INSPECT_DEV1ID", INSPECT_DEV1ID)

            };

            // 执行 SQL 命令
            Db.Ado.ExecuteCommand(sql, parameters);
        }
        #endregion

        #region GetInspectBatchReport
        public void GetInspectBatchReport(InspectInputByCodeDto parm)
        {
            var dtINSPECT_DEVID = Db.Ado.GetDataTable(@$"SELECT INSPECT_DEV1ID FROM INSPECT_DEV1 WHERE DOC_CODE = '{parm.DOC_CODE}' AND INSPECT_DEV ='{parm.INSPECT_DEV}'");
            if (dtINSPECT_DEVID.Rows.Count == 0)
            {
                throw new Exception("没有找到任何记录.");
            }
            foreach (DataRow dataRow in dtINSPECT_DEVID.Rows)
            {
                string INSPECT_DEV1ID = dataRow["INSPECT_DEV1ID"].ToString();
                GetInspectReport(new InspectInputDto() { INSPECT_DEV1ID = INSPECT_DEV1ID, UserName = parm.UserName });
            }
        }
        #endregion

        #region GetCPKfile
        public void GetCPKfile(string INSPECT_DEV2ID, string userName)
        {
            string error = "";
            string INSPECT_PROGRESSID = "";
            string ITEMID = "";
            string LOTID = "";
            string INSPECT_CODE = "";
            string INSPECT_DATE = "";
            string ITEMNAME = "";
            string strDP = "";
            CpkRandomGenerator CpkRandomGenerator = new CpkRandomGenerator();
            int lot_Qyt = 0;
            int inspect_Qyt = 0;

            #region 1．获得资料

            string sql = @"SELECT Top 1 ISNULL(INSPECT_VIEW.INSPECT_VIEWID, '') AS INSPECT_CODE
                    ,ISNULL(INSPECT_VIEW.ITEMID, '') AS ITEMID-- 物料编码(有个低代码待办)
                    ,ISNULL(INSPECT_VIEW.LOTNO, '') AS LOTID-- 批次号     
                    ,ISNULL(INSPECT_PROGRESS.INSPECT_PROGRESSID, '') AS INSPECT_PROGRESSID
                    ,ISNULL(INSPECT_PROGRESS.COC_ATTR, '') AS COC_ATTR--特殊设定
                    ,ISNULL(INSPECT_PROGRESS.INSPECT_CNT, '') AS INSPECT_CNT --应检
                    ,ISNULL(INSPECT_VIEW.LOT_QTY, '') AS LOT_QTY  --批次数量
                    ,ISNULL(INSPECT_PROGRESS.INSPECT_DEV2ID, '') AS INSPECT_DEV2ID  --批次数量
                    ,INSPECT_VIEW.INSPECT_DATE
                    ,INSPECT_VIEW.ITEMNAME
,ISNULL(INSPECT_NOR.DP,'0') DP
                    FROM INSPECT_PROGRESS
LEFT JOIN INSPECT_NOR ON INSPECT_PROGRESS.INSPECT_NORID=INSPECT_NOR.INSPECT_NORID
                    LEFT JOIN INSPECT_VIEW ON INSPECT_VIEW.INSPECT_VIEWID = INSPECT_PROGRESS.DOC_CODE
                    WHERE INSPECT_DEV2ID = @INSPECT_DEV2ID";
            var parameters = new SugarParameter[]
            {
              new SugarParameter("@INSPECT_DEV2ID", INSPECT_DEV2ID)
            };

            // 执行 SQL 命令
            var dataTable = Db.Ado.GetDataTable(sql, parameters);

            if (dataTable.Rows.Count > 0)
            {
                INSPECT_PROGRESSID = dataTable.Rows[0]["INSPECT_PROGRESSID"].ToString();
                ITEMID = dataTable.Rows[0]["ITEMID"].ToString();
                LOTID = dataTable.Rows[0]["LOTID"].ToString();
                INSPECT_CODE = dataTable.Rows[0]["INSPECT_CODE"].ToString();
                INSPECT_DATE = dataTable.Rows[0]["INSPECT_DATE"].ToString();
                ITEMNAME = dataTable.Rows[0]["ITEMNAME"].ToString();
                inspect_Qyt = int.Parse(dataTable.Rows[0]["INSPECT_CNT"].ToString());  //获得应检样本量
                lot_Qyt = int.Parse(dataTable.Rows[0]["LOT_QTY"].ToString());
                INSPECT_DEV2ID = dataTable.Rows[0]["INSPECT_DEV2ID"].ToString();
                strDP = dataTable.Rows[0]["DP"].ToString();
            }

            #endregion

            string sqlPRO1 = @"SELECT * FROM INSPECT_DEV2 where INSPECT_DEV2ID = @INSPECT_DEV2ID";
            var paraPRO1 = new SugarParameter[] { new SugarParameter("@INSPECT_DEV2ID", INSPECT_DEV2ID) };
            var dtPRO1 = Db.Ado.GetDataTable(sqlPRO1, paraPRO1);
            if (dtPRO1.Rows.Count > 0)
            {
                string DEVID = dtPRO1.Rows[0]["DEVID"].ToString();
                #region//由检验单自动产生数据
                if (DEVID == "检验单触发")
                {
                    // 产生随机值
                    string sqlPRO = @"SELECT INSPECT_PROGRESS.INSPECT_PROGRESSID,LOCATION.CPK CPK,ISNULL(STD_VALUE,'0') STD_VALUE
,ISNULL(INSPECT_PROGRESS.MAX_VALUE,'0') MAX_VALUE,ISNULL(INSPECT_PROGRESS.MIN_VALUE,'0') MIN_VALUE  FROM INSPECT_PROGRESS 
                                      LEFT JOIN LOCATION ON LOCATION.LOCATIONID=INSPECT_PROGRESS.LOCATIONID
                                      WHERE INSPECT_PROGRESS1ID = @INSPECT_PROGRESSID";
                    var paraPRO = new SugarParameter[] { new SugarParameter("@INSPECT_PROGRESSID", INSPECT_PROGRESSID) };


                    var dtPRO = Db.Ado.GetDataTable(sqlPRO, paraPRO);

                    if (dtPRO.Rows.Count > 0)
                    {
                        for (int i = 0; i < dtPRO.Rows.Count; i++)
                        {
                            string _INSPECT_PROGRESSID = dtPRO.Rows[i]["INSPECT_PROGRESSID"].ToString();
                            Db.Ado.ExecuteCommand(@$"UPDATE INSPECT_PROGRESS SET INSPECT_CNT='" + inspect_Qyt + @"' where INSPECT_PROGRESSID='" + _INSPECT_PROGRESSID + @"' "); //

                            string CPK = dtPRO.Rows[i]["CPK"].ToString();
                            Double icpk = 0;
                            Double STD_VALUE = Double.Parse(dtPRO.Rows[i]["STD_VALUE"].ToString());
                            Double MAX_VALUE = Double.Parse(dtPRO.Rows[i]["MAX_VALUE"].ToString());
                            Double MIN_VALUE = Double.Parse(dtPRO.Rows[i]["MIN_VALUE"].ToString());
                            int DP = 0;
                            if (!IsNotNULL(strDP))
                                DP = 4;
                            DP = int.Parse(strDP);

                            LogTask("拉力机报告", INSPECT_CODE + ";" + DP.ToString() + " 成功");

                            double[] data;
                            if (CPK == "CPK_002")
                                icpk = 1.33;
                            else if (CPK == "CPK_003")
                                icpk = 1.67;
                            else
                                Db.Ado.ExecuteCommand(@$"EXEC [GET_INSPECT_RANK] '{_INSPECT_PROGRESSID}', '{inspect_Qyt}'"); //产生随机值

                            if (icpk != 0)
                            {

                                data = CpkRandomGenerator.GenerateValues(STD_VALUE, MAX_VALUE, MIN_VALUE, inspect_Qyt, icpk);

                                string set = "";
                                int k = 0;
                                foreach (var val in data)
                                {
                                    k++;
                                    if (k == 1)
                                        set += "A" + k.ToString() + "='" + Math.Round(val, DP).ToString() + "'";
                                    else
                                        set += ",A" + k.ToString() + "='" + Math.Round(val, DP).ToString() + "'";
                                }
                                Db.Ado.ExecuteCommand(@"UPDATE INSPECT_PROGRESS SET " + set + " WHERE INSPECT_PROGRESSID='" + _INSPECT_PROGRESSID + "'");
                            }



                        }
                    }
                }
                #endregion
            }

        }

        #region GET_INSPECT_RANK
        /*改为存储过程
        public DataTable GET_INSPECT_RANK(string COLUM002ID, string INSPECT_CODE, int intSampleCount, string INSPECT_PUR, string userName)
        {
            #region 0.删除QMS中的随机记录
            string sql = @"DELETE FROM INSPECT_ZONE WHERE COLUM002ID = @COLUM002ID AND INSPECTCODE = @INSPECT_CODE AND ISAUTO = '1'";
            var parameters = new SugarParameter[]
            {
                new SugarParameter("@COLUM002ID", COLUM002ID),
                new SugarParameter("@INSPECT_CODE", INSPECT_CODE),
            };
            Db.Ado.ExecuteCommand(sql, parameters);
            #endregion

            #region 2.获得已存在记录数：
            int exist_Qyt = 0;
            sql = @$"SELECT COUNT(1) FROM INSPECT_ZONE WHERE INSPECTCODE = @INSPECTCODE";
            // 定义参数
            parameters = new SugarParameter[]
            {
                new SugarParameter("@INSPECTCODE", INSPECT_CODE)
            };
            // 执行 SQL 命令
            var dataTable = Db.Ado.GetDataTable(sql, parameters);
            if (dataTable.Rows.Count > 0)
            {
                exist_Qyt = int.Parse(dataTable.Rows[0][0].ToString());
            }
            #endregion

            #region 3.获得@ITEMID，@LOTID
            //@动态表名 =“INSPECT_”+@INSPECT_PUR
            //@动态表面ID栏位 = @动态表名 +“ID” 
            //SELECT @ITEMID = ITEMID，@LOTID = LOTID FROM @动态表名 WHERE @动态表面ID栏位 = @INSPECT_CODE
            string table = string.Empty;
            string surfaceId = string.Empty;
            string itemId = string.Empty;
            string lotId = string.Empty;

            table = "INSPECT_" + INSPECT_PUR;
            surfaceId = table + "ID";

            //wjj
            //sql = @$"SELECT top 1 ITEMID,LOTID FROM {table} WHERE {surfaceId}=@INSPECT_CODE";
            //// 定义参数
            //parameters = new SugarParameter[]
            //{
            //    new SugarParameter("@INSPECT_CODE", INSPECT_CODE)
            //};
            //// 执行 SQL 命令
            //dataTable = Db.Ado.GetDataTable(sql, parameters);

            //if (dataTable.Rows.Count > 0)
            //{
            //    itemId = dataTable.Rows[0]["ITEMID"].ToString();
            //    lotId = dataTable.Rows[0]["lotId"].ToString();
            //}
            #endregion

            #region 1.获得结果集A：
            sql = @$"SELECT ISNULL(STD_VALUE,0) as STD_VALUE,ISNULL(MIN_VALUE,0) as MIN_VALUE,
		        ISNULL(MAX_VALUE,0) as MAX_VALUE,ISNULL(ADD_VALUE,0) as ADD_VALUE,ISNULL(COLUM001CODE,'') as COLUM001CODE
                FROM COLUM001 WHERE COLUM002ID = @COLUM002ID and Colum001CODE like'A%'";
            parameters = new SugarParameter[]
            {
                new SugarParameter("@COLUM002ID", COLUM002ID)
            };
            // 执行 SQL 命令
            dataTable = Db.Ado.GetDataTable(sql, parameters);
            #endregion

            # region 4 循环样本：
            double std_VALUE = 0;
            double min_VALUE = 0;
            double max_VALUE = 0;
            double add_VALUE = 0;
            string COLUM001CODE = "";
            double lower_Value = 0; //下限值
            double upper_Value = 0; //上限值
            double act_Value = 0; //生成随机数 实际值
            string sel_Col = "";
            string sel_VALUES = "";
            string sampleId = "";

            int sampleCount = 1;
            while (sampleCount <= intSampleCount)
            {
                #region 1.循环结果集A
                //获得：@标准值 结果集A.STD_VALUE
                //@上公差 结果集A.MIN_VALUE
                //@下公差 结果集A.MAX_VALUE
                //@上下公差余量 = 结果集A.ADD_VALUE
                //得到：@实际值：
                //如：标准值 = 1.08，上公差0.01 下公差 0.03  参数上下公差余量 = 0.001
                //则随机范围是 （1.08 - 0.03 + 0.001~1.08 + 0.01 - 0.001）
                //BEGIN
                //     @变量SELECT +=”,”+结果集A.COLUM001CODE
                //     @变量VALUES +=”,”+实际值
                //END

                if (dataTable.Rows.Count > 0)
                {
                    for (int i = 0; i < dataTable.Rows.Count; i++)
                    {
                        std_VALUE = Convert.ToDouble(dataTable.Rows[i]["STD_VALUE"]);
                        min_VALUE = Convert.ToDouble(dataTable.Rows[i]["MIN_VALUE"]);
                        max_VALUE = Convert.ToDouble(dataTable.Rows[i]["MAX_VALUE"]);
                        add_VALUE = Convert.ToDouble(dataTable.Rows[i]["ADD_VALUE"]);
                        COLUM001CODE = dataTable.Rows[i]["COLUM001CODE"].ToString();

                        lower_Value = std_VALUE - max_VALUE + add_VALUE;
                        upper_Value = std_VALUE + min_VALUE - add_VALUE;

                        //在范围内生成随机数  
                        Random random = new Random();
                        act_Value = lower_Value + (random.NextDouble() * (upper_Value - lower_Value));

                        sel_Col += "," + COLUM001CODE;
                        sel_VALUES += "," + "'" + act_Value.ToString() + "'";
                    }
                }

                #endregion

                # region 2.插入检验结果
                //样本ID：@已存在记录数 + 循环次数
                sampleId = exist_Qyt + sampleCount.ToString();

                sql = @$"INSERT INSPECT_ZONE(INSPECT_ZONECREATEUSER,INSPECT_ZONECREATEDATE,INSPECT_ZONEID,INSPECTTYPE,COLUM002ID,
                            CUSTOM_ITEMID,LOTNO,INSPECTCODE,PCSCODE,ISAUTO{sel_Col}) 
                            VALUES(
                            '{userName}',CONVERT(varchar(20), GETDATE(), 120), '{Guid.NewGuid().ToString()}','{INSPECT_PUR}', '{COLUM002ID}',
                            '{itemId}','{lotId}','{INSPECT_CODE}','{sampleId}','1'{sel_VALUES})";

                Db.Ado.ExecuteCommand(sql);

                #endregion

                sampleCount++;
            }
            #endregion 

            return dataTable; // 返回填充的数据表
        }
        */
        #endregion

        #region GET_INSPECT_LIST 返回 第15行的列名+32后数据
        /* 改用存储过程
        //@COLUM002ID       --需要查询的检验项目
        //@INSPECT_CODE     --检验单号
        //@INSPECT_PUR      --检验类别
        public DataTable GET_INSPECT_LIST(string COLUM002ID, string INSPECT_CODE, string INSPECT_PUR)
        {
            DataTable dataTableR = new DataTable(); // 创建 DataTable 实例
            # region 1.获得结果集A +2.循环结果集A：

            string sql = @$"SELECT COLUM001CODE,STD_VALUE,MIN_VALUE,MAX_VALUE,REMARK1
                FROM COLUM001 WHERE COLUM002ID = @COLUM002ID and Colum001CODE like'A%'";
            var parameters = new SugarParameter[]
            {
                new SugarParameter("@COLUM002ID", COLUM002ID)
            };
            // 执行 SQL 命令
            var dataTable = Db.Ado.GetDataTable(sql, parameters);

            string COLUM001CODE = string.Empty;
            string sel_Col = string.Empty;
            string sel_ColB = string.Empty;

            if (dataTable.Rows.Count > 0)
            {
                for (int i = 0; i < dataTable.Rows.Count; i++)
                {
                    COLUM001CODE = dataTable.Rows[i]["COLUM001CODE"].ToString();

                    sel_Col += "," + COLUM001CODE;
                    sel_ColB += "," + COLUM001CODE.Replace('A', 'B');
                }
            }

            #endregion

            #region 3.组装SQL
            sql = @$"SELECT INSPECT_ZONECREATEUSER, INSPECT_ZONECREATEDATE, INSPECT_ZONEID, INSPECTTYPE, 
                    COLUM002ID, CUSTOM_ITEMID AS ITEMID, LOTNO, INSPECTCODE, PCSCODE,ISAUTO
                    {sel_Col} {sel_ColB}
                    FROM INSPECT_ZONE
                    WHERE COLUM002ID = @COLUM002ID AND INSPECTCODE = @INSPECT_CODE AND INSPECTTYPE = @INSPECT_PUR 
                    ORDER BY PCSCODE";
            parameters = new SugarParameter[]
            {
                new SugarParameter("@COLUM002ID", COLUM002ID),
                new SugarParameter("@INSPECT_CODE", INSPECT_CODE),
                new SugarParameter("@INSPECT_PUR", INSPECT_PUR),
            };
            // 执行 SQL 命令
            dataTableR = Db.Ado.GetDataTable(sql, parameters);

            #endregion

            return dataTableR; // 返回填充的数据表  
            //返回的所有列名以A开头的列数量，就是区块1的列数
            //返回的所有列名以A开头的列名，就是区块1第15行的列名
            //返回的数据就是32~63行区域的内容（行数依照查询的结果展示）
        }
        */
        #endregion

        #region GET_STD_VALUE_LIST
        private DataTable GET_STD_VALUE_LIST(string INSPECT_PROGRESSID)
        {
            string sql = @$"SELECT INSPECT_PROGRESSID COLUM001CODE,STD_VALUE,REMARK1,MAX_VALUE,MIN_VALUE
                    FROM INSPECT_PROGRESS WHERE INSPECT_PROGRESSID = @INSPECT_PROGRESSID  ORDER BY INSPECT_PROGRESSNAME";
            var parameters = new SugarParameter[]
            {
                new SugarParameter("@INSPECT_PROGRESSID", INSPECT_PROGRESSID)
            };
            // 执行 SQL 命令
            DataTable originalTable = Db.Ado.GetDataTable(sql, parameters);

            // 创建一个新的 transposedTable 并将原始 originalTable 的行列转置到新的 transposedTable 中
            DataTable transposedTable = TransposeDataTable(originalTable);

            return originalTable;
        }
        #endregion

        #region GET_INSPECT_LIST_INSERT
        //@COLUM002ID       --需要查询的检验项目
        //@INSPECT_CODE     --检验单号
        //@INSPECT_PUR      --检验类别
        //@TABLENAME          --插入指定的TABLE
        private DataTable GET_INSPECT_LIST_INSERT(string COLUM002ID, string INSPECT_CODE, string INSPECT_PUR, string TABLENAME)
        {
            DataTable inspectListTable = Db.Ado.GetDataTable(@$"EXEC GET_INSPECT_LIST '{COLUM002ID}','{INSPECT_CODE}','{INSPECT_PUR}'");

            // 1. 去掉 B 开头的列（B01、B02...）
            var filteredTable = inspectListTable.Copy();
            var bColumns = filteredTable.Columns
                .Cast<DataColumn>()
                .Where(col => col.ColumnName.StartsWith("B", StringComparison.OrdinalIgnoreCase))
                .ToList();

            foreach (var col in bColumns)
                filteredTable.Columns.Remove(col.ColumnName);

            // 2. 准备列
            var staticColumns = new[] { "COLUM002ID", "ITEMID", "LOTNO", "INSPECTCODE", "ISAUTO" };
            var aColumns = filteredTable.Columns
                .Cast<DataColumn>()
                .Where(col => col.ColumnName.StartsWith("A", StringComparison.OrdinalIgnoreCase))
                .Select(col => col.ColumnName)
                .ToList();

            var pcsCodes = filteredTable.AsEnumerable()
                .Select(row => row["PCSCODE"].ToString())
                .Distinct()
                .ToList();

            // 3. 创建透视表结构
            DataTable pivotTable = new DataTable();

            foreach (var col in staticColumns)
                pivotTable.Columns.Add(col, typeof(string));

            pivotTable.Columns.Add("COLUM001CODE", typeof(string));

            foreach (var pcsCode in pcsCodes)
                pivotTable.Columns.Add(pcsCode, typeof(double)); // 直接用 PCSCODE 作为列名

            // 4. 每个A列（检测项）生成一行
            foreach (var aCol in aColumns)
            {
                DataRow newRow = pivotTable.NewRow();

                // 静态信息：从第一个样本复制（默认一样）
                foreach (var col in staticColumns)
                    newRow[col] = filteredTable.Rows[0][col];

                newRow["COLUM001CODE"] = aCol;

                // 每个PCSCODE作为一列
                foreach (var pcsCode in pcsCodes)
                {
                    var row = filteredTable.AsEnumerable()
                        .FirstOrDefault(r => r["PCSCODE"].ToString() == pcsCode);

                    if (row != null && double.TryParse(row[aCol]?.ToString(), out double value))
                    {
                        newRow[pcsCode] = value;
                    }
                }

                pivotTable.Rows.Add(newRow);
            }

            return pivotTable;
        }
        #endregion

        private DataTable TransposeDataTable(DataTable originalTable)
        {
            DataTable transposedTable = new DataTable();

            // 添加列
            for (int i = 0; i <= originalTable.Rows.Count; i++)
            {
                transposedTable.Columns.Add(i.ToString());
            }

            // 添加行
            for (int j = 0; j < originalTable.Columns.Count; j++)
            {
                DataRow newRow = transposedTable.NewRow();
                newRow[0] = originalTable.Columns[j].ColumnName;
                for (int k = 1; k <= originalTable.Rows.Count; k++)
                {
                    newRow[k] = originalTable.Rows[k - 1][j];
                }
                transposedTable.Rows.Add(newRow);
            }

            return transposedTable;
        }

        public byte[] GetExcelContent(DataSet dataSet1, List<DataSet> listDataSet1, string ITEMNAME, string INSPECT_DATE)
        {
            int columnCount = 0;
            listDataSet1.Insert(0, dataSet1);
            foreach (var itemDs in listDataSet1)
            {
                columnCount += itemDs.Tables[0].Columns.Count;
            }

            // 创建工作簿
            IWorkbook workbook = new XSSFWorkbook();
            // 创建工作表
            ISheet sheet = workbook.CreateSheet("Sheet1");

            // 定义表头字体样式
            ICellStyle headerCellStyle = workbook.CreateCellStyle();
            IFont headerFont = workbook.CreateFont();
            headerFont.FontName = "Verdana"; // 设置字体为 Verdana
            headerFont.FontHeightInPoints = 8; // 设置字号为 8
            headerFont.IsBold = true; // 设置加粗
            headerCellStyle.SetFont(headerFont);

            // 设置表头边框样式
            //headerCellStyle.BorderTop = BorderStyle.Thin;
            //headerCellStyle.BorderBottom = BorderStyle.Thin;
            //headerCellStyle.BorderLeft = BorderStyle.Thin;
            //headerCellStyle.BorderRight = BorderStyle.Thin;
            headerCellStyle.TopBorderColor = IndexedColors.Black.Index;
            headerCellStyle.BottomBorderColor = IndexedColors.Black.Index;
            headerCellStyle.LeftBorderColor = IndexedColors.Black.Index;
            headerCellStyle.RightBorderColor = IndexedColors.Black.Index;

            // 定义普通单元格边框样式
            ICellStyle normalCellStyle = workbook.CreateCellStyle();
            IFont normalFont = workbook.CreateFont();
            normalCellStyle.BorderTop = BorderStyle.Thin;
            normalCellStyle.BorderBottom = BorderStyle.Thin;
            normalCellStyle.BorderLeft = BorderStyle.Thin;
            normalCellStyle.BorderRight = BorderStyle.Thin;
            normalCellStyle.TopBorderColor = IndexedColors.Black.Index;
            normalCellStyle.BottomBorderColor = IndexedColors.Black.Index;
            normalCellStyle.LeftBorderColor = IndexedColors.Black.Index;
            normalCellStyle.RightBorderColor = IndexedColors.Black.Index;
            normalFont.FontName = "Arial"; // 设置字体为 Arial
            normalFont.FontHeightInPoints = 8; // 设置字号为 8
            normalCellStyle.SetFont(normalFont); // 应用字体到普通单元格样式

            // 定义加粗样式
            ICellStyle boldCellStyle = workbook.CreateCellStyle();
            boldCellStyle.CloneStyleFrom(normalCellStyle); // 继承普通样式
            IFont boldFont = workbook.CreateFont();
            boldFont.FontName = "Arial"; // 字体与普通样式一致
            boldFont.FontHeightInPoints = 8; // 字号与普通样式一致
            boldFont.IsBold = true; // 设置加粗
            boldCellStyle.SetFont(boldFont);

            // 定义淡绿色背景样式 Dimension Description 行
            ICellStyle lightGreenCellStyle = workbook.CreateCellStyle();
            lightGreenCellStyle.CloneStyleFrom(normalCellStyle); // 继承普通样式
            lightGreenCellStyle.FillForegroundColor = IndexedColors.LightGreen.Index; // 设置背景色为淡绿色
            lightGreenCellStyle.FillPattern = FillPattern.SolidForeground;
            lightGreenCellStyle.Alignment = HorizontalAlignment.Center; // 水平居中
            lightGreenCellStyle.VerticalAlignment = VerticalAlignment.Center; // 垂

            // 定义蓝色背景样式 Comments-Proposed Yield 行
            ICellStyle skyBlueCellStyle = workbook.CreateCellStyle();
            skyBlueCellStyle.CloneStyleFrom(normalCellStyle); // 继承普通样式
            skyBlueCellStyle.FillForegroundColor = IndexedColors.PaleBlue.Index;
            skyBlueCellStyle.FillPattern = FillPattern.SolidForeground;
            skyBlueCellStyle.Alignment = HorizontalAlignment.Center; // 水平居中
            skyBlueCellStyle.VerticalAlignment = VerticalAlignment.Center; // 垂

            // 第14行蓝色字体+居中显示 Distribution Type 行
            ICellStyle blueCenteredStyle = workbook.CreateCellStyle();
            IFont verdanaFont = workbook.CreateFont();
            verdanaFont.FontName = "Verdana"; // 设置字体为 Verdana
            verdanaFont.FontHeightInPoints = 6; // 设置字号为 6
            verdanaFont.Color = IndexedColors.Blue.Index; // 设置字体颜色为蓝色
            blueCenteredStyle.SetFont(verdanaFont);
            blueCenteredStyle.Alignment = HorizontalAlignment.Center; // 水平居中
            blueCenteredStyle.VerticalAlignment = VerticalAlignment.Center; // 垂

            // 定义数字格式单元格样式
            ICellStyle numberCellStyle = workbook.CreateCellStyle();
            IDataFormat dataFormat = workbook.CreateDataFormat();
            numberCellStyle.CloneStyleFrom(normalCellStyle); // 继承普通样式
            numberCellStyle.DataFormat = dataFormat.GetFormat("#,##0.0##"); // 例如 1,234.56
            numberCellStyle.FillForegroundColor = IndexedColors.SeaGreen.Index; // 设置背景色为绿色
            numberCellStyle.FillPattern = FillPattern.SolidForeground;
            numberCellStyle.Alignment = HorizontalAlignment.Center; // 水平居中
            numberCellStyle.VerticalAlignment = VerticalAlignment.Center; // 垂
            numberCellStyle.SetFont(normalFont); // 应用字体到普通单元格样式

            // 定义百分比格式单元格样式
            ICellStyle percentCellStyle = workbook.CreateCellStyle();
            IDataFormat dataFormat1 = workbook.CreateDataFormat();
            percentCellStyle.CloneStyleFrom(normalCellStyle); // 继承普通样式
            percentCellStyle.DataFormat = dataFormat1.GetFormat("0.0#%"); // 
            percentCellStyle.FillForegroundColor = IndexedColors.SeaGreen.Index; // 设置背景色为绿色
            percentCellStyle.FillPattern = FillPattern.SolidForeground;
            percentCellStyle.Alignment = HorizontalAlignment.Center; // 水平居中
            percentCellStyle.VerticalAlignment = VerticalAlignment.Center; // 垂
            percentCellStyle.SetFont(normalFont); // 应用字体到普通单元格样式

            // 定义一个居中不加粗的样式 为30-62行 第0列
            ICellStyle normal1CellStyle = workbook.CreateCellStyle();
            normal1CellStyle.CloneStyleFrom(normalCellStyle); // 继承普通样式
            normal1CellStyle.Alignment = HorizontalAlignment.Center; // 水平居中
            normal1CellStyle.VerticalAlignment = VerticalAlignment.Center; // 垂
            normal1CellStyle.SetFont(normalFont); // 应用字体到普通单元格样式

            //以及20-23行，31行使用，无背景色
            // 定义数字格式单元格样式
            ICellStyle number1CellStyle = workbook.CreateCellStyle();
            number1CellStyle.CloneStyleFrom(normalCellStyle); // 继承普通样式
            number1CellStyle.DataFormat = dataFormat.GetFormat("#,##0.0##"); // 例如 1,234.56
            number1CellStyle.Alignment = HorizontalAlignment.Center; // 水平居中
            number1CellStyle.VerticalAlignment = VerticalAlignment.Center; // 垂
            number1CellStyle.SetFont(normalFont); // 应用字体到普通单元格样式

            // 写入表头信息
            string[] headers = {
            "FAI&CPK Data Sheet - Rev 06", "Unnamed: 1", "Unnamed: 2", "RoHS  HF",
            "Unnamed: 4", "Unnamed: 5", "Unnamed: 6", "Unnamed: 7",
            "Unnamed: 8", "Unnamed: 9", "Unnamed: 10", "Unnamed: 11",
            "Unnamed: 12", "Unnamed: 13", "Yiled<90%", "Unnamed: 15",
            "Unnamed: 16", "Unnamed: 17"
        };

            int rowIndex = 0;
            IRow headerRow = sheet.CreateRow(rowIndex++);

            for (int i = 0; i < headers.Length; i++)
            {
                ICell cell = headerRow.CreateCell(i);
                cell.SetCellValue(headers[i]);
                cell.CellStyle = headerCellStyle;
            }

            List<string> columnDistributions = new List<string>() { "Distribution Type" };
            for (int i = 0; i < columnCount; i++)
            {
                columnDistributions.Add("DoubleSides");
            }

            // 写入前几行的静态数据
            string[][] staticData = {
            new string[] { "Part Number :", ITEMNAME, null, null, "Revision :", "V1", "Supplier :", "Jiutai", null, "Inspector:", "张钰俊" },
            new string[] { "Part Description :", "PSA", null, null, null, null, "Cavity / Tool # :", null, "50709", "Date:", INSPECT_DATE },
            new string[] { "Request Process" },
            new string[] { "Dimension Description" },
            new string[] { "Comments" },
            new string[] { "Proposed +Tol" },
            new string[] { "Proposed -Tol" },
            new string[] { "Mean Shift Amount" },
            new string[] { "Changed Mean" },
            new string[] { "Proposed USL" },
            new string[] { "Proposed LSL" },
            new string[] { "Proposed Yield" },
            columnDistributions.ToArray(),
        };

            for (int i = 0; i < staticData.Length; i++)
            {
                IRow row = sheet.CreateRow(rowIndex++);
                for (int j = 0; j <= columnCount; j++)
                {
                    ICell cell = row.CreateCell(j);

                    if (j < staticData[i].Length)
                    {
                        if (staticData[i][j] != null)
                        {
                            cell.SetCellValue(staticData[i][j]);
                            cell.CellStyle = normalCellStyle;
                        }
                    }


                    // 如果是第 0 列，应用加粗样式
                    if (j == 0)
                    {
                        cell.CellStyle = boldCellStyle;
                    }
                    else
                    {
                        // 如果是 "Dimension" 部分，且不是第 0 列，设置淡绿色背景
                        if (i == 3)
                        {
                            cell.CellStyle = lightGreenCellStyle;
                        }
                        //4-11行背景色
                        else if (i > 3 && i <= 11)
                        {
                            cell.CellStyle = skyBlueCellStyle;
                        }
                        //12行背景色 Distribution Type 行
                        else if (i == 12)
                        {
                            cell.CellStyle = blueCenteredStyle;
                        }
                    }
                }
            }

            List<string> columnDimNos = new List<string>() { "Dim. No." };
            List<string> columnNominalDims = new List<string>() { "Nominal Dim." };
            List<string> columnDimModels = new List<string>() { "Dim Model" };
            List<string> columnTolMaxs = new List<string>() { "Tol. Max. (+)" };
            List<string> columnTolMins = new List<string>() { "Tol. Min. (-)" };
            foreach (var itemDs in listDataSet1)
            {
                foreach (DataColumn dc in itemDs.Tables[0].Columns)
                {
                    columnDimNos.Add(dc.ColumnName);
                }
                DataRow dr0 = itemDs.Tables[0].Rows[0];
                DataRow dr1 = itemDs.Tables[0].Rows[1];
                DataRow dr2 = itemDs.Tables[0].Rows[2];
                DataRow dr3 = itemDs.Tables[0].Rows[3];
                foreach (DataColumn dc in itemDs.Tables[0].Columns)
                {
                    columnNominalDims.Add(dr0[dc.ColumnName].ToString());
                    columnDimModels.Add(dr1[dc.ColumnName].ToString());
                    columnTolMaxs.Add(dr2[dc.ColumnName].ToString());
                    columnTolMins.Add(dr3[dc.ColumnName].ToString());
                }
            }

            // 写入 14 - 19 行的数据（DataTable1）
            string[][] dataTable1 = {
            columnDimNos.ToArray(),
            columnNominalDims.ToArray(),
            columnDimModels.ToArray(),
            columnTolMaxs.ToArray(),
            columnTolMins.ToArray(),
            };
            for (int i = 0; i < dataTable1.Length; i++)
            {
                IRow row = sheet.CreateRow(rowIndex++);
                for (int j = 0; j < dataTable1[i].Length; j++)
                {
                    ICell cell = row.CreateCell(j);
                    cell.SetCellValue(dataTable1[i][j]);
                    // 如果是第 0 列，应用加粗样式
                    if (j == 0)
                    {
                        cell.CellStyle = boldCellStyle;
                    }
                    // 非第 0 列，设置淡绿色背景+居中
                    else
                    {
                        cell.CellStyle = lightGreenCellStyle;
                    }
                }
            }
            List<string> columnUSLs = new List<string>() { "USL" };
            List<string> columnLSLs = new List<string>() { "LSL" };
            List<string> columnStdDevs = new List<string>() { "Std Dev" };
            List<string> columnMeans = new List<string>() { "Mean" };
            List<string> columnMaximums = new List<string>() { "Maximum" };
            List<string> columnMinimums = new List<string>() { "Minimum" };
            List<string> columnCps = new List<string>() { "Cp" };
            List<string> columnCpkls = new List<string>() { "Cpkl" };
            List<string> columnCpkus = new List<string>() { "Cpku" };
            List<string> columnCpks = new List<string>() { "Cpk" };
            List<string> columnProjectedYieldss = new List<string>() { "Projected Yields" };
            List<string> columnMeanDrifts = new List<string>() { "Mean Drift" };
            for (int i = 0; i < columnCount; i++)
            {
                columnUSLs.Add("");
                columnLSLs.Add("");
                columnStdDevs.Add("");
                columnMeans.Add("");
                columnMaximums.Add("");
                columnMinimums.Add("");
                columnCps.Add("");
                columnCpkls.Add("");
                columnCpkus.Add("");
                columnCpks.Add("");
                columnProjectedYieldss.Add("");
                columnMeanDrifts.Add("");
            }

            // 写入 20 - 31 行的公式
            string[][] formulasData = {
            columnUSLs.ToArray(),
            columnLSLs.ToArray(),
            columnStdDevs.ToArray(),
            columnMeans.ToArray(),
            columnMaximums.ToArray(),
            columnMinimums.ToArray(),
            columnCps.ToArray(),
            columnCpkls.ToArray(),
            columnCpkus.ToArray(),
            columnCpks.ToArray(),
            columnProjectedYieldss.ToArray(),
            columnMeanDrifts.ToArray(),
        };
            for (int i = 0; i < formulasData.Length; i++)
            {
                IRow row = sheet.CreateRow(rowIndex++);
                for (int j = 0; j < formulasData[i].Length; j++)
                {
                    ICell cell = row.CreateCell(j);
                    cell.SetCellValue(formulasData[i][j]);
                    // 如果是第 0 列，应用加粗样式
                    if (j == 0)
                    {
                        cell.CellStyle = boldCellStyle;
                    }
                    else
                    {
                        cell.CellStyle = normalCellStyle;
                    }

                }
            }
            // 假设的公式示例，你需要根据实际情况修改
            for (int col = 1; col < formulasData[0].Length; col++)
            {
                string colName = GetColumnName(col);
                // USL
                sheet.GetRow(19).GetCell(col).CellFormula = $"{colName}16+ABS({colName}18)";
                // LSL
                sheet.GetRow(20).GetCell(col).CellFormula = $"{colName}16-ABS({colName}19)";
                // Std Dev
                sheet.GetRow(21).GetCell(col).CellFormula = $"STDEV({colName}32:{colName}65194)";
                // Mean
                sheet.GetRow(22).GetCell(col).CellFormula = $"AVERAGE({colName}32:{colName}65194)";
                // Maximum
                sheet.GetRow(23).GetCell(col).CellFormula = $"MAX({colName}32:{colName}65194)";
                // Minimum
                sheet.GetRow(24).GetCell(col).CellFormula = $"MIN(({colName}20-{colName}23)/(3*{colName}22),({colName}23-{colName}21)/(3*{colName}22))";
                // Cp
                sheet.GetRow(25).GetCell(col).CellFormula = $"(({colName}20)-({colName}21))/(6*{colName}22)";
                // Cpkl
                sheet.GetRow(26).GetCell(col).CellFormula = $"({colName}23-{colName}21)/(3*{colName}22)";
                // Cpku
                sheet.GetRow(27).GetCell(col).CellFormula = $"({colName}20-{colName}23)/(3*{colName}22)";
                // Cpk
                sheet.GetRow(28).GetCell(col).CellFormula = $"MIN(({colName}20-{colName}23)/(3*{colName}22),({colName}23-{colName}21)/(3*{colName}22))";
                // Projected Yields
                sheet.GetRow(29).GetCell(col).CellFormula = $"IF({colName}14=\"DoubleSides\",NORMSDIST(({colName}20-{colName}23)/{colName}22)-NORMSDIST(({colName}21-{colName}23)/{colName}22),IF({colName}14=\"SingleSide-USL\",NORMSDIST(({colName}20-{colName}23)/{colName}22),IF({colName}14=\"SingleSide-LSL\",1-NORMSDIST((B21-B23)/B22),IF({colName}14=\"Actual Yield (n>=100)\",IF(COUNT({colName}32:{colName}65194)>=100,(COUNTIF({colName}32:{colName}65194,\"<=\"&B20)-COUNTIF({colName}32:{colName}65194,\"<\"&{colName}21))/COUNT({colName}32:{colName}65194),\"Too Few Records\"),\"Error\"))))";
                // Mean Drift
                sheet.GetRow(30).GetCell(col).CellFormula = $"{colName}23-({colName}20+{colName}21)/2";
            }

            for (int i = 0; i < formulasData.Length; i++)
            {
                IRow row = sheet.GetRow(i + 19);
                for (int j = 0; j < formulasData[i].Length; j++)
                {
                    ICell cell = row.GetCell(j);

                    if (j > 0)
                    {
                        if (i + 19 == 29)
                        {
                            cell.CellStyle = percentCellStyle;
                        }
                        else if ((i + 19) >= 20 && (i + 19) <= 23)
                        {
                            cell.CellStyle = number1CellStyle;
                        }
                        else if (i + 19 == 30)
                        {
                            cell.CellStyle = number1CellStyle;
                        }
                        else
                        {
                            cell.CellStyle = numberCellStyle;
                        }
                    }
                }
            }
            List<DataTable> tableList2 = new List<DataTable>();
            foreach (var itemDs in listDataSet1)
            {
                tableList2.Add(itemDs.Tables[1]);
            }

            DataTable dataTable2 = MergeTablesHorizontallyWithIndex(tableList2);
            // 写入 32 - 63 行的数据（DataTable2）
            for (int i = 0; i < dataTable2.Rows.Count; i++)
            {
                IRow row = sheet.CreateRow(rowIndex++);
                for (int j = 0; j < dataTable2.Columns.Count; j++)
                {
                    ICell cell = row.CreateCell(j);
                    double textValue = 0;
                    double.TryParse(dataTable2.Rows[i][j].ToString(), out textValue);
                    cell.SetCellValue(textValue);
                    if (j == 0)
                    {
                        cell.CellStyle = normal1CellStyle;
                    }
                    else
                    {
                        cell.CellStyle = numberCellStyle;
                    }
                }
            }

            // 写入表格内容后，设置列宽自适应 以13行的列数为准
            for (int i = 0; i < sheet.GetRow(13).LastCellNum; i++)
            {
                sheet.AutoSizeColumn(i); // 自适应列宽
            }

            byte[] fileContents;
            using (MemoryStream ms = new MemoryStream())
            {
                workbook.Write(ms);
                fileContents = ms.ToArray(); // 将流转换为 byte[]
            }

            return fileContents;
        }
        string GetColumnName(int columnNumber)
        {
            int dividend = columnNumber + 1;
            string columnName = "";
            int modulo;

            while (dividend > 0)
            {
                modulo = (dividend - 1) % 26;
                columnName = Convert.ToChar(65 + modulo).ToString() + columnName;
                dividend = (int)((dividend - modulo) / 26);
            }

            return columnName;
        }

        DataTable MergeTablesHorizontallyWithIndex(List<DataTable> tables)
        {
            if (tables == null || tables.Count == 0)
                throw new ArgumentException("列表为空");

            // 取所有表中最大行数
            int maxRowCount = tables.Max(t => t.Rows.Count);

            DataTable result = new DataTable();

            // 添加序号列
            result.Columns.Add("序号", typeof(int));

            // 添加其他列（带前缀避免重复）
            foreach (var table in tables)
            {
                foreach (DataColumn col in table.Columns)
                {
                    // 若有同名列，可加前缀防重复，如 $"{table.TableName}_{col.ColumnName}"
                    string columnName = col.ColumnName;
                    int suffix = 1;
                    while (result.Columns.Contains(columnName))
                        columnName = $"{col.ColumnName}_{suffix++}";

                    result.Columns.Add(columnName, col.DataType);
                }
            }

            // 添加数据
            for (int rowIndex = 0; rowIndex < maxRowCount; rowIndex++)
            {
                List<object> rowData = new List<object>();
                rowData.Add(rowIndex + 1); // 序号从 1 开始

                foreach (var table in tables)
                {
                    if (rowIndex < table.Rows.Count)
                    {
                        // 添加该行数据
                        rowData.AddRange(table.Rows[rowIndex].ItemArray);
                    }
                    else
                    {
                        // 添加与列数相同数量的空值
                        rowData.AddRange(Enumerable.Repeat(DBNull.Value, table.Columns.Count));
                    }
                }

                result.Rows.Add(rowData.ToArray());
            }

            return result;
        }

        private void SaveToCPKScanDoc(string docType, byte[] fileContents, string scandocName, string peopleId, string INSPECT_DEV2ID, string COLUM002ID)
        {
            FileInfo file = new FileInfo(scandocName);
            if (!file.Directory.Exists)
            {
                file.Directory.Create();
            }
            if (fileContents != null)
            {
                File.WriteAllBytes(scandocName, fileContents);
            }

            Db.Ado.ExecuteCommand($"DELETE SCANDOC WHERE INSPECT_DEV2ID='{INSPECT_DEV2ID}' AND COLUM002ID='{COLUM002ID}'");

            string sql = @"
            INSERT INTO SCANDOC (TENID, SCANDOCID, SCANDOCCODE, SCANDOCNAME, DOCTYPE, PEOPLEID, createdate, SCANDOC_user,INSPECT_DEV2ID,COLUM002ID)
            VALUES ('001', @SCANDOCID, @SCANDOCID, @SCANDOCNAME, @DOCTYPE, @PEOPLEID, CONVERT(VARCHAR(20), GETDATE(), 120), @PEOPLEID, @INSPECT_DEV2ID,@COLUM002ID)";

            // 定义参数
            var parameters = new SugarParameter[]
            {
                new SugarParameter("@SCANDOCID", Guid.NewGuid().ToString()),
                new SugarParameter("@SCANDOCNAME", scandocName.Replace(AppSettings.Configuration["AppSettings:FileServerPath"],@"\")),
                new SugarParameter("@DOCTYPE", docType),
                new SugarParameter("@PEOPLEID", peopleId),
                new SugarParameter("@INSPECT_DEV2ID", INSPECT_DEV2ID),
                new SugarParameter("@COLUM002ID", COLUM002ID)
            };

            // 执行 SQL 命令
            Db.Ado.ExecuteCommand(sql, parameters);
        }

        #endregion

        #region GetBatchCPKfile
        public void GetBatchCPKfile(CPKInputByCodeDto parm)
        {
            var dtINSPECT_DEVID = Db.Ado.GetDataTable(@$"SELECT INSPECT_DEV2ID FROM INSPECT_DEV2 WHERE DOC_CODE = '{parm.DOC_CODE}' AND INSPECT_DEV ='{parm.INSPECT_DEV}'");
            if (dtINSPECT_DEVID.Rows.Count == 0)
            {
                throw new Exception("没有找到任何记录.");
            }
            foreach (DataRow dataRow in dtINSPECT_DEVID.Rows)
            {
                string INSPECT_DEV2ID = dataRow["INSPECT_DEV2ID"].ToString();
                GetCPKfile(INSPECT_DEV2ID, parm.UserName);
            }
        }
        #endregion

        public void ReplaceRosh(FTIRInputDto parm)
        {
            var dtItem = Db.Ado.GetDataTable(@$"SELECT INSPECT_PROGRESS.INSPECT_PROGRESSID INSPECT_PROGRESSID
,INSPECT_PROGRESS.INSPECT_PROGRESSNAME INSPECT_PROGRESSNAME
,INSPECT_PROGRESS.INSPECT_CNT INSPECT_CNT
            ,INSPECT_VIEW.ITEMNAME ITEMNAME,INSPECT_VIEW.LOTNO LOTNO,INSPECT_VIEW.ITEMID ITEMID
            ,INSPECT_VIEW.INSPECT_DATE INSPECT_DATE
            FROM  INSPECT_PROGRESS 
            LEFT JOIN INSPECT_VIEW ON INSPECT_VIEW.INSPECT_VIEWID=INSPECT_PROGRESS.DOC_CODE
            WHERE INSPECT_DEV= 'INSPECT_DEV_003' AND DOC_CODE='" + parm.INSPECTCODE + @"' ");
            if (dtItem != null)
            {
                if (dtItem.Rows.Count > 0)
                {
                    foreach (DataRow dr in dtItem.Rows)
                    {
                        string INSPECT_PROGRESSID = dr["INSPECT_PROGRESSID"].ToString();
                        string INSPECT_PROGRESSNAME = dr["INSPECT_PROGRESSNAME"].ToString();
                        string INSPECT_CNT = dr["INSPECT_CNT"].ToString();
                        string ITEMID = dr["ITEMID"].ToString();
                        string INSPECT_DATE = dr["INSPECT_DATE"].ToString();  //2、	测试日期  6、	只改日期
                        string DOC_CODE = parm.INSPECTCODE;  //1、	报告单号
                        string ITEMNAME = dr["ITEMNAME"].ToString();  //5、	样品名称
                        string LOTID = dr["LOTNO"].ToString(); //4、	批次号
                        if (string.IsNullOrEmpty(INSPECT_CNT))
                            Db.Ado.ExecuteCommand(@" UPDATE INSPECT_PROGRESS SET ISREPORT='应检数量不能为空' where INSPECT_PROGRESSID='" + INSPECT_PROGRESSID + @"' ");
                        else if (string.IsNullOrEmpty(ITEMNAME))
                            Db.Ado.ExecuteCommand(@" UPDATE INSPECT_PROGRESS SET ISREPORT='物料名称不能为空' where INSPECT_PROGRESSID='" + INSPECT_PROGRESSID + @"' ");
                        else if (string.IsNullOrEmpty(LOTID))
                            Db.Ado.ExecuteCommand(@" UPDATE INSPECT_PROGRESS SET ISREPORT='批号不能为空' where INSPECT_PROGRESSID='" + INSPECT_PROGRESSID + @"' ");
                        else if (string.IsNullOrEmpty(ITEMID))
                            Db.Ado.ExecuteCommand(@" UPDATE INSPECT_PROGRESS SET ISREPORT='品号不能为空' where INSPECT_PROGRESSID='" + INSPECT_PROGRESSID + @"' ");
                        else
                        {
                            //产生随机值
                            Db.Ado.ExecuteCommand(@$"EXEC [GET_INSPECT_RANK] '{INSPECT_PROGRESSID}','{INSPECT_CNT}'");
                            //产生ROSH报告
                            //在此补代码
                            string tempFileDirPath = Path.Combine(AppSettings.Configuration["AppSettings:FileServerPath"], @"ROSH");
                            string tempFilePath = "";
                            // 检查目录是否存在
                            if (Directory.Exists(tempFileDirPath))
                            {
                                // 获取目录下所有XLSX文件
                                string[] xlsxFiles = Directory.GetFiles(tempFileDirPath, "*.xlsx");
                                // 检查是否有文件
                                if (xlsxFiles.Length > 0)
                                {
                                    // 创建随机数生成器
                                    Random random = new Random();
                                    // 随机选择一个索引
                                    int randomIndex = random.Next(0, xlsxFiles.Length);
                                    // 获取随机选择的文件路径
                                    tempFilePath = xlsxFiles[randomIndex];
                                }
                            }
                            var newFileName = $"{LOTID}_{DateTime.Now.ToString("yyyyMMddHHmmss")}.xlsx";
                            string filePath = Path.Combine(AppSettings.Configuration["AppSettings:FileServerPath"], @$"Test\ROSH\{LOTID}\{newFileName}");
                            FileInfo fi = new FileInfo(filePath);
                            if (!fi.Directory.Exists)
                            {
                                fi.Directory.Create();
                            }
                            File.Copy(tempFilePath, filePath, true);
                            using (ExcelHelper excelHelper = new ExcelHelper(filePath))
                            {
                                //单号
                                excelHelper.AddTextToCell("TestSheet", "H5", DOC_CODE);
                                //日期
                                excelHelper.AddTextToCell("TestSheet", "B6", INSPECT_DATE);
                                //供应商
                                excelHelper.AddTextToCell("TestSheet", "B7", "");
                                //批次号
                                excelHelper.AddTextToCell("TestSheet", "B8", LOTID);
                                //样品名称
                                excelHelper.AddTextToCell("TestSheet", "G8", ITEMNAME);

                                //A11-A16
                                excelHelper.AddTextToCell("TestSheet", "A11", INSPECT_DATE + ", 120.00S");
                                excelHelper.AddTextToCell("TestSheet", "A12", INSPECT_DATE + ", 120.00S");
                                excelHelper.AddTextToCell("TestSheet", "A13", INSPECT_DATE + ", 120.00S");
                                excelHelper.AddTextToCell("TestSheet", "A14", INSPECT_DATE + ", 120.00S");
                                excelHelper.AddTextToCell("TestSheet", "A15", INSPECT_DATE + ", 120.00S");
                                excelHelper.AddTextToCell("TestSheet", "A16", INSPECT_DATE + ", 120.00S");
                            }

                            //小电流在此转换png和pdf
                            string pngpath = filePath.Replace("xlsx", "png");
                            string pdfpath = filePath.Replace("xlsx", "pdf");



                            SaveRoshToScanDoc(INSPECT_PROGRESSNAME, filePath, parm.INSPECTCODE, INSPECT_PROGRESSID);
                            Db.Ado.ExecuteCommand(@" UPDATE INSPECT_PROGRESS SET ISREPORT='1' where INSPECT_PROGRESSID='" + INSPECT_PROGRESSID + @"' ");

                        }

                    }
                }

            }
        }

        public void ReplaceRosh_MS(FTIRInputDto parm)
        {
            var dtItem = Db.Ado.GetDataTable(@$"SELECT INSPECT_PROGRESS.INSPECT_PROGRESSID INSPECT_PROGRESSID
,INSPECT_PROGRESS.INSPECT_PROGRESSNAME INSPECT_PROGRESSNAME
,INSPECT_PROGRESS.INSPECT_CNT INSPECT_CNT
            ,INSPECT_VIEW.ITEMNAME ITEMNAME,INSPECT_VIEW.LOTNO LOTNO,INSPECT_VIEW.ITEMID ITEMID
            ,INSPECT_VIEW.INSPECT_DATE INSPECT_DATE
            FROM  INSPECT_PROGRESS 
            LEFT JOIN INSPECT_VIEW ON INSPECT_VIEW.INSPECT_VIEWID=INSPECT_PROGRESS.DOC_CODE
            WHERE INSPECT_DEV= 'INSPECT_DEV_003' AND DOC_CODE='" + parm.INSPECTCODE + @"' ");
            if (dtItem != null)
            {
                if (dtItem.Rows.Count > 0)
                {
                    foreach (DataRow dr in dtItem.Rows)
                    {
                        string INSPECT_PROGRESSID = dr["INSPECT_PROGRESSID"].ToString();
                        string INSPECT_PROGRESSNAME = dr["INSPECT_PROGRESSNAME"].ToString();
                        string INSPECT_CNT = dr["INSPECT_CNT"].ToString();
                        string ITEMID = dr["ITEMID"].ToString();
                        string INSPECT_DATE = dr["INSPECT_DATE"].ToString();  //2、	测试日期  6、	只改日期
                        string DOC_CODE = parm.INSPECTCODE;  //1、	报告单号
                        string ITEMNAME = dr["ITEMNAME"].ToString();  //5、	样品名称
                        string LOTID = dr["LOTNO"].ToString(); //4、	批次号
                        if (string.IsNullOrEmpty(INSPECT_CNT))
                            Db.Ado.ExecuteCommand(@" UPDATE INSPECT_PROGRESS SET ISREPORT='应检数量不能为空' where INSPECT_PROGRESSID='" + INSPECT_PROGRESSID + @"' ");
                        else if (string.IsNullOrEmpty(ITEMNAME))
                            Db.Ado.ExecuteCommand(@" UPDATE INSPECT_PROGRESS SET ISREPORT='物料名称不能为空' where INSPECT_PROGRESSID='" + INSPECT_PROGRESSID + @"' ");
                        else if (string.IsNullOrEmpty(LOTID))
                            Db.Ado.ExecuteCommand(@" UPDATE INSPECT_PROGRESS SET ISREPORT='批号不能为空' where INSPECT_PROGRESSID='" + INSPECT_PROGRESSID + @"' ");
                        else if (string.IsNullOrEmpty(ITEMID))
                            Db.Ado.ExecuteCommand(@" UPDATE INSPECT_PROGRESS SET ISREPORT='品号不能为空' where INSPECT_PROGRESSID='" + INSPECT_PROGRESSID + @"' ");
                        else
                        {
                            //产生随机值
                            Db.Ado.ExecuteCommand(@$"EXEC [GET_INSPECT_RANK] '{INSPECT_PROGRESSID}','{INSPECT_CNT}'");
                            //产生ROSH报告
                            string tempFileDirPath = Path.Combine(AppSettings.Configuration["AppSettings:FileServerPath"], @"ROSH");
                            string tempFilePath = "";
                            // 检查目录是否存在
                            if (Directory.Exists(tempFileDirPath))
                            {
                                // 获取目录下所有XLSX文件
                                string[] xlsxFiles = Directory.GetFiles(tempFileDirPath, "*.pdf");
                                // 检查是否有文件
                                if (xlsxFiles.Length > 0)
                                {
                                    // 创建随机数生成器
                                    Random random = new Random();
                                    // 随机选择一个索引
                                    int randomIndex = random.Next(0, xlsxFiles.Length);
                                    // 获取随机选择的文件路径
                                    tempFilePath = xlsxFiles[randomIndex];
                                }
                            }
                            var newFileName = $"{LOTID}_{DateTime.Now.ToString("yyyyMMddHHmmss")}.pdf";
                            string filePath = Path.Combine(AppSettings.Configuration["AppSettings:FileServerPath"], @$"Test\ROSH\{LOTID}\{newFileName}");
                            FileInfo fi = new FileInfo(filePath);
                            if (!fi.Directory.Exists)
                            {
                                fi.Directory.Create();
                            }
                            File.Copy(tempFilePath, filePath, true);

                            //小电流在此改代码
                            //修改PDF
                            var inputFile = tempFilePath;
                            string outputFile = filePath;

                            using (Document pdfDoc = new Document(inputFile)) {
                                string allPdfText = ExtractAllText(pdfDoc);

                                string replaceText = ITEMNAME;
                                // 提取样品名称 TESA58470_PE
                                var pattern = @"样品名称\s*[\r\n]+[ \t]*([^\r\n]+)";
                                var match = Regex.Match(allPdfText, pattern, RegexOptions.Singleline);
                                string searchText = match.Success ? match.Groups[1].Value.Trim() : "未找到";
                                ReplacePdfText(searchText, replaceText, pdfDoc);

                                // 提取测量日期
                                replaceText = DateTime.Now.ToString("yyyy/MM/dd HH:mm:ss");
                                pattern = @"\d{4}/\d{1,2}/\d{1,2}\s\d{1,2}:\d{1,2}:\d{1,2}";
                                match = Regex.Match(allPdfText, pattern, RegexOptions.Singleline);
                                searchText = match.Success ? match.Groups[0].Value.Trim() : "未找到";
                                ReplacePdfText(searchText, replaceText, pdfDoc);

                                FileInfo filePDF = new FileInfo(outputFile);
                                if (!filePDF.Directory.Exists) {
                                    filePDF.Directory.Create();
                                }
                                // 保存修改后的 PDF
                                pdfDoc.Save(outputFile);
                                try {
                                    //去水印
                                    string outputFileRemoveWarter = Path.Combine(AppSettings.Configuration["AppSettings:FileServerPath"], @$"Test\ROSH\{LOTID}\temp{newFileName}");
                                    ITextHelper.RemoveWatermark(outputFile, outputFileRemoveWarter);
                                    File.Copy(outputFileRemoveWarter, outputFile, true);
                                    File.Delete(outputFileRemoveWarter);
                                }
                                catch {
                                    //去水印失败，继续使用原文件
                                }
                            }

                            //小电流在此转换png和pdf
                            string pngpath = filePath.Replace("xlsx", "png");
                            string pdfpath = filePath.Replace("xlsx", "pdf");



                            SaveRoshToScanDoc(INSPECT_PROGRESSNAME, filePath, parm.INSPECTCODE, INSPECT_PROGRESSID);
                            Db.Ado.ExecuteCommand(@" UPDATE INSPECT_PROGRESS SET ISREPORT='1' where INSPECT_PROGRESSID='" + INSPECT_PROGRESSID + @"' ");

                        }

                    }
                }

            }
        }

        public void ReplaceSI_MS(FTIRInputDto parm)
        {
            var dtItem = Db.Ado.GetDataTable(@$"SELECT INSPECT_PROGRESS.INSPECT_PROGRESSID INSPECT_PROGRESSID
,INSPECT_PROGRESS.INSPECT_PROGRESSNAME INSPECT_PROGRESSNAME
,INSPECT_PROGRESS.INSPECT_CNT INSPECT_CNT
            ,INSPECT_VIEW.ITEMNAME ITEMNAME,INSPECT_VIEW.LOTNO LOTNO,INSPECT_VIEW.ITEMID ITEMID
            ,INSPECT_VIEW.INSPECT_DATE INSPECT_DATE
            FROM  INSPECT_PROGRESS 
            LEFT JOIN INSPECT_VIEW ON INSPECT_VIEW.INSPECT_VIEWID=INSPECT_PROGRESS.DOC_CODE
            WHERE INSPECT_DEV= 'INSPECT_DEV_009' AND DOC_CODE='" + parm.INSPECTCODE + @"' ");  //硅元素
            if (dtItem != null)
            {
                if (dtItem.Rows.Count > 0)
                {
                    foreach (DataRow dr in dtItem.Rows)
                    {
                        string INSPECT_PROGRESSID = dr["INSPECT_PROGRESSID"].ToString();
                        string INSPECT_PROGRESSNAME = dr["INSPECT_PROGRESSNAME"].ToString();
                        string INSPECT_CNT = dr["INSPECT_CNT"].ToString();
                        string ITEMID = dr["ITEMID"].ToString();
                        string INSPECT_DATE = dr["INSPECT_DATE"].ToString();  //2、	测试日期  6、	只改日期
                        string DOC_CODE = parm.INSPECTCODE;  //1、	报告单号
                        string ITEMNAME = dr["ITEMNAME"].ToString();  //5、	样品名称
                        string LOTID = dr["LOTNO"].ToString(); //4、	批次号
                        if (string.IsNullOrEmpty(INSPECT_CNT))
                            Db.Ado.ExecuteCommand(@" UPDATE INSPECT_PROGRESS SET ISREPORT='应检数量不能为空' where INSPECT_PROGRESSID='" + INSPECT_PROGRESSID + @"' ");
                        else if (string.IsNullOrEmpty(ITEMNAME))
                            Db.Ado.ExecuteCommand(@" UPDATE INSPECT_PROGRESS SET ISREPORT='物料名称不能为空' where INSPECT_PROGRESSID='" + INSPECT_PROGRESSID + @"' ");
                        else if (string.IsNullOrEmpty(LOTID))
                            Db.Ado.ExecuteCommand(@" UPDATE INSPECT_PROGRESS SET ISREPORT='批号不能为空' where INSPECT_PROGRESSID='" + INSPECT_PROGRESSID + @"' ");
                        else if (string.IsNullOrEmpty(ITEMID))
                            Db.Ado.ExecuteCommand(@" UPDATE INSPECT_PROGRESS SET ISREPORT='品号不能为空' where INSPECT_PROGRESSID='" + INSPECT_PROGRESSID + @"' ");
                        else
                        {
                            //产生随机值
                            Db.Ado.ExecuteCommand(@$"EXEC [GET_INSPECT_RANK] '{INSPECT_PROGRESSID}','{INSPECT_CNT}'");
                            //产生ROSH报告
                           
                            string tempFileDirPath = Path.Combine(AppSettings.Configuration["AppSettings:FileServerPath"], @"SI");
                            string tempFilePath = "";
                            // 检查目录是否存在
                            if (Directory.Exists(tempFileDirPath))
                            {
                                // 获取目录下所有XLSX文件
                                string[] xlsxFiles = Directory.GetFiles(tempFileDirPath, "*.pdf");
                                // 检查是否有文件
                                if (xlsxFiles.Length > 0)
                                {
                                    // 创建随机数生成器
                                    Random random = new Random();
                                    // 随机选择一个索引
                                    int randomIndex = random.Next(0, xlsxFiles.Length);
                                    // 获取随机选择的文件路径
                                    tempFilePath = xlsxFiles[randomIndex];
                                }
                            }
                            var newFileName = $"{LOTID}_{DateTime.Now.ToString("yyyyMMddHHmmss")}.pdf";
                            string filePath = Path.Combine(AppSettings.Configuration["AppSettings:FileServerPath"], @$"Test\SI\{LOTID}\{newFileName}");
                            FileInfo fi = new FileInfo(filePath);
                            if (!fi.Directory.Exists)
                            {
                                fi.Directory.Create();
                            }
                            File.Copy(tempFilePath, filePath, true);
                            //小电流在此改代码
                            //修改PDF
                            var inputFile = tempFilePath;
                            string outputFile = filePath;
                            using (Document pdfDoc = new Document(inputFile)) {
                                string allPdfText = ExtractAllText(pdfDoc);

                                //小电流在此改代码 修改pdf
                                string searchText = ExtractTextRightOfKeyword(allPdfText, "苏州淼昇电子有限公司");
                                string replaceText = DateTime.Now.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture);
                                ReplacePdfText(searchText, replaceText, pdfDoc);

                                searchText = ExtractTextRightOfKeyword(allPdfText, "样品名称：");
                                replaceText = string.Format("{0}-{1}",ITEMNAME, LOTID);
                                ReplacePdfText(searchText, replaceText, pdfDoc);

                                searchText = ExtractTextRightOfKeyword(allPdfText, "测试时间：");
                                replaceText = DateTime.Now.ToString("HH:mm:ss", CultureInfo.InvariantCulture);
                                ReplacePdfText(searchText, replaceText, pdfDoc);

                                FileInfo filePDF = new FileInfo(outputFile);
                                if (!filePDF.Directory.Exists) {
                                    filePDF.Directory.Create();
                                }
                                // 保存修改后的 PDF
                                pdfDoc.Save(outputFile);
                                try {
                                    //去水印
                                    string outputFileRemoveWarter = Path.Combine(AppSettings.Configuration["AppSettings:FileServerPath"], @$"Test\SI\{LOTID}\temp{newFileName}");
                                    ITextHelper.RemoveWatermark(outputFile, outputFileRemoveWarter);
                                    File.Copy(outputFileRemoveWarter, outputFile, true);
                                    File.Delete(outputFileRemoveWarter);
                                }
                                catch {
                                    //去水印失败，继续使用原文件
                                }
                            }

                            //小电流在此转换png和pdf
                            string pngpath = filePath.Replace("xlsx", "png");
                            string pdfpath = filePath.Replace("xlsx", "pdf");

                            SaveRoshToScanDoc(INSPECT_PROGRESSNAME, filePath, parm.INSPECTCODE, INSPECT_PROGRESSID);
                            Db.Ado.ExecuteCommand(@" UPDATE INSPECT_PROGRESS SET ISREPORT='1' where INSPECT_PROGRESSID='" + INSPECT_PROGRESSID + @"' ");

                        }

                    }
                }

            }
        }

        #region xujie ReplaceFTIRPdf 
        public void ReplaceFTIRPdf(FTIRInputDto parm)
        {
            var dtItem = Db.Ado.GetDataTable(@$"SELECT INSPECT_PROGRESS.INSPECT_PROGRESSID INSPECT_PROGRESSID
            ,INSPECT_PROGRESS.INSPECT_PROGRESSNAME INSPECT_PROGRESSNAME
            ,INSPECT_PROGRESS.INSPECT_CNT INSPECT_CNT
            ,(CASE WHEN INSPECT_VIEW.INSPECT_TYPE='OQC' THEN INSPECT_PROGRESS.ITEMNAME ELSE INSPECT_VIEW.ITEMNAME END) ITEMNAME
            ,(CASE WHEN INSPECT_VIEW.INSPECT_TYPE='OQC' THEN INSPECT_PROGRESS.LOTNO ELSE INSPECT_VIEW.LOTNO END) LOTNO
            ,INSPECT_VIEW.ITEMID ITEMID
            ,INSPECT_VIEW.INSPECT_DATE INSPECT_DATE
            FROM  INSPECT_PROGRESS 
            LEFT JOIN INSPECT_VIEW ON INSPECT_VIEW.INSPECT_VIEWID=INSPECT_PROGRESS.DOC_CODE
            WHERE INSPECT_DEV= 'INSPECT_DEV_004' AND DOC_CODE='" + parm.INSPECTCODE + @"' ");
            if (dtItem != null)
            {
                if (dtItem.Rows.Count > 0)
                {
                    foreach (DataRow dr in dtItem.Rows)
                    {
                        string INSPECT_PROGRESSID = dr["INSPECT_PROGRESSID"].ToString();
                        string INSPECT_PROGRESSNAME = dr["INSPECT_PROGRESSNAME"].ToString();
                        string INSPECT_CNT = dr["INSPECT_CNT"].ToString();
                        string ITEMID = dr["ITEMID"].ToString();
                        string INSPECT_DATE = dr["INSPECT_DATE"].ToString();

                        string ITEMNAME = dr["ITEMNAME"].ToString();
                        string LOTID = dr["LOTNO"].ToString();
                        if (string.IsNullOrEmpty(INSPECT_CNT))
                            Db.Ado.ExecuteCommand(@" UPDATE INSPECT_PROGRESS SET ISREPORT='应检数量不能为空' where INSPECT_PROGRESSID='" + INSPECT_PROGRESSID + @"' ");
                        else if (string.IsNullOrEmpty(ITEMNAME))
                            Db.Ado.ExecuteCommand(@" UPDATE INSPECT_PROGRESS SET ISREPORT='物料名称不能为空' where INSPECT_PROGRESSID='" + INSPECT_PROGRESSID + @"' ");
                        else if (string.IsNullOrEmpty(LOTID))
                            Db.Ado.ExecuteCommand(@" UPDATE INSPECT_PROGRESS SET ISREPORT='批号不能为空' where INSPECT_PROGRESSID='" + INSPECT_PROGRESSID + @"' ");
                        else if (string.IsNullOrEmpty(ITEMID))
                            Db.Ado.ExecuteCommand(@" UPDATE INSPECT_PROGRESS SET ISREPORT='品号不能为空' where INSPECT_PROGRESSID='" + INSPECT_PROGRESSID + @"' ");
                        else
                        {
                            //产生随机值
                            Db.Ado.ExecuteCommand(@$"EXEC [GET_INSPECT_RANK] '{INSPECT_PROGRESSID}','{INSPECT_CNT}'");
                            var dtRank = Db.Ado.GetDataTable(@$"SELECT * FROM  INSPECT_PROGRESS  WHERE INSPECT_PROGRESSID= '{INSPECT_PROGRESSID}' ");
                            foreach (DataRow drRank in dtRank.Rows)
                            {
                                // 循环应检数
                                for (int colIndex = 1; colIndex < int.Parse(INSPECT_CNT) + 1; colIndex++)
                                {
                                    string COLUMN001CODE = "A" + colIndex;  //
                                    string RANKVALUE = drRank[COLUMN001CODE].ToString();
                                    if (string.IsNullOrEmpty(COLUMN001CODE))
                                        continue;
                                    if (string.IsNullOrEmpty(RANKVALUE))
                                        continue;
                                    //在存储FTIR报告路径下，按文件夹名称=物料名称（ITEMNAME）查询，随机从中取一份报告图表
                                    string inputFile = GetRandomFTIRReport(ITEMNAME);
                                    //返回文件流
                                    var fileName = $"{ITEMID}_{LOTID}_{COLUMN001CODE}_{DateTime.Parse(INSPECT_DATE).ToString("yyyyMMddHHmmss")}.pdf";
                                    string outputFile = Path.Combine(AppSettings.Configuration["AppSettings:FileServerPath"], @$"Test\FTIR\{ITEMID}\{fileName}");

                                    Document pdfDoc = new Document(inputFile);
                                    string allPdfText = ExtractAllText(pdfDoc);

                                    string searchText = ExtractTextRightOfKeyword(allPdfText, "质量检查结果:");
                                    string replaceText = ITEMNAME + "标准样";
                                    ReplacePdfText(searchText, replaceText, pdfDoc);

                                    searchText = ExtractTextRightOfKeyword(allPdfText, "相关:");
                                    replaceText = RANKVALUE;
                                    ReplacePdfText(searchText, replaceText, pdfDoc);

                                    searchText = ExtractTextRightOfKeyword(allPdfText, "光谱 2 标题:");
                                    replaceText = $"#JT+{parm.UserName}{ITEMNAME}&{LOTID}&{parm.UserName}&{DateTime.Parse(INSPECT_DATE).ToString("yyyyMMdd")}&{LOTID}";
                                    ReplacePdfText(searchText, replaceText, pdfDoc);

                                    searchText = ExtractTextRightOfKeyword(allPdfText, "日期:");
                                    replaceText = ConvertToCustomDateFormat(GenerateRandomWorkTime(DateTime.Parse(INSPECT_DATE)));
                                    ReplacePdfText(searchText, replaceText, pdfDoc);

                                    FileInfo filePDF = new FileInfo(outputFile);
                                    if (!filePDF.Directory.Exists)
                                    {
                                        filePDF.Directory.Create();
                                    }
                                    // 保存修改后的 PDF
                                    pdfDoc.Save(outputFile);
                                    try
                                    {
                                        //去水印
                                        string outputFileRemoveWarter = Path.Combine(AppSettings.Configuration["AppSettings:FileServerPath"], @$"Test\FTIR\{ITEMID}\temp{fileName}");
                                        ITextHelper.RemoveWatermark(outputFile, outputFileRemoveWarter);
                                        File.Copy(outputFileRemoveWarter, outputFile, true);
                                        File.Delete(outputFileRemoveWarter);
                                    }
                                    catch
                                    {
                                        //去水印失败，继续使用原文件
                                    }
                                    //保存到SCANDOC
                                    SavePDFToScanDoc(INSPECT_PROGRESSNAME, outputFile, parm.INSPECTCODE, INSPECT_PROGRESSID, colIndex.ToString());
                                    Db.Ado.ExecuteCommand(@" UPDATE INSPECT_PROGRESS SET ISREPORT='1' where INSPECT_PROGRESSID='" + INSPECT_PROGRESSID + @"' ");
                                }
                            }
                        }

                    }
                }

            }

        }
        public void ReplaceFTIRPdf_MS(FTIRInputDto parm)
        {
            var dtItem = Db.Ado.GetDataTable(@$"SELECT INSPECT_PROGRESS.INSPECT_PROGRESSID INSPECT_PROGRESSID
            ,INSPECT_PROGRESS.INSPECT_PROGRESSNAME INSPECT_PROGRESSNAME
            ,INSPECT_PROGRESS.INSPECT_CNT INSPECT_CNT
            ,(CASE WHEN INSPECT_VIEW.INSPECT_TYPE='OQC' THEN INSPECT_PROGRESS.ITEMNAME ELSE INSPECT_VIEW.ITEMNAME END) ITEMNAME
            ,(CASE WHEN INSPECT_VIEW.INSPECT_TYPE='OQC' THEN INSPECT_PROGRESS.LOTNO ELSE INSPECT_VIEW.LOTNO END) LOTNO
            ,INSPECT_VIEW.ITEMID ITEMID
            ,INSPECT_VIEW.INSPECT_DATE INSPECT_DATE
            FROM  INSPECT_PROGRESS 
            LEFT JOIN INSPECT_VIEW ON INSPECT_VIEW.INSPECT_VIEWID=INSPECT_PROGRESS.DOC_CODE
            WHERE INSPECT_DEV= 'INSPECT_DEV_004' AND DOC_CODE='" + parm.INSPECTCODE + @"' ");
            if (dtItem != null)
            {
                if (dtItem.Rows.Count > 0)
                {
                    foreach (DataRow dr in dtItem.Rows)
                    {
                        string INSPECT_PROGRESSID = dr["INSPECT_PROGRESSID"].ToString();
                        string INSPECT_PROGRESSNAME = dr["INSPECT_PROGRESSNAME"].ToString();
                        string INSPECT_CNT = dr["INSPECT_CNT"].ToString();
                        string ITEMID = dr["ITEMID"].ToString();
                        string INSPECT_DATE = dr["INSPECT_DATE"].ToString();

                        string ITEMNAME = dr["ITEMNAME"].ToString();
                        string LOTID = dr["LOTNO"].ToString();
                        if (string.IsNullOrEmpty(INSPECT_CNT))
                            Db.Ado.ExecuteCommand(@" UPDATE INSPECT_PROGRESS SET ISREPORT='应检数量不能为空' where INSPECT_PROGRESSID='" + INSPECT_PROGRESSID + @"' ");
                        else if (string.IsNullOrEmpty(ITEMNAME))
                            Db.Ado.ExecuteCommand(@" UPDATE INSPECT_PROGRESS SET ISREPORT='物料名称不能为空' where INSPECT_PROGRESSID='" + INSPECT_PROGRESSID + @"' ");
                        else if (string.IsNullOrEmpty(LOTID))
                            Db.Ado.ExecuteCommand(@" UPDATE INSPECT_PROGRESS SET ISREPORT='批号不能为空' where INSPECT_PROGRESSID='" + INSPECT_PROGRESSID + @"' ");
                        else if (string.IsNullOrEmpty(ITEMID))
                            Db.Ado.ExecuteCommand(@" UPDATE INSPECT_PROGRESS SET ISREPORT='品号不能为空' where INSPECT_PROGRESSID='" + INSPECT_PROGRESSID + @"' ");
                        else
                        {
                            //产生随机值
                            Db.Ado.ExecuteCommand(@$"EXEC [GET_INSPECT_RANK] '{INSPECT_PROGRESSID}','{INSPECT_CNT}'");
                            var dtRank = Db.Ado.GetDataTable(@$"SELECT * FROM  INSPECT_PROGRESS  WHERE INSPECT_PROGRESSID= '{INSPECT_PROGRESSID}' ");
                            foreach (DataRow drRank in dtRank.Rows)
                            {
                                // 循环应检数
                               
                                for (int colIndex = 1; colIndex < int.Parse(INSPECT_CNT) + 1; colIndex++)
                                {
                                    string COLUMN001CODE = "A" + colIndex;  //
                                    string RANKVALUE = drRank[COLUMN001CODE].ToString();
                                    if (string.IsNullOrEmpty(COLUMN001CODE))
                                        continue;
                                    if (string.IsNullOrEmpty(RANKVALUE))
                                        continue;
                                    //在存储FTIR报告路径下，按文件夹名称=物料名称（ITEMNAME）查询，随机从中取一份报告图表
                                    string inputFile = GetRandomFTIRReport(ITEMNAME);
                                    //返回文件流
                                    var fileName = $"{ITEMID}_{LOTID}_{COLUMN001CODE}_{DateTime.Parse(INSPECT_DATE).ToString("yyyyMMddHHmmss")}.pdf";
                                    string outputFile = Path.Combine(AppSettings.Configuration["AppSettings:FileServerPath"], @$"Test\FTIR\{ITEMID}\{fileName}");

                                    Document pdfDoc = new Document(inputFile);
                                    string allPdfText = ExtractAllText(pdfDoc);

                                    //小电流在此改代码 修改pdf
                                    string searchText = ExtractTextRightOfKeyword(allPdfText, "Spectrum:");
                                    string replaceText = string.Format("{0} {1} {2}", ITEMNAME,LOTID, colIndex);
                                    ReplacePdfText(searchText, replaceText, pdfDoc);

                                    string searchTextEx = searchText.Split(' ')[0];
                                    replaceText = ITEMNAME;
                                    ReplacePdfText(searchTextEx, replaceText, pdfDoc);

                                    searchText = ExtractTextRightOfKeyword(allPdfText, "Match:");
                                    replaceText = RANKVALUE.ToString();
                                    ReplacePdfText(searchText, replaceText, pdfDoc);

                                    // 提取测量日期  Mon Apr 07 14:46:47 2025
                                    replaceText = DateTime.Now.ToString("ddd MMM dd HH:mm:ss yyyy", CultureInfo.InvariantCulture);
                                    var pattern = @"[A-Z][a-z]{2}\s[A-Z][a-z]{2}\s\d{2}\s\d{2}:\d{2}:\d{2}\s\d{4}";
                                    var match = Regex.Match(allPdfText, pattern, RegexOptions.Singleline);
                                    searchText = match.Success ? match.Groups[0].Value.Trim() : "未找到";
                                    ReplacePdfText(searchText, replaceText, pdfDoc);

                                    FileInfo filePDF = new FileInfo(outputFile);
                                    if (!filePDF.Directory.Exists)
                                    {
                                        filePDF.Directory.Create();
                                    }
                                    // 保存修改后的 PDF
                                    pdfDoc.Save(outputFile);
                                    try
                                    {
                                        //去水印
                                        string outputFileRemoveWarter = Path.Combine(AppSettings.Configuration["AppSettings:FileServerPath"], @$"Test\FTIR\{ITEMID}\temp{fileName}");
                                        ITextHelper.RemoveWatermark(outputFile, outputFileRemoveWarter);
                                        File.Copy(outputFileRemoveWarter, outputFile, true);
                                        File.Delete(outputFileRemoveWarter);
                                    }
                                    catch
                                    {
                                        //去水印失败，继续使用原文件
                                    }
                                    //保存到SCANDOC
                                    SavePDFToScanDoc(INSPECT_PROGRESSNAME, outputFile, parm.INSPECTCODE, INSPECT_PROGRESSID, colIndex.ToString());
                                    Db.Ado.ExecuteCommand(@" UPDATE INSPECT_PROGRESS SET ISREPORT='1' where INSPECT_PROGRESSID='" + INSPECT_PROGRESSID + @"' ");
                                }
                            }
                        }

                    }
                }

            }

        }
        private DateTime GenerateRandomWorkTime(DateTime date)
        {
            // 定义工作时间段：08:10:00 到 16:50:00
            DateTime workStart = new DateTime(date.Year, date.Month, date.Day, 8, 10, 0); // 08:10
            DateTime workEnd = new DateTime(date.Year, date.Month, date.Day, 16, 50, 0); // 16:50

            // 获取工作时间段的总秒数
            Random rand = new Random();
            double totalSeconds = (workEnd - workStart).TotalSeconds;

            // 在工作时间段内生成随机秒数
            double randomSeconds = rand.NextDouble() * totalSeconds;

            // 计算随机的日期时间
            DateTime randomDateTime = workStart.AddSeconds(randomSeconds);

            return randomDateTime;
        }

        private string ConvertToCustomDateFormat(DateTime dateTime)
        {
            // 获取北京时间（GMT+08:00）
            TimeZoneInfo chinaTimeZone = TimeZoneInfo.FindSystemTimeZoneById("China Standard Time");
            DateTime chinaTime = TimeZoneInfo.ConvertTime(dateTime, chinaTimeZone);

            // 格式化为所需的日期字符串
            string formattedDate = chinaTime.ToString("dddd dd MMM HH:mm:ss yyyy (GMT+08:00)", new CultureInfo("zh-CN"));

            return formattedDate;
        }
        private string ExtractAllText(Document pdfDoc)
        {
            // 创建一个文本吸收器（抓取所有文本）
            TextAbsorber textAbsorber = new TextAbsorber();

            // 让吸收器访问所有页面
            pdfDoc.Pages.Accept(textAbsorber);

            // 返回提取的文本
            return textAbsorber.Text;
        }

        private string ExtractTextRightOfKeyword(string allText, string keyword)
        {
            if (string.IsNullOrEmpty(allText) || string.IsNullOrEmpty(keyword))
                return "文本或关键字为空";

            // 按行拆分
            var lines = allText.Split(new[] { "\r\n", "\n" }, StringSplitOptions.RemoveEmptyEntries);

            foreach (var line in lines)
            {
                int index = line.IndexOf(keyword);
                if (index != -1)
                {
                    // 提取该行中关键词右边的文本
                    int startIndex = index + keyword.Length;
                    if (startIndex >= line.Length)
                        return "关键字后无内容";

                    return line.Substring(startIndex).Trim();
                }
            }

            return $"未找到关键字：{keyword}";
        }

        private void ReplacePdfText(string searchText, string replaceText, Document pdfDoc)
        {
            // 创建文本搜索器
            TextFragmentAbsorber absorber = new TextFragmentAbsorber(searchText);
            pdfDoc.Pages.Accept(absorber);

            // 遍历找到的文本片段并替换
            foreach (TextFragment fragment in absorber.TextFragments)
            {
                // 读取原来的字体
                Aspose.Pdf.Text.Font originalFont = FontRepository.FindFont("SimSun");// fragment.TextState.Font;
                float originalSize = fragment.TextState.FontSize;
                Aspose.Pdf.Color originalColor = fragment.TextState.ForegroundColor;
                // 替换文本
                fragment.Text = replaceText;

                // 保持原字体、大小、颜色
                fragment.TextState.Font = originalFont;
                fragment.TextState.FontSize = originalSize;
                fragment.TextState.ForegroundColor = originalColor;
            }

        }
        private string GetRandomFTIRReport(string itemName)
        {
            string basePath = Path.Combine(AppSettings.Configuration["AppSettings:FileServerPath"], "FTIR");

            if (!Directory.Exists(basePath))
                throw new Exception("FTIR目录不存在");

            // 查找匹配的目录（名称 = itemName）
            var targetDirs = Directory.GetDirectories(basePath, "*", SearchOption.TopDirectoryOnly)
                                      .Where(dir => Path.GetFileName(dir).Equals(itemName, StringComparison.OrdinalIgnoreCase))
                                      .ToList();

            if (!targetDirs.Any())
                throw new Exception($"未找到与物料名称 {itemName} 匹配的文件夹");

            // 搜索所有子目录中的 PDF 文件
            var pdfFiles = Directory.GetFiles(targetDirs.First(), "*.pdf", SearchOption.AllDirectories);

            if (pdfFiles.Length == 0)
                throw new Exception($"未在物料 {itemName} 文件夹下找到PDF报告");

            // 随机选取一个 PDF 文件
            Random rand = new Random();
            string selectedPdf = pdfFiles[rand.Next(pdfFiles.Length)];

            return selectedPdf;
        }
        private void SavePDFToScanDoc(string docType, string scandocName, string peopleId, string INSPECT_PROGRESSID, string COLUM001ID)
        {

            FileInfo file = new FileInfo(scandocName);
            if (!file.Directory.Exists)
            {
                file.Directory.Create();
            }

            string sql = @"
            IF EXISTS(SELECT 1 FROM SCANDOC WHERE PEOPLEID=@PEOPLEID AND INSPECT_PROGRESSID=@INSPECT_PROGRESSID AND COLUM001ID=@COLUM001ID )
                UPDATE SCANDOC SET SCANDOCNAME=@SCANDOCNAME WHERE PEOPLEID=@PEOPLEID AND INSPECT_PROGRESSID=@INSPECT_PROGRESSID AND COLUM001ID=@COLUM001ID 
            ELSE
                INSERT INTO SCANDOC (TENID, SCANDOCID, SCANDOCCODE, SCANDOCNAME, DOCTYPE, PEOPLEID, createdate, SCANDOC_user,COLUM001ID)
                VALUES ('001', @SCANDOCID, @SCANDOCID, @SCANDOCNAME, @DOCTYPE+'-'+@COLUM001ID, @PEOPLEID, CONVERT(VARCHAR(20), GETDATE(), 120), @PEOPLEID, @COLUM001ID)";

            // 定义参数
            var parameters = new SugarParameter[]
            {
                new SugarParameter("@SCANDOCID", Guid.NewGuid().ToString()),
                new SugarParameter("@SCANDOCNAME", scandocName.Replace(AppSettings.Configuration["AppSettings:FileServerPath"],@"\")),
                new SugarParameter("@DOCTYPE", docType),
                new SugarParameter("@PEOPLEID", peopleId),
                new SugarParameter("@INSPECT_PROGRESSID",INSPECT_PROGRESSID),
                new SugarParameter("@COLUM001ID",COLUM001ID)
            };

            // 执行 SQL 命令
            Db.Ado.ExecuteCommand(sql, parameters);
        }
        private void SaveRoshToScanDoc(string docType, string scandocName, string peopleId, string INSPECT_PROGRESSID)
        {

            string sql = @"
            IF EXISTS(SELECT 1 FROM SCANDOC WHERE PEOPLEID=@PEOPLEID AND INSPECT_PROGRESSID=@INSPECT_PROGRESSID )
                UPDATE SCANDOC SET SCANDOCNAME=@SCANDOCNAME WHERE PEOPLEID=@PEOPLEID AND INSPECT_PROGRESSID=@INSPECT_PROGRESSID  
            ELSE
                INSERT INTO SCANDOC (TENID, SCANDOCID, SCANDOCCODE, SCANDOCNAME, DOCTYPE, PEOPLEID, createdate, SCANDOC_user)
                VALUES ('001', @SCANDOCID, @SCANDOCID, @SCANDOCNAME, @DOCTYPE, @PEOPLEID, CONVERT(VARCHAR(20), GETDATE(), 120), @PEOPLEID)";

            // 定义参数
            var parameters = new SugarParameter[]
            {
                new SugarParameter("@SCANDOCID", Guid.NewGuid().ToString()),
                new SugarParameter("@SCANDOCNAME", scandocName.Replace(AppSettings.Configuration["AppSettings:FileServerPath"],@"\")),
                new SugarParameter("@DOCTYPE", docType),
                new SugarParameter("@PEOPLEID", peopleId),
                new SugarParameter("@INSPECT_PROGRESSID",INSPECT_PROGRESSID),

            };

            // 执行 SQL 命令
            Db.Ado.ExecuteCommand(sql, parameters);
        }
        
        #endregion

        #region GetCOCfile
        public void GetCOCfile(COCInputDto parm){
            string COCID = parm.COCID;
            string[] FIX_VALUE = parm.FIX_VALUE;
            string ID = parm.ID;
            //通过COCID获取模版
            string fileName = Db.Ado.GetString($@"select FILENAME from COC where COCID='{COCID}'");
            string cocName = Db.Ado.GetString($@"select COCNAME from COC where COCID='{COCID}'");
            if (string.IsNullOrEmpty(fileName)) {
                throw new Exception($"COCID[{parm.COCID}]在数据库中找不到模版文件!");
            }
            string filePath = Path.Combine(AppSettings.Configuration["AppSettings:FileServerPath"], @$"OQCTEMPLATE\{fileName}");
            if (!File.Exists(filePath)) {
                throw new Exception($"COCID[{parm.COCID}]在数据库中模版文件不存在!FILENAME:[{filePath}]");
            }
            DataSet ds = GetCOCDataSource(parm);
            Dictionary<string,DataTable> dicDataSource = new Dictionary<string,DataTable>();
            foreach (DataTable dt in ds.Tables) {
                if (!dicDataSource.ContainsKey(dt.TableName)) {
                    dicDataSource.Add(dt.TableName, dt);
                }
            }

            DataTable dtZoneIDs = Db.Ado.GetDataTable($@"SELECT COC_ZONE.COC_ZONEID, CELLS
FROM COC_ZONE_D
LEFT JOIN COC_ZONE ON COC_ZONE.COC_ZONEID=COC_ZONE_D.COC_ZONEID
where COC_ZONE.COCID='{parm.COCID}' 
ORDER BY 
  -- 提取字母部分（兼容A/AA格式）
  LEFT(CELLS, PATINDEX('%[0-9]%', CELLS) - 1), 
  -- 提取数字部分
  CAST(SUBSTRING(CELLS, PATINDEX('%[0-9]%', CELLS), LEN(CELLS)) AS INT)");

            List<string> listZoneIDs = new List<string>();
            foreach (DataRow row in dtZoneIDs.AsEnumerable().Reverse()) {
                string zoneID = row["COC_ZONEID"]?.ToString();
                if (!string.IsNullOrEmpty(zoneID))
                {
                    // 当且仅当未添加过时插入列表
                    if (!listZoneIDs.Contains(zoneID)) {
                        listZoneIDs.Add(zoneID);
                    }
                }
            }

            string newFile = FillExcelFileContent(filePath, cocName, listZoneIDs, dicDataSource, parm);

            //保存到SCANDOC
            SaveCOCToScanDoc("COC报告", newFile, parm);
        }

        private string FillExcelFileContent(string tempFilePath, string tempFileName, List<string> listZoneIDs, Dictionary<string, DataTable> dicDataSource, COCInputDto parm) {
            var newFileName = $"{tempFileName}_{DateTime.Now.ToString("yyyyMMddHHmmss")}.xlsx";
            string filePath = Path.Combine(AppSettings.Configuration["AppSettings:FileServerPath"], @$"Test\COC\{parm.COCID}\{parm.ID}\{newFileName}");
            FileInfo fi = new FileInfo(filePath);
            if (!fi.Directory.Exists) {
                fi.Directory.Create();
            }
            File.Copy(tempFilePath, filePath, true);
            using (ExcelHelper excelHelper = new ExcelHelper(filePath)) {
                //向Excel里面填充数据
                List<DataTable> listZoneData001 = new List<DataTable>();
                List<DataTable> listZoneData002 = new List<DataTable>();
                List<DataTable> listZoneData003 = new List<DataTable>();
                foreach (string zoneID in listZoneIDs) {
                    DataTable dtZONE = Db.Ado.GetDataTable($@"select * from COC_ZONE where COC_ZONEID='{zoneID}'");
                    string ZONE_TYPE = dtZONE.Rows[0]["ZONE_TYPE"].ToString();
                    string VLOOK = dtZONE.Rows[0]["VLOOK"].ToString();
                    if (ZONE_TYPE == "ZONE_TYPE_001") {//通用区域
                        listZoneData001.Add(dtZONE);
                    }
                    else if (ZONE_TYPE == "ZONE_TYPE_002") {//循环区域
                        if (VLOOK == "VLOOK_001") {//向下循环
                            listZoneData003.Add(dtZONE);
                        }
                        else if (VLOOK == "VLOOK_002") {//向右循环
                            listZoneData002.Add(dtZONE);
                        }
                    }
                }
                //先通用区域
                foreach (DataTable dtZONE in listZoneData001) {
                    string COC_ZONEID = dtZONE.Rows[0]["COC_ZONEID"].ToString();
                    string SHEETNAME = dtZONE.Rows[0]["SHEETNAME"].ToString();
                    string ZONE_TYPE = dtZONE.Rows[0]["ZONE_TYPE"].ToString();
                    string VLOOK = dtZONE.Rows[0]["VLOOK"].ToString();
                    string COC_VLOOKID = dtZONE.Rows[0]["COC_VLOOKID"].ToString();
                    string CELLS_ZONE = dtZONE.Rows[0]["CELLS_ZONE"].ToString();
                    try {
                        DataTable dtSource = dicDataSource[COC_VLOOKID];
                        DataTable dtZONE_D = Db.Ado.GetDataTable($@"select * from COC_ZONE_D where COC_ZONEID='{COC_ZONEID}'
ORDER BY 
  -- 提取字母部分（兼容A/AA格式）
  LEFT(CELLS, PATINDEX('%[0-9]%', CELLS) - 1), 
  -- 提取数字部分
  CAST(SUBSTRING(CELLS, PATINDEX('%[0-9]%', CELLS), LEN(CELLS)) AS INT)");
                        if (dtSource.Rows.Count > 0) {
                            DataRow drData = dtSource.Rows[0];
                            //直接给单元格赋值
                            foreach (DataRow drZONE_D in dtZONE_D.Rows) {
                                string COLUM001ID = drZONE_D["COLUM001ID"].ToString();
                                string ANI = drZONE_D["ANI"].ToString();
                                //string COLUMN = drZONE_D["COLUMN"].ToString();
                                string F_FIX = drZONE_D["F_FIX"].ToString();
                                string E_FIX = drZONE_D["E_FIX"].ToString();
                                string CELLS = drZONE_D["CELLS"].ToString();
                                try {
                                    if (!string.IsNullOrEmpty(COLUM001ID)) { //数据源字段
                                        string byName = Db.Ado.GetString($@"select BYNAME from COLUM001_COC where COLUM001ID='{COLUM001ID}'");
                                        if (dtSource.Columns.Contains(byName)) {
                                            if (byName == "REPORT_URL") {
                                                string textValue = drData[byName].ToString();
                                                string[] attachs = textValue.Split(new string[] { ",", ";" }, StringSplitOptions.RemoveEmptyEntries);
                                                excelHelper.AddAttachsToCell(SHEETNAME, CELLS, attachs);
                                            }
                                            else {
                                                string textValue = F_FIX + drData[byName].ToString() + E_FIX;
                                                excelHelper.AddTextToCell(SHEETNAME, CELLS, textValue);
                                            }
                                        }
                                    }
                                    if (!string.IsNullOrEmpty(ANI)) { //汇总栏位
                                        if (ANI == "ANI_001") {//样本合并值
                                            string byName = "样本合并值";
                                            if (dtSource.Columns.Contains(byName)) {
                                                string textValue = F_FIX + drData[byName].ToString() + E_FIX;
                                                excelHelper.AddTextToCell(SHEETNAME, CELLS, textValue);
                                            }
                                        }
                                        if (ANI == "ANI_002") {//附件合并值
                                            string byName = "附件合并值";
                                            if (dtSource.Columns.Contains(byName)) {
                                                string textValue = drData[byName].ToString();
                                                string[] attachs = textValue.Split(new string[] { ",", ";" }, StringSplitOptions.RemoveEmptyEntries);
                                                excelHelper.AddAttachsToCell(SHEETNAME, CELLS, attachs);
                                            }
                                        }
                                    }
                                }
                                catch (Exception ex) {
                                    throw new Exception($"单元格[{CELLS}]填值异常:" + ex.ToString());
                                }
                            }
                        }
                    }
                    catch (Exception ex) {
                        throw new Exception($"区域[{SHEETNAME}]:" + ex.Message);
                    }
                }
                //再向右边循环
                foreach (DataTable dtZONE in listZoneData002) {
                    string COC_ZONEID = dtZONE.Rows[0]["COC_ZONEID"].ToString();
                    string SHEETNAME = dtZONE.Rows[0]["SHEETNAME"].ToString();
                    string ZONE_TYPE = dtZONE.Rows[0]["ZONE_TYPE"].ToString();
                    string VLOOK = dtZONE.Rows[0]["VLOOK"].ToString();
                    string COC_VLOOKID = dtZONE.Rows[0]["COC_VLOOKID"].ToString();
                    string CELLS_ZONE = dtZONE.Rows[0]["CELLS_ZONE"].ToString();
                    try {
                        DataTable dtSource = dicDataSource[COC_VLOOKID];
                        DataTable dtZONE_D = Db.Ado.GetDataTable($@"select * from COC_ZONE_D where COC_ZONEID='{COC_ZONEID}'
ORDER BY 
  -- 提取字母部分（兼容A/AA格式）
  LEFT(CELLS, PATINDEX('%[0-9]%', CELLS) - 1), 
  -- 提取数字部分
  CAST(SUBSTRING(CELLS, PATINDEX('%[0-9]%', CELLS), LEN(CELLS)) AS INT)");

                        int[] copyColumns = GetCopyColumnsByCellsZone(CELLS_ZONE);
                        //按照数据区域复制行
                        for (int i = 0; i < dtSource.Rows.Count; i++) {//填充数据
                            DataRow drData = dtSource.Rows[i];
                            //直接给单元格赋值
                            foreach (DataRow drZONE_D in dtZONE_D.Rows) {
                                string COLUM001ID = drZONE_D["COLUM001ID"].ToString();
                                string ANI = drZONE_D["ANI"].ToString();
                                //string COLUMN = drZONE_D["COLUMN"].ToString();
                                string F_FIX = drZONE_D["F_FIX"].ToString();
                                string E_FIX = drZONE_D["E_FIX"].ToString();
                                string CELLS = GetAddColumnsValue(drZONE_D["CELLS"].ToString(), copyColumns.Length * i);
                                try {
                                    if (!string.IsNullOrEmpty(COLUM001ID)) { //数据源字段
                                        string byName = Db.Ado.GetString($@"select BYNAME from COLUM001_COC where COLUM001ID='{COLUM001ID}'");
                                        if (dtSource.Columns.Contains(byName)) {
                                            string textValue = F_FIX + drData[byName].ToString() + E_FIX;
                                            excelHelper.AddTextToCell(SHEETNAME, CELLS, textValue);
                                        }
                                    }
                                    if (!string.IsNullOrEmpty(ANI)) { //汇总栏位
                                        if (ANI == "ANI_001") {//样本合并值
                                            string byName = "样本合并值";
                                            if (dtSource.Columns.Contains(byName)) {
                                                string textValue = F_FIX + drData[byName].ToString() + E_FIX;
                                                excelHelper.AddTextToCell(SHEETNAME, CELLS, textValue);
                                            }
                                        }
                                        if (ANI == "ANI_002") {//附件合并值
                                            string byName = "附件合并值";
                                            if (dtSource.Columns.Contains(byName)) {
                                                string textValue = drData[byName].ToString();
                                                string[] attachs = textValue.Split(new string[] { ",", ";" }, StringSplitOptions.RemoveEmptyEntries);
                                                excelHelper.AddAttachsToCell(SHEETNAME, CELLS, attachs);
                                            }
                                        }
                                    }
                                }
                                catch (Exception ex) {
                                    throw new Exception($"单元格[{CELLS}]填值异常:" + ex.ToString());
                                }
                            }
                        }
                    }
                    catch (Exception ex) {
                        throw new Exception($"区域[{SHEETNAME}]:" + ex.Message);
                    }
                }
                //最后向下循环
                foreach (DataTable dtZONE in listZoneData003) {
                    string COC_ZONEID = dtZONE.Rows[0]["COC_ZONEID"].ToString();
                    string SHEETNAME = dtZONE.Rows[0]["SHEETNAME"].ToString();
                    string ZONE_TYPE = dtZONE.Rows[0]["ZONE_TYPE"].ToString();
                    string VLOOK = dtZONE.Rows[0]["VLOOK"].ToString();
                    string COC_VLOOKID = dtZONE.Rows[0]["COC_VLOOKID"].ToString();
                    string CELLS_ZONE = dtZONE.Rows[0]["CELLS_ZONE"].ToString();
                    try {
                        DataTable dtSource = dicDataSource[COC_VLOOKID];
                        DataTable dtZONE_D = Db.Ado.GetDataTable($@"select * from COC_ZONE_D where COC_ZONEID='{COC_ZONEID}'
ORDER BY 
  -- 提取字母部分（兼容A/AA格式）
  LEFT(CELLS, PATINDEX('%[0-9]%', CELLS) - 1), 
  -- 提取数字部分
  CAST(SUBSTRING(CELLS, PATINDEX('%[0-9]%', CELLS), LEN(CELLS)) AS INT)");
                        int[] copyRows = GetCopyRowsByCellsZone(CELLS_ZONE);
                        for (int i = 0; i < dtSource.Rows.Count - 1; i++) {//排除自身，只需要复制N-1份
                            try {
                                excelHelper.CopyRows(SHEETNAME, copyRows, copyRows[copyRows.Length - 1] + 1);
                            }
                            catch {//有合并行，改为插入行
                                excelHelper.InsertRows(SHEETNAME, copyRows.Length, copyRows[copyRows.Length - 1] + 1);
                            }
                        }

                        for (int i = 0; i < dtSource.Rows.Count; i++) {//填充数据
                            DataRow drData = dtSource.Rows[i];
                            //直接给单元格赋值
                            foreach (DataRow drZONE_D in dtZONE_D.Rows) {
                                string COLUM001ID = drZONE_D["COLUM001ID"].ToString();
                                string ANI = drZONE_D["ANI"].ToString();
                                string ISSQ = drZONE_D["ISSQ"].ToString();
                                //string COLUMN = drZONE_D["COLUMN"].ToString();
                                string F_FIX = drZONE_D["F_FIX"].ToString();
                                string E_FIX = drZONE_D["E_FIX"].ToString();
                                string CELLS = GetAddRowsValue(drZONE_D["CELLS"].ToString(), copyRows.Length * i);
                                try {
                                    if (ISSQ == "1") {
                                        excelHelper.AddTextToCell(SHEETNAME, CELLS, (i + 1).ToString());
                                    }
                                    else if (!string.IsNullOrEmpty(COLUM001ID)) { //数据源字段
                                        string byName = Db.Ado.GetString($@"select BYNAME from COLUM001_COC where COLUM001ID='{COLUM001ID}'");
                                        if (dtSource.Columns.Contains(byName)) {
                                            if (byName == "REPORT_URL") {
                                                string textValue = drData[byName].ToString();
                                                string[] attachs = textValue.Split(new string[] { ",", ";" }, StringSplitOptions.RemoveEmptyEntries);
                                                excelHelper.AddAttachsToCell(SHEETNAME, CELLS, attachs);
                                            }
                                            else {
                                                string textValue = F_FIX + drData[byName].ToString() + E_FIX;
                                                excelHelper.AddTextToCell(SHEETNAME, CELLS, textValue);
                                            }
                                        }
                                    }
                                    else if (!string.IsNullOrEmpty(ANI)) { //汇总栏位
                                        if (ANI == "ANI_001") {//样本合并值
                                            string byName = "样本合并值";
                                            if (dtSource.Columns.Contains(byName)) {
                                                string textValue = F_FIX + drData[byName].ToString() + E_FIX;
                                                excelHelper.AddTextToCell(SHEETNAME, CELLS, textValue);
                                            }
                                        }
                                        if (ANI == "ANI_002") {//附件合并值
                                            string byName = "附件合并值";
                                            if (dtSource.Columns.Contains(byName)) {
                                                string textValue = drData[byName].ToString();
                                                string[] attachs = textValue.Split(new string[] { ",", ";" }, StringSplitOptions.RemoveEmptyEntries);
                                                excelHelper.AddAttachsToCell(SHEETNAME, CELLS, attachs);
                                            }
                                        }
                                    }
                                }
                                catch (Exception ex) {
                                    throw new Exception($"单元格[{CELLS}]填值异常:" + ex.ToString());
                                }
                            }
                        }
                    }
                    catch (Exception ex) {
                        throw new Exception($"区域[{SHEETNAME}]:" + ex.Message);
                    }
                }
            }
            return filePath;
        }

        #region 单元格循环辅助方法
        private string GetAddColumnsValue(string cellAddress, int i) {
            // 参数校验
            if (string.IsNullOrWhiteSpace(cellAddress))
                throw new ArgumentNullException(nameof(cellAddress), "单元格地址不能为空");
            if (i < 0)
                throw new ArgumentOutOfRangeException(nameof(i), "列偏移量不能为负数");

            // 正则解析单元格地址（格式：列字母+行号，如 A1、BC23）
            var match = Regex.Match(cellAddress.Trim().ToUpper(), @"^([A-Z]+)(\d+)$");
            if (!match.Success)
                throw new ArgumentException($"无效的单元格格式: {cellAddress}");

            // 提取列字母和行号
            string columnLetters = match.Groups[1].Value;  // 列字母（如 "A"、"BC"）
            int rowNumber = int.Parse(match.Groups[2].Value);  // 行号（如 1、23）

            // 列字母转数值（如 "A"→1，"BC"→55）
            int columnNumber = ColumnLettersToNumber(columnLetters);

            // 计算新列数值（向右移动 i 列）
            int newColumnNumber = columnNumber + i;
            if (newColumnNumber < 1)  // 理论上 i≥0 时不会触发，但防御性检查
                throw new InvalidOperationException($"列号溢出: {columnNumber} + {i} = {newColumnNumber}");

            // 新列数值转字母（如 55→"BC"）
            string newColumnLetters = NumberToColumnLetters(newColumnNumber);

            // 组合新单元格地址（列字母+行号）
            return $"{newColumnLetters}{rowNumber}";
        }

        // 辅助方法：数值转列字母（如 55→"BC"）
        private string NumberToColumnLetters(int number) {
            if (number < 1)
                throw new ArgumentOutOfRangeException(nameof(number), "列数值必须≥1");

            var letters = new StringBuilder();
            while (number > 0) {
                number--;  // 调整为0基索引（处理26进制无0的问题）
                letters.Insert(0, (char)('A' + number % 26));
                number = number / 26;
            }
            return letters.ToString();
        }

        private int[] GetCopyColumnsByCellsZone(string CELLS_ZONE) {
            // 参数校验
            if (string.IsNullOrWhiteSpace(CELLS_ZONE))
                throw new ArgumentNullException(nameof(CELLS_ZONE), "CELLS_ZONE 不能为空");

            // 分割起始和结束单元格
            string[] cells = CELLS_ZONE.Split(new[] { ':' }, StringSplitOptions.RemoveEmptyEntries);
            if (cells.Length != 2)
                throw new ArgumentException("CELLS_ZONE 格式无效，示例格式：B8:O8");

            // 提取列号
            int startCol = ParseColumnNumber(cells[0]);
            int endCol = ParseColumnNumber(cells[1]);

            // 生成列号数组
            return GenerateColumnArray(startCol, endCol);
        }

        /// <summary>
        /// 从单元格地址解析列号（如 B8 -> 2）
        /// </summary>
        private int ParseColumnNumber(string cellAddress) {
            // 使用正则匹配字母部分
            var match = Regex.Match(cellAddress.Trim().ToUpper(), @"^([A-Z]+)\d+$");
            if (!match.Success)
                throw new ArgumentException($"无效的单元格地址格式: {cellAddress}");

            // 转换字母为列号
            string columnLetters = match.Groups[1].Value;
            return ColumnLettersToNumber(columnLetters);
        }

        /// <summary>
        /// 将Excel列字母转换为数字（如 A->1, B->2, AA->27）
        /// </summary>
        private int ColumnLettersToNumber(string columnLetters) {
            int columnNumber = 0;
            foreach (char c in columnLetters) {
                columnNumber = columnNumber * 26 + (c - 'A' + 1);
                if (columnNumber > 16384) // Excel最大列限制(XFD=16384)
                    throw new ArgumentException($"超出Excel最大列限制: {columnLetters}");
            }
            return columnNumber;
        }

        /// <summary>
        /// 生成连续列号数组
        /// </summary>
        private int[] GenerateColumnArray(int startCol, int endCol) {
            // 校验列号顺序
            if (startCol > endCol)
                throw new ArgumentException($"起始列号({startCol}) 不能大于结束列号({endCol})");

            // 生成数组
            List<int> columns = new List<int>();
            for (int col = startCol; col <= endCol; col++) {
                columns.Add(col);
            }
            return columns.ToArray();
        }

        private string GetAddRowsValue(string CELLS, int i) {
            // 参数校验
            if (string.IsNullOrWhiteSpace(CELLS))
                throw new ArgumentNullException(nameof(CELLS), "CELLS 不能为空");
            if (i < 0)
                throw new ArgumentOutOfRangeException(nameof(i), "行偏移量不能为负数");

            // 正则解析单元格地址
            var match = Regex.Match(CELLS.Trim().ToUpper(), @"^([A-Z]+)(\d+)$");
            if (!match.Success)
                throw new ArgumentException($"无效的单元格格式: {CELLS}");

            // 提取列字母和行号
            string column = match.Groups[1].Value;
            int originalRow = int.Parse(match.Groups[2].Value);

            // 计算新行号（Excel行号从1开始）
            int newRow = originalRow + i;
            if (newRow < 1)
                throw new InvalidOperationException($"行号溢出: {originalRow} + {i} = {newRow}");

            return $"{column}{newRow}";
        }

        private int[] GetCopyRowsByCellsZone(string CELLS_ZONE) {
            // 参数校验
            if (string.IsNullOrWhiteSpace(CELLS_ZONE))
                throw new ArgumentNullException(nameof(CELLS_ZONE), "CELLS_ZONE 不能为空");

            // 分割起始和结束单元格
            string[] cells = CELLS_ZONE.Split(new[] { ':' }, StringSplitOptions.RemoveEmptyEntries);
            if (cells.Length != 2)
                throw new ArgumentException("CELLS_ZONE 格式无效，示例格式：B8:O8");

            // 提取行号
            int startRow = ParseRowNumber(cells[0]);
            int endRow = ParseRowNumber(cells[1]);

            // 生成行号数组
            return GenerateRowArray(startRow, endRow);
        }

        /// <summary>
        /// 从单元格地址解析行号（如 B8 -> 8）
        /// </summary>
        private int ParseRowNumber(string cellAddress) {
            // 使用正则匹配字母+数字结构
            var match = Regex.Match(cellAddress.Trim().ToUpper(), @"^[A-Z]+(\d+)$");
            if (!match.Success)
                throw new ArgumentException($"无效的单元格地址格式: {cellAddress}");

            // 转换行号为整数
            if (!int.TryParse(match.Groups[1].Value, out int row) || row < 1)
                throw new ArgumentException($"无效的行号: {cellAddress}");

            return row;
        }

        /// <summary>
        /// 生成连续行号数组
        /// </summary>
        private int[] GenerateRowArray(int startRow, int endRow) {
            // 校验行号顺序
            if (startRow > endRow)
                throw new ArgumentException($"起始行号({startRow}) 不能大于结束行号({endRow})");

            // 生成数组
            List<int> rows = new List<int>();
            for (int row = startRow; row <= endRow; row++) {
                rows.Add(row);
            }
            return rows.ToArray();
        }
        #endregion

        public DataTable GetCOCVLOOK(string COC_VLOOKID, string[] filterValues) {
            DataTable dtResult = new DataTable();
            DataTable dtVLOOK = Db.Ado.GetDataTable($@"select * from COC_VLOOK where COC_VLOOKID='{COC_VLOOKID}'");
            if (dtVLOOK.Rows.Count == 0) {
                throw new Exception($"COC_VLOOKID[{COC_VLOOKID}]在数据库中找不到!");
            }
            DataRow drVLOOK = dtVLOOK.Rows[0];
            string COLUM002ID = drVLOOK["COLUM002ID"].ToString();
            string GOUPBY = drVLOOK["GOUPBY"].ToString();
            string GROUPBYNAME = drVLOOK["GROUPBYNAME"].ToString();
            string GROUPBYNAME_C = drVLOOK["GROUPBYNAME_C"].ToString();
            string FIX_FILED = drVLOOK["FIX_FILED"].ToString();

            DataTable dtCOLUM002ID = Db.Ado.GetDataTable($@"select STRSQL,FIX_FILED from COLUM002_COC where COLUM002ID='{COLUM002ID}'");
            if (dtCOLUM002ID.Rows.Count == 0) {
                throw new Exception($"COLUM002ID[{COLUM002ID}]在数据库COLUM002_COC中找不到!");
            }
            string STRSQL = dtCOLUM002ID.Rows[0]["STRSQL"].ToString().Replace("@u","1");
            string COULM002_FIX_FILED = dtCOLUM002ID.Rows[0]["FIX_FILED"].ToString();
            //加上where条件
            if (FIX_FILED == "1") {
                STRSQL += " AND " + COULM002_FIX_FILED + " IN (" + GetSqlInString(filterValues) + ")";
            }
            //加上本身条件
            DataTable dtWhere = Db.Ado.GetDataTable($@"select COLUM001ID,WHEREVALUE from COC_VLOOK_W where COC_VLOOKID = '{COC_VLOOKID}'");
            foreach (DataRow drWhere in dtWhere.Rows) {
                string COLUM001ID = drWhere["COLUM001ID"].ToString();
                string whereField = Db.Ado.GetString($@"select WHEREFILED,BYNAME from COLUM001_COC where COLUM001ID='{COLUM001ID}'");
                string whereValue = drWhere["WHEREVALUE"].ToString();
                if (whereValue.Contains(";") || whereValue.Contains("；")) {
                    STRSQL += " AND " + whereField + " IN (" + GetSqlInString(whereValue.Split(new string[] { ";", "；" }, StringSplitOptions.RemoveEmptyEntries)) + ")";
                }
                else {
                    STRSQL += " AND " + whereField + $" = '{whereValue}'";
                }
            }
            //加上order条件
            STRSQL += " ORDER BY COLUM0B03,COLUM002_COCID";

            //执行sql获取原始数据源
            DataTable dtCOLUM002Source = Db.Ado.GetDataTable(STRSQL);

            //按照GroupBy分组
            switch (GOUPBY) {
                case "GOUPBY_001"://分组合并
                    dtResult = MergeDataTable001(dtCOLUM002Source, GROUPBYNAME);
                    break;
                case "GOUPBY_002"://全部合并
                    //排除REPORT_URL和A1,A2...A32 组成新的table
                    dtResult = MergeDataTable002(dtCOLUM002Source);
                    break;
                case "GOUPBY_003"://行转列合并
                    dtResult = MergeDataTable003(dtCOLUM002Source, GROUPBYNAME, GROUPBYNAME_C);
                    break;
                default:
                    //不分组直接使用
                    dtResult = MergeDataTableDefault(dtCOLUM002Source); 
                    break;
            }
            dtResult.TableName = COC_VLOOKID;
            return dtResult;
        }

        private string GetSqlInString(string[] filterValues) {
            if (filterValues == null || filterValues.Length == 0) {
                return "''"; // 空值处理，避免SQL语法错误
            }

            // 转义单引号并包裹每个值
            var escapedValues = filterValues
                .Select(value => value.Replace("'", "''"))
                .Select(value => $"'{value}'");

            // 连接所有值并返回
            return string.Join(", ", escapedValues);
        }

        //全部合并
        private DataTable MergeDataTable002(DataTable sourceTable) {
            // 1. 初始化结果表结构
            DataTable resultTable = new DataTable();

            // 定义A1-A32的列名列表（用于精准筛选）
            var aColumnNames = Enumerable.Range(1, 32).Select(i => $"A{i}").ToList();

            // 基础列：除REPORT_URL和A1-A32外的所有列
            var baseColumns = sourceTable.Columns.Cast<DataColumn>()
                .Where(c => c.ColumnName != "REPORT_URL" && !aColumnNames.Contains(c.ColumnName))
                .ToList();

            // 添加基础列到结果表
            foreach (var col in baseColumns) {
                resultTable.Columns.Add(col.ColumnName, col.DataType);
            }

            // 添加合并列
            resultTable.Columns.Add("附件合并值", typeof(string));
            resultTable.Columns.Add("样本合并值", typeof(string));

            if (sourceTable.Rows.Count == 0) return resultTable;

            // 2. 填充基础列（取第一行的基础列数据）
            DataRow firstRow = sourceTable.Rows[0];
            DataRow newRow = resultTable.NewRow();
            foreach (var col in baseColumns) {
                newRow[col.ColumnName] = firstRow[col.ColumnName];
            }

            // 3. 处理附件合并值（所有行的REPORT_URL非空值用；连接）
            var reportUrls = sourceTable.AsEnumerable()
                .Select(r => r["REPORT_URL"]?.ToString().Trim())
                .Where(url => !string.IsNullOrEmpty(url));
            newRow["附件合并值"] = string.Join(";", reportUrls);

            // 4. 处理样本合并值（核心逻辑：先行内合并A1-A32，再合并所有行）
            List<string> rowMergedValues = new List<string>();
            foreach (DataRow row in sourceTable.Rows) {
                // 行内合并A1-A32：按顺序收集非空值，用；连接
                List<string> currentRowAValues = new List<string>();
                foreach (var aCol in aColumnNames) {
                    if (sourceTable.Columns.Contains(aCol)) {
                        string value = row[aCol]?.ToString().Trim();
                        if (!string.IsNullOrEmpty(value)) {
                            currentRowAValues.Add(value);
                        }
                    }
                }
                rowMergedValues.Add(string.Join(";", currentRowAValues));
            }
            newRow["样本合并值"] = string.Join(";", rowMergedValues);

            resultTable.Rows.Add(newRow);
            return resultTable;
        }

        //分组合并
        private DataTable MergeDataTable001(DataTable dtCOLUM002Source, string gROUPBYNAME) {
            // 检查输入参数
            if (dtCOLUM002Source == null || dtCOLUM002Source.Rows.Count == 0)
                return new DataTable();

            // 分割分组列名
            string[] groupByColumns = gROUPBYNAME.Split(',', StringSplitOptions.RemoveEmptyEntries);

            // 验证分组列是否存在
            foreach (string colName in groupByColumns) {
                if (!dtCOLUM002Source.Columns.Contains(colName)) {
                    throw new ArgumentException($"分组列 '{colName}' 不存在于数据源中。");
                }
            }

            // 创建结果表结构
            DataTable resultTable = dtCOLUM002Source.Clone();

            // 使用LINQ进行分组处理
            var groupedRows = dtCOLUM002Source.AsEnumerable()
                .GroupBy(row => new {
                    Key = groupByColumns.Select(col => row[col]).ToArray()
                });

            // 处理每个分组
            foreach (var group in groupedRows) {
                DataRow newRow = resultTable.NewRow();

                // 1. 设置分组列的值（取第一行）
                foreach (string colName in groupByColumns) {
                    newRow[colName] = group.First()[colName];
                }

                // 2. 处理其他列
                foreach (DataColumn column in dtCOLUM002Source.Columns) {
                    if (groupByColumns.Contains(column.ColumnName))
                        continue; // 跳过分组列

                    if (column.ColumnName == "Report_Url" || column.ColumnName.Contains("合并值")) {
                        // 合并值列：使用;连接所有值
                        var nonNullValues = group.Select(row => row[column.ColumnName])
                                                 .Where(val => val != DBNull.Value)
                                                 .Select(val => val.ToString());

                        newRow[column.ColumnName] = string.Join(";", nonNullValues);
                    }
                    else {
                        // 其他列：取第一行的值
                        newRow[column.ColumnName] = group.First()[column.ColumnName];
                    }
                }

                resultTable.Rows.Add(newRow);
            }

            return resultTable;
        }

        //行转列合并
        private DataTable MergeDataTable003(DataTable dtCOLUM002Source, string gROUPBYNAME, string gROUPBYNAME_C) {
            // 检查输入参数
            if (dtCOLUM002Source == null || dtCOLUM002Source.Rows.Count == 0)
                return new DataTable();

            // 分割分组列名
            string[] groupByColumns = gROUPBYNAME.Split(',', StringSplitOptions.RemoveEmptyEntries);

            // 验证分组列和行转列字段是否存在
            foreach (string colName in groupByColumns) {
                if (!dtCOLUM002Source.Columns.Contains(colName)) {
                    throw new ArgumentException($"分组列 '{colName}' 不存在于数据源中。");
                }
            }

            if (!dtCOLUM002Source.Columns.Contains(gROUPBYNAME_C)) {
                throw new ArgumentException($"行转列字段 '{gROUPBYNAME_C}' 不存在于数据源中。");
            }

            // 创建结果表结构
            DataTable resultTable = new DataTable();

            // 添加分组列
            foreach (string colName in groupByColumns) {
                resultTable.Columns.Add(colName, dtCOLUM002Source.Columns[colName].DataType);
            }

            // 收集所有可能的行转列值，用于创建动态列
            var pivotValues = dtCOLUM002Source.AsEnumerable()
                .Select(row => row[gROUPBYNAME_C].ToString())
                .Distinct()
                .ToList();

            // 为每个行转列值创建附件合并值和样本合并值列
            foreach (string pivotValue in pivotValues) {
                resultTable.Columns.Add($"{pivotValue}_附件合并值", typeof(string));
                resultTable.Columns.Add($"{pivotValue}_样本合并值", typeof(string));
            }

            // 使用LINQ进行分组处理
            var groupedRows = dtCOLUM002Source.AsEnumerable()
                .GroupBy(row => new {
                    Key = groupByColumns.Select(col => row[col]).ToArray()
                });

            // 处理每个分组
            foreach (var group in groupedRows) {
                DataRow newRow = resultTable.NewRow();

                // 设置分组列的值
                for (int i = 0; i < groupByColumns.Length; i++) {
                    newRow[groupByColumns[i]] = group.Key.Key[i];
                }

                // 处理行转列数据
                foreach (var row in group) {
                    string pivotValue = row[gROUPBYNAME_C].ToString();

                    // 设置附件合并值
                    string attachmentColumn = $"{pivotValue}_附件合并值";
                    if (resultTable.Columns.Contains(attachmentColumn)) {
                        newRow[attachmentColumn] = row["附件合并值"];
                    }

                    // 设置样本合并值
                    string sampleColumn = $"{pivotValue}_样本合并值";
                    if (resultTable.Columns.Contains(sampleColumn)) {
                        newRow[sampleColumn] = row["样本合并值"];
                    }
                }

                resultTable.Rows.Add(newRow);
            }

            return resultTable;
        }

        private DataTable MergeDataTableDefault(DataTable sourceTable) {
            // 1. 初始化结果表结构
            DataTable resultTable = sourceTable.Clone();
            resultTable.Columns.Add("附件合并值", typeof(string));
            resultTable.Columns.Add("样本合并值", typeof(string));

            if (sourceTable.Rows.Count == 0) return resultTable;

            // 定义A1-A32的列名列表
            var aColumnNames = Enumerable.Range(1, 32).Select(i => $"A{i}").ToList();

            // 检查REPORT_URL列是否存在
            bool hasReportUrlColumn = sourceTable.Columns.Contains("REPORT_URL");

            // 2. 处理每一行数据
            foreach (DataRow sourceRow in sourceTable.Rows) {
                DataRow newRow = resultTable.NewRow();

                // 复制原行数据到新行
                foreach (DataColumn col in sourceTable.Columns) {
                    newRow[col.ColumnName] = sourceRow[col.ColumnName];
                }

                // 3. 处理附件合并值（兼容REPORT_URL列不存在的情况）
                string reportUrl = hasReportUrlColumn
                    ? sourceRow["REPORT_URL"]?.ToString().Trim()
                    : string.Empty;

                newRow["附件合并值"] = !string.IsNullOrEmpty(reportUrl) ? reportUrl : string.Empty;

                // 4. 处理样本合并值
                List<string> currentRowAValues = new List<string>();
                foreach (var aCol in aColumnNames) {
                    if (sourceTable.Columns.Contains(aCol)) {
                        string value = sourceRow[aCol]?.ToString().Trim();
                        if (!string.IsNullOrEmpty(value)) {
                            currentRowAValues.Add(value);
                        }
                    }
                }
                newRow["样本合并值"] = string.Join(";", currentRowAValues);

                resultTable.Rows.Add(newRow);
            }

            return resultTable;
        }

        private void SaveCOCToScanDoc(string docType, string scandocName,COCInputDto parm) {
            string peopleId = parm.ID;
            string COLUM002ID = parm.COCID;
            string COLUM001ID = parm.COCID;
            string INSPECT_PROGRESSID = parm.INSPECT_PROGRESSID ?? string.Empty;
            string INSPECT_DEV1ID = parm.INSPECT_DEV1ID ?? string.Empty;
            string DOCTYPE = parm.DOCTYPE ?? string.Empty;

            //Db.Ado.ExecuteCommand($"DELETE SCANDOC WHERE COLUM002ID='{COLUM002ID}' AND COLUM001ID='{COLUM001ID}'");
            Db.Ado.ExecuteCommand($"DELETE SCANDOC WHERE PEOPLEID='{peopleId}' AND INSPECT_DEV1ID='{INSPECT_DEV1ID}'  AND INSPECT_PROGRESSID='{INSPECT_PROGRESSID}' AND  DOCTYPE='{docType}'");
            string sql = @"
            INSERT INTO SCANDOC (TENID, SCANDOCID, SCANDOCCODE, SCANDOCNAME, DOCTYPE, PEOPLEID, createdate, SCANDOC_user,INSPECT_DEV1ID,COLUM002ID, COLUM001ID,INSPECT_PROGRESSID)
            VALUES ('001', @SCANDOCID, @SCANDOCID, @SCANDOCNAME, @DOCTYPE, @PEOPLEID, CONVERT(VARCHAR(20), GETDATE(), 120), @PEOPLEID, @INSPECT_DEV1ID,@COLUM002ID, @COLUM001ID,@INSPECT_PROGRESSID)";

            // 定义参数
            var parameters = new SugarParameter[]
            {
                new SugarParameter("@SCANDOCID", Guid.NewGuid().ToString()),
                new SugarParameter("@SCANDOCNAME", scandocName.Replace(AppSettings.Configuration["AppSettings:FileServerPath"],@"\")),
                new SugarParameter("@DOCTYPE", docType),
                new SugarParameter("@PEOPLEID", peopleId),
                new SugarParameter("@INSPECT_DEV1ID", INSPECT_DEV1ID),
                new SugarParameter("@COLUM002ID", COLUM002ID),
                new SugarParameter("@COLUM001ID", COLUM001ID),
                new SugarParameter("@INSPECT_PROGRESSID", INSPECT_PROGRESSID)
                //new SugarParameter("@DOCTYPE", DOCTYPE)

                
        };

            // 执行 SQL 命令
            Db.Ado.ExecuteCommand(sql, parameters);
        }
        #endregion

        #region GetCOCDataSource
        public DataSet GetCOCDataSource(COCInputDto parm) {
            DataSet ds = new DataSet();
            DataTable dtVLOOKID = Db.Ado.GetDataTable($@"select distinct COC_VLOOKID from COC_ZONE where COCID='{parm.COCID}'");
            if (dtVLOOKID.Rows.Count == 0) {
                throw new Exception($"COCID[{parm.COCID}]在数据库中找不到COC_ZONE数据源!");
            }
            foreach (DataRow drVLOOKID in dtVLOOKID.Rows) {
                string VLOOKID = drVLOOKID[0].ToString();
                string COC_VLOOKCODE = Db.Ado.GetString($@"select TOP 1 COC_VLOOKCODE from COC_VLOOK WHERE COC_VLOOKID='{VLOOKID}'");
                if (!string.IsNullOrEmpty(parm.VLOOKCODE)) {
                    if (parm.VLOOKCODE != COC_VLOOKCODE) {
                        continue;
                    }
                }
                try {
                    DataTable dtCOCVLOOK = GetCOCVLOOK(VLOOKID, parm.FIX_VALUE);
                    dtCOCVLOOK.TableName = VLOOKID;
                    ds.Tables.Add(dtCOCVLOOK);
                }
                catch (Exception ex) {
                    string name = Db.Ado.GetString($@"select TOP 1 COC_VLOOKNAME from COC_VLOOK WHERE COC_VLOOKID='{VLOOKID}'");
                    throw new Exception($"数据源[{name}]获取异常:{ex.ToString()}");
                }
            }

            ////测试Excel
            //string filePath = @"C:\Users\Administrator\Desktop\Temp\test.xlsx";
            //using (ExcelHelper excelHelper = new ExcelHelper(filePath)) {
            //    //excelHelper.AddTextToCell("Sheet4", "F2", "5<sup>3</sup>");
            //    string[] attachs = new string[] {
            //        //@"C:\Users\Administrator\Desktop\Temp\1.xlsx",
            //        //@"C:\Users\Administrator\Desktop\Temp\2.docx" ,
            //        @"C:\Users\Administrator\Desktop\Temp\3.pdf" ,
            //        //@"C:\Users\Administrator\Desktop\Temp\44.png",
            //        //@"C:\Users\Administrator\Downloads\26eae128-f295-4f60-abca-fcf8cd389215.jpg",
            //        //@"C:\Users\Administrator\Desktop\Temp\44.png",
            //        @"C:\Users\Administrator\Downloads\26eae128-f295-4f60-abca-fcf8cd389215.jpg"};
            //    excelHelper.AddAttachsToCell("Sheet4", "F6", attachs);
            //    //excelHelper.CopyRows("Sheet4", new int[] { 42, 43, 44, 45, 46, 47 }, 48);
            //    //excelHelper.CopyCells("Sheet1","E8:G9", "H8:J9");
            //    //excelHelper.CopySheet(@"C:\Users\Administrator\Desktop\Temp\藤仓.xlsx", "Shear test Kiss cut", "Sheet1");
            //}
            ////返回文件流
            //var inputFile = $@"D:\DigiwinHR\Digiwin 规格\淼昇\LPT50H40ES-20250411190507.pdf";
            //string outputFile = @"C:\Users\Administrator\Desktop\Temp\MS\SI.pdf";

            //Document pdfDoc = new Document(inputFile);
            //string allPdfText = ExtractAllText(pdfDoc);

            ////小电流在此改代码 修改pdf
            //string searchText = ExtractTextRightOfKeyword(allPdfText, "苏州淼昇电子有限公司");
            //string replaceText = DateTime.Now.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture);
            //ReplacePdfText(searchText, replaceText, pdfDoc);

            //searchText = ExtractTextRightOfKeyword(allPdfText, "样品名称：");
            //replaceText = "Test11111-GGGGGG";
            //ReplacePdfText(searchText, replaceText, pdfDoc);

            //searchText = ExtractTextRightOfKeyword(allPdfText, "测试时间：");
            //replaceText = DateTime.Now.ToString("HH:mm:ss", CultureInfo.InvariantCulture);
            //ReplacePdfText(searchText, replaceText, pdfDoc);

            //FileInfo filePDF = new FileInfo(outputFile);
            //// 保存修改后的 PDF
            //pdfDoc.Save(outputFile);

            return ds;
        }
        #endregion
    }

}
