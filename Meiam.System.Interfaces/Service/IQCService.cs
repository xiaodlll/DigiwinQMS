//------------------------------------------------------------------------------
// <auto-generated>
//     此代码已从模板生成手动更改此文件可能导致应用程序出现意外的行为。
//     如果重新生成代码，将覆盖对此文件的手动更改。
//     author MEIAM
// </auto-generated>
//------------------------------------------------------------------------------
using Meiam.System.Model;
using Meiam.System.Model.Dto;
using System.Collections.Generic;
using System.Threading.Tasks;
using SqlSugar;
using System.Linq;
using System;
using System.IO;
using OxyPlot.Axes;
using OxyPlot.Series;
using OxyPlot;
using OxyPlot.Core.Drawing;
using OxyPlot.Legends;
using Microsoft.Data.SqlClient;
using System.Data;
using Microsoft.Extensions.Options;
using DotNetCore.CAP;
using Mapster.Utils;
using Newtonsoft.Json.Linq;
using System.Text.RegularExpressions;
using SqlSugar.Extensions;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using System.Reflection.Emit;
using Meiam.System.Common;
using Microsoft.AspNetCore.Mvc;
using NPOI.SS.UserModel;
using NPOI.XSSF.UserModel;
using NPOI.SS.Formula.Functions;
using Aspose.Pdf;
using Aspose.Pdf.Text;
using System.Globalization;
using static System.Runtime.InteropServices.JavaScript.JSType;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion.Internal;
using HorizontalAlignment = NPOI.SS.UserModel.HorizontalAlignment;
using VerticalAlignment = NPOI.SS.UserModel.VerticalAlignment;
using Meiam.System.Interfaces.Extensions;
using System.Security.Policy;

namespace Meiam.System.Interfaces
{
    public class IQCService : BaseService<INSPECT_TENSILE>, IIQCService {

        public IQCService(IUnitOfWork unitOfWork) : base(unitOfWork) {
        }

        #region GetInspectReport 
        public void GetInspectReport(InspectInputDto parm)
        {
            string INSPECT_CODE;//检验单号
            string INSPECT_PUR; //检验来源
            string COLUM002ID;//检验项目ID
            string ITEMID;//物料编码
            string LOTID;//批次号
            string INSPECT_DATE;
            string COLUM001ID;//COLUM001ID
            string INSPECT_SPEC;



            //1. 获取编码
            string INPECT_CODE = Db.Ado.GetString(@$"DEV1_GET_INPECT_CODE '{parm.INSPECT_DEV1ID}'");
            if (INPECT_CODE.Contains("错误"))
            {
                throw new Exception($"DEV1_GET_INPECT_CODE获取异常：{INPECT_CODE}");
            }

            #region 获得检验单号和检验来源
            string sql = @"SELECT TOP 1 ISNULL(INSPECT_DEV1.INSPECT_CODE,''),ISNULL(INSPECT_DEV1.INSPECT_PUR,''),
INSPECT_DEV1.COLUM002ID,INSPECT_DEV1.ITEMID,INSPECT_DEV1.LOTID,INSPECT_DEV1.INSPECT_DATE,INSPECT_DEV1.COLUM001ID,INSPECT_SPEC
FROM INSPECT_DEV1 
LEFT JOIN INSPECT_FLOW ON INSPECT_FLOW.INSPECT_FLOWID=INSPECT_DEV1.INSPECT_FLOWID
LEFT JOIN COLUM002 ON COLUM002.COLUM002ID=INSPECT_DEV1.COLUM002ID
WHERE INSPECT_DEV1ID=@INSPECT_DEV1ID";
            // 定义参数
            var parameters = new SugarParameter[]
            {
                new SugarParameter("@INSPECT_DEV1ID", parm.INSPECT_DEV1ID)
            };

            // 执行 SQL 命令
            var dataTable = Db.Ado.GetDataTable(sql, parameters);

            if (dataTable.Rows.Count > 0)
            {
                INSPECT_CODE = dataTable.Rows[0][0].ToString();
                INSPECT_PUR = dataTable.Rows[0][1].ToString();
                COLUM002ID = dataTable.Rows[0][2].ToString();
                ITEMID = dataTable.Rows[0][3].ToString();
                LOTID = dataTable.Rows[0][4].ToString();
                INSPECT_DATE = DateTime.Parse(dataTable.Rows[0][5].ToString()).ToString("yyyyMMddHHmmss");
                COLUM001ID = dataTable.Rows[0][6].ToString();
                INSPECT_SPEC = dataTable.Rows[0][7].ToString();
            }
            else
            {
                throw new Exception("未获取到检验单号和检验来源");
            }
            #endregion

            #region 判断检验单是否已经完成
            //如果 检验单号 不为空 并且 检验来源 不为空 @动态表名 =“INSPECT_”+@INSPECT_PUR
            //@动态表面ID栏位 = @动态表名 +“ID”
            //    SELECT STATE FROM @动态表名 WHERE @动态表面ID栏位 = @INSPECT_CODE
            //    如果 STATE =“已完成”
            //    返回错误：”检验单已完成，无法再次产生检验报告” 提出API
            string table = string.Empty;
            string surfaceId = string.Empty;
            if (!string.IsNullOrEmpty(INSPECT_CODE) && !string.IsNullOrEmpty(INSPECT_PUR))
            {
                table = "INSPECT_" + INSPECT_PUR;
                surfaceId = table + "ID";
                string state = "";

                sql = @$"SELECT STATE FROM {table} WHERE {surfaceId}=@INSPECT_CODE";
                // 定义参数
                parameters = new SugarParameter[]
                {
                    new SugarParameter("@INSPECT_CODE", INSPECT_CODE)
                };
                // 执行 SQL 命令
                dataTable = Db.Ado.GetDataTable(sql, parameters);

                if (dataTable.Rows.Count > 0)
                {
                    state = dataTable.Rows[0][0].ToString();
                }
                else
                {
                    throw new Exception("未获取到检验单状态");
                }

                if (state == "已完成")
                {
                    throw new Exception("检验单已完成，无法再次产生检验报告");
                }
            }
            else
            {
                throw new Exception("检验单号或检验来源为空");
            }
            #endregion

            #region 获取应检样本数
            int lot_Qyt = 0;
            sql = @$"SELECT top 1 LOT_QTY FROM {table} WHERE {surfaceId}=@INSPECT_CODE";
            // 定义参数
            parameters = new SugarParameter[]
            {
                    new SugarParameter("@INSPECT_CODE", INSPECT_CODE)
            };
            // 执行 SQL 命令
            dataTable = Db.Ado.GetDataTable(sql, parameters);
            if (dataTable.Rows.Count > 0)
            {
                int.TryParse(dataTable.Rows[0][0].ToString(), out lot_Qyt);
            }
            else
            {
                throw new Exception("未获取到检验批次数量LOT_QTY");
            }

            //1. 获得应检样本量
            int inspect_Qyt = Db.Ado.GetInt(@$"GET_INPECT_CNT  '{COLUM002ID}','{lot_Qyt}'");
            if (inspect_Qyt == 0)
                inspect_Qyt = 1;//测试1笔
            //2.获得@实际记录量
            int actCount = Db.Ado.GetInt(@$"SELECT COUNT(1) FROM INSPECT_TENSILE WHERE INSPECT_DEV1ID='{parm.INSPECT_DEV1ID}'");

            //3.如果@实际记录量<应检样本量
            if (actCount < inspect_Qyt)
            {
                //历史样本数
                int historyCount = Db.Ado.GetInt(@$"Select COUNT(1) FROM INSPECT_TENSILE 
LEFT JOIN INSPECT_DEV1 ON INSPECT_TENSILE.INSPECT_DEV1ID=INSPECT_DEV1.INSPECT_DEV1ID
WHERE INSPECT_DEV1.ITEMID='{ITEMID}'  AND INSPECT_TENSILE.INSPECT_DEV1ID<>'{parm.INSPECT_DEV1ID}'
AND INSPECT_DEV1.INSPECT_SPEC='{INSPECT_SPEC}'");
                if (historyCount < inspect_Qyt - actCount)
                {
                    throw new Exception("历史数据记录笔数不满足，无法产生报告");
                }
            }
            #endregion

            //重新获取主资料
            var dtMain = Db.Ado.GetDataTable(@$"SELECT 
INSPECT_DEV1.INSPECT_CODE   -- 检验单号  
,INSPECT_DEV1.INSPECT_PUR     -- 检验来源    IQC OQC
,INSPECT_FLOW.ITEMID		      -- 物料编码    (有个低代码待办)
,INSPECT_DEV1.LOTID			      -- 批次号      
,INSPECT_DEV1.DOC_CODE		      -- 来源单号  
,INSPECT_DEV1.COLUM002ID
,COLUM002.COC_ATTR           --特殊设定
,INSPECT_DEV1.INSPECT_FLOWID	
FROM INSPECT_DEV1 
LEFT JOIN INSPECT_FLOW ON INSPECT_FLOW.INSPECT_FLOWID=INSPECT_DEV1.INSPECT_FLOWID
LEFT JOIN COLUM002 ON COLUM002.COLUM002ID=INSPECT_DEV1.COLUM002ID
WHERE INSPECT_DEV1ID='{parm.INSPECT_DEV1ID}'");

            List<INSPECT_TENSILE_D> listToSave = new List<INSPECT_TENSILE_D>();
            //实际检测集合
            var dtActiveMain = Db.Ado.GetDataTable(@$"SELECT TOP {inspect_Qyt} *,FLAG=0 FROM INSPECT_TENSILE WHERE INSPECT_DEV1ID='{parm.INSPECT_DEV1ID}'");
            foreach (DataRow item in dtActiveMain.Rows)
            {
                listToSave.Add(GetDetailByInspect(item, parm.INSPECT_DEV1ID));
            }
            //四.如果@应检样本数>@实际记录笔
            if (inspect_Qyt > dtActiveMain.Rows.Count)
            {
                var dtRandomAddData = Db.Ado.GetDataTable(@$"SELECT TOP {inspect_Qyt - dtActiveMain.Rows.Count} *,FLAG=1
FROM INSPECT_TENSILE
LEFT JOIN INSPECT_DEV1 
ON INSPECT_TENSILE.INSPECT_DEV1ID = INSPECT_DEV1.INSPECT_DEV1ID
WHERE INSPECT_DEV1.ITEMID ='{ITEMID}'
AND INSPECT_TENSILE.INSPECT_DEV1ID <>'{parm.INSPECT_DEV1ID}'
AND INSPECT_DEV1.INSPECT_SPEC='{INSPECT_SPEC}' ORDER BY NEWID()");
                foreach (DataRow item in dtRandomAddData.Rows)
                {
                    listToSave.Add(GetDetailByInspect(item, parm.INSPECT_DEV1ID));
                }
            }

            #region SaveToInspectDetail
            try
            {
                // 开启事务
                Db.Ado.BeginTran();

                Db.Ado.ExecuteCommand($"DELETE INSPECT_TENSILE_D WHERE INSPECT_DEV1ID='{parm.INSPECT_DEV1ID}'");
                Db.Ado.ExecuteCommand($"DELETE INSPECT_TENSILE_D_R WHERE INSPECT_DEV1ID='{parm.INSPECT_DEV1ID}'");

                // 批量插入数据
                Db.Insertable<INSPECT_TENSILE_D>(listToSave).ExecuteCommand();

                List<INSPECT_TENSILE_D_R> listInspectDataR = new List<INSPECT_TENSILE_D_R>();
                foreach (var detail in listToSave)
                {
                    // 去除字符串首尾的花括号
                    string trimmedInput = detail.Y_AXIS.Trim('{', '}');
                    // 按逗号分割字符串
                    string[] numberStrings = trimmedInput.Split(',');
                    // 将分割后的字符串数组转换为双精度浮点数数组
                    decimal[] numbers = Array.ConvertAll(numberStrings, decimal.Parse);
                    decimal max = numbers.Max();
                    decimal min = numbers.Min();
                    decimal avg = numbers.Average();

                    var drItem = new INSPECT_TENSILE_D_R()
                    {
                        INSPECT_TENSILE_D_RID = Guid.NewGuid().ToString(),
                        INSPECT_TENSILE_DID = detail.INSPECT_TENSILE_DID,
                        INSPECT_DEV1ID = detail.INSPECT_DEV1ID,
                        SAMPLEID = detail.SAMPLEID,
                        MaxValue = max,
                        MinValue = min,
                        AvgValue = avg
                    };
                    listInspectDataR.Add(drItem);
                }

                Db.Insertable<INSPECT_TENSILE_D_R>(listInspectDataR).ExecuteCommand();

                //将【INSPECT_TENSILE_D_R】中的平均值作为检验结果同步给QMS
                Db.Ado.ExecuteCommand($"DELETE INSPECT_ZONE WHERE COLUM002ID='{COLUM002ID}' AND INSPECTCODE='{INSPECT_CODE}'");

                var cOLUM001CODE = Db.Ado.GetString($"SELECT TOP 1 COLUM001CODE FROM COLUM001 WHERE COLUM001ID='{COLUM001ID}'");
                //2. 获得@检验值
                var avgValue = Db.Ado.GetString($"SELECT avg(AvgValue) FROM INSPECT_TENSILE_D_R WHERE  INSPECT_DEV1ID='{parm.INSPECT_DEV1ID}'");
                sql = @$"INSERT INSPECT_ZONE (INSPECT_ZONECREATEUSER,INSPECT_ZONECREATEDATE,INSPECT_ZONEID,INSPECTTYPE,COLUM002ID,CUSTOM_ITEMID,LOTNO,INSPECTCODE,PCSCODE,ISAUTO,{cOLUM001CODE}) VALUES  (
'{parm.UserName}'                        --传参@userName
,CONVERT(varchar(20),GETDATE(),120)
,newid()
,'{INSPECT_PUR}'                      --@INSPECT_PUR
,'{COLUM002ID}'                       --@COLUM002ID
,'{ITEMID}'                           --@ITEMID
,'{LOTID}'                            --@LOTID
,'{INSPECT_CODE}'                     --@INSPECT_CODE 检验单号
,'0'                                  --样本序号 (第1个SAMPLEID 给1，第2个给2,依次类推)
,'0'                                 --固定给 0
,'{avgValue}' )";
                Db.Ado.ExecuteCommand(sql);
                #region delete old
                /*
                var dtSAMPLEID = Db.Ado.GetDataTable(@$"SELECT SAMPLEID FROM INSPECT_TENSILE_D_R WHERE INSPECT_DEV1ID='{parm.INSPECT_DEV1ID}' GROUP BY SAMPLEID");
                int number = 1;
                foreach (DataRow item in dtSAMPLEID.Rows)
                {
                    string sampleId = item[0].ToString();
                    //1. 获得@检验内容编码
                    DataTable dtCOLUM001CODE = Db.Ado.GetDataTable($"SELECT COLUM001CODE FROM COLUM001 WHERE COLUM001ID='{COLUM001ID}'");
                    string COLUM001CODEs = string.Empty;
                    foreach (DataRow dr in dtCOLUM001CODE.Rows)
                    {
                        COLUM001CODEs += "," + dr[0].ToString();
                    }
                    COLUM001CODEs = COLUM001CODEs.TrimEnd(',');
                    //2. 获得@检验值
                    DataTable dtAvgValue = Db.Ado.GetDataTable($"SELECT AvgValue FROM INSPECT_TENSILE_D_R WHERE  INSPECT_DEV1ID='{parm.INSPECT_DEV1ID}' AND SAMPLEID ='{sampleId}'");
                    string AvgValues = string.Empty;
                    foreach (DataRow dr in dtAvgValue.Rows)
                    {
                        AvgValues += ",'" + dr[0].ToString() + "'";
                    }
                    AvgValues = AvgValues.TrimEnd(',');
                    if(dtCOLUM001CODE.Rows.Count!= dtAvgValue.Rows.Count)
                    {
                        throw new Exception($"{sampleId}检验内容编码{COLUM001CODEs}和检测值{AvgValues}数量不匹配");
                    }

                    sql = @$"INSERT INSPECT_ZONE (INSPECT_ZONECREATEUSER,INSPECT_ZONECREATEDATE,INSPECT_ZONEID,INSPECTTYPE,COLUM002ID,CUSTOM_ITEMID,LOTNO,INSPECTCODE,PCSCODE,ISAUTO {COLUM001CODEs} ) VALUES  (
'{parm.UserName}'                        --传参@userName
,CONVERT(varchar(20),GETDATE(),120)
,newid()
,'{INSPECT_PUR}'                      --@INSPECT_PUR
,'{COLUM002ID}'                       --@COLUM002ID
,'{ITEMID}'                           --@ITEMID
,'{LOTID}'                            --@LOTID
,'{INSPECT_CODE}'                     --@INSPECT_CODE 检验单号
,'{number++}'                         --样本序号 (第1个SAMPLEID 给1，第2个给2,依次类推)
,'0'                                 --固定给 0
{AvgValues} )";
                    Db.Ado.ExecuteCommand(sql);
                }*/
                #endregion

                // 提交事务
                Db.Ado.CommitTran();
            }
            catch (Exception)
            {
                // 回滚事务
                Db.Ado.RollbackTran();
                throw;
            }
            #endregion

            byte[] fileContents = GetInspectImage(listToSave);

            //返回文件流
            var fileName = $"{ITEMID}_{LOTID}{INSPECT_DATE}.jpg";
            string filePath = Path.Combine(AppSettings.Configuration["AppSettings:FileServerPath"], @$"Test\TENSILE\{ITEMID}\{fileName}");

            //保存到SCANDOC
            SaveToScanDoc("拉力机检测图", fileContents, filePath, INSPECT_CODE, parm.INSPECT_DEV1ID, COLUM002ID, COLUM001ID);
        }

        private INSPECT_TENSILE_D GetDetailByInspect(DataRow item,string INSPECT_DEV1ID)
        {
            var newItem = new INSPECT_TENSILE_D();
            newItem.INSPECT_TENSILE_DID = Guid.NewGuid().ToString();
            var properties = typeof(INSPECT_TENSILE_D).GetProperties();
            foreach (var prop in properties)
            {
                string columnName = prop.Name; // 默认按类的属性名查找
                // 赋值逻辑
                if (item.Table.Columns.Contains(columnName) && item[columnName] != DBNull.Value)
                {
                    Type propType = Nullable.GetUnderlyingType(prop.PropertyType) ?? prop.PropertyType;
                    object value = Convert.ChangeType(item[columnName], propType);
                    prop.SetValue(newItem, value);
                }
            }
            newItem.INSPECT_DEV1ID = INSPECT_DEV1ID;
            return newItem;
        }
        
        private byte[] GetInspectImage(List<INSPECT_TENSILE_D> listInspectData){
            byte[] result = null;

            // 创建一个 PlotModel 对象，它代表整个图表
            var plotModel = new PlotModel {
                Title = "拉力机检测图",
                Background = OxyColors.White
            };
            var legend = new Legend
            {
                LegendPlacement = LegendPlacement.Inside, // 图例放在绘图区域外部
                LegendPosition = LegendPosition.TopLeft,  // 设置左上角
                LegendOrientation = LegendOrientation.Vertical, // 纵向排列
                LegendBackground = OxyColors.White, // 背景色
            };

            plotModel.Legends.Add(legend); // 添加图例

            int xMax = 1; int yMax = 1;
            foreach (var detail in listInspectData)
            {
                string trimmedInput = detail.X_AXIS.Trim('{', '}');
                string[] numberStrings = trimmedInput.Split(',');
                double[] dataArraysX = Array.ConvertAll(numberStrings, double.Parse);

                trimmedInput = detail.Y_AXIS.Trim('{', '}');
                numberStrings = trimmedInput.Split(',');
                double[] dataArraysY = Array.ConvertAll(numberStrings, double.Parse);
                // 更新 xMax 和 yMax
                if (dataArraysX.Length > 0)
                    xMax = Math.Max(xMax, (int)dataArraysX.Max());

                if (dataArraysY.Length > 0)
                    yMax = Math.Max(yMax, (int)dataArraysY.Max());
            }

            // 计算 Max 的 110%，并取整数
            xMax = (int)Math.Ceiling(xMax * 1.1);
            yMax = (int)Math.Ceiling(yMax * 1.1);

            // 创建一个线性坐标轴作为 X 轴
            plotModel.Axes.Add(new LinearAxis {
            Position = AxisPosition.Bottom,
            Title = "变形(mm)",
            Minimum = 0,
            Maximum = xMax
            });

            // 创建一个线性坐标轴作为 Y 轴
            plotModel.Axes.Add(new LinearAxis {
                Position = AxisPosition.Left,
                Title = "力(gt)",
                Minimum = 0,
                Maximum = yMax
            });

            int i = 1;
            Random random = new Random();
            foreach (var detail in listInspectData) {
                string trimmedInput = detail.X_AXIS.Trim('{', '}');
                string[] numberStrings = trimmedInput.Split(',');
                double[] dataArraysX = Array.ConvertAll(numberStrings, double.Parse);

                trimmedInput = detail.Y_AXIS.Trim('{', '}');
                numberStrings = trimmedInput.Split(',');
                double[] dataArraysY = Array.ConvertAll(numberStrings, double.Parse);

                // 生成随机颜色
                byte r = (byte)random.Next(256);
                byte g = (byte)random.Next(256);
                byte b = (byte)random.Next(256);
                OxyColor randomColor = OxyColor.FromRgb(r, g, b);

                var lineSeries = new LineSeries {
                    Title = $"Plot{i++}",
                    MarkerType = MarkerType.Circle,
                    MarkerSize = 0.2,
                    MarkerStroke = randomColor,
                    StrokeThickness = 1,
                    MarkerFill = OxyColors.White,
                Color = randomColor
                };

                for (int j = 0; j < dataArraysX.Length; j++) {
                    DataPoint p = new DataPoint(dataArraysX[j], dataArraysY[j]);
                    lineSeries.Points.Add(p);
                }

                // 将曲线添加到图表模型中
                plotModel.Series.Add(lineSeries);
            }

            // 保存图表为 PNG 图片
            var exporter = new PngExporter { Width = 800, Height = 600, Resolution = 50 };
            using (MemoryStream stream = new MemoryStream()) {
                exporter.Export(plotModel, stream);
                stream.Position = 0;
                result = stream.ToArray();
                stream.Flush();
            }
            return result;
        }
        private void SaveToScanDoc(string docType, byte[] fileContents, string scandocName, string peopleId, string INSPECT_DEV1ID,string COLUM002ID, string COLUM001ID) {
            FileInfo file = new FileInfo(scandocName);
            if (!file.Directory.Exists) {
                file.Directory.Create();
            }
            if (fileContents != null)
            {
                File.WriteAllBytes(scandocName, fileContents);
            }

            Db.Ado.ExecuteCommand($"DELETE SCANDOC WHERE COLUM002ID='{COLUM002ID}' AND COLUM001ID='{COLUM001ID}'");

            string sql = @"
            INSERT INTO SCANDOC (TENID, SCANDOCID, SCANDOCCODE, SCANDOCNAME, DOCTYPE, PEOPLEID, createdate, SCANDOC_user,INSPECT_DEV1ID,COLUM002ID, COLUM001ID)
            VALUES ('001', @SCANDOCID, @SCANDOCID, @SCANDOCNAME, @DOCTYPE, @PEOPLEID, CONVERT(VARCHAR(20), GETDATE(), 120), @PEOPLEID, @INSPECT_DEV1ID,@COLUM002ID, @COLUM001ID)";

            // 定义参数
            var parameters = new SugarParameter[]
            {
                new SugarParameter("@SCANDOCID", Guid.NewGuid().ToString()),
                new SugarParameter("@SCANDOCNAME", scandocName.Replace(AppSettings.Configuration["AppSettings:FileServerPath"],@"\")),
                new SugarParameter("@DOCTYPE", docType),
                new SugarParameter("@PEOPLEID", peopleId),
                new SugarParameter("@INSPECT_DEV1ID", INSPECT_DEV1ID),
                new SugarParameter("@COLUM002ID", COLUM002ID),
                new SugarParameter("@COLUM001ID", COLUM001ID)
            };

            // 执行 SQL 命令
            Db.Ado.ExecuteCommand(sql, parameters);
        }
        #endregion

        #region GetInspectBatchReport
        public void GetInspectBatchReport(InspectInputByCodeDto parm){
            var dtINSPECT_DEVID = Db.Ado.GetDataTable(@$"SELECT INSPECT_DEV1ID FROM INSPECT_DEV1 WHERE DOC_CODE = '{parm.DOC_CODE}' AND INSPECT_DEV ='{parm.INSPECT_DEV}'");
            if (dtINSPECT_DEVID.Rows.Count == 0)
            {
                throw new Exception("没有找到任何记录.");
            }
            foreach (DataRow dataRow in dtINSPECT_DEVID.Rows)
            {
                string INSPECT_DEV1ID = dataRow["INSPECT_DEV1ID"].ToString();
                GetInspectReport(new InspectInputDto() { INSPECT_DEV1ID = INSPECT_DEV1ID, UserName = parm.UserName });
            }
        }
        #endregion

        #region GetCPKfile
        public void GetCPKfile(string INSPECT_DEV2ID, string userName)
        {

            string INSPECT_CODE;//检验单号
            string INSPECT_PUR; //检验来源

            //测试
            //GET_INSPECT_LIST("INSPECT_ZONE_021", "IQC_2025030003", "IQC");
            #region 三．执行存储过程  
            //执行存储过程
            //如果 返回值前两位 =“错误”，则 退出API，将返回值返回
            // 执行 SQL 命令
            string INPECT_CODE = Db.Ado.GetString(@$"EXEC DEV2_GET_INPECT_CODE '{INSPECT_DEV2ID}'");
            if (INPECT_CODE.Contains("错误"))
            {
                throw new Exception($"DEV2_GET_INPECT_CODE获取异常：{INPECT_CODE}");
            }
            #endregion

            #region 一．获得检验单号和检验来源
            string sql = @"SELECT Top 1 ISNULL(INSPECT_DEV2.INSPECT_CODE,'') AS INSPECT_CODE,ISNULL(INSPECT_DEV2.INSPECT_PUR,'') As INSPECT_PUR    
                        FROM INSPECT_DEV2 
                        LEFT JOIN INSPECT_FLOW ON INSPECT_FLOW.INSPECT_FLOWID=INSPECT_DEV2.INSPECT_FLOWID
                        LEFT JOIN COLUM002 ON COLUM002.COLUM002ID=INSPECT_DEV2.COLUM002ID
                        WHERE INSPECT_DEV2ID=@INSPECT_DEV2ID";
            // 定义参数
            var parameters = new SugarParameter[]
            {
                new SugarParameter("@INSPECT_DEV2ID", INSPECT_DEV2ID)
            };

            // 执行 SQL 命令
            var dataTable = Db.Ado.GetDataTable(sql, parameters);

            if (dataTable.Rows.Count > 0)
            {
                INSPECT_CODE = dataTable.Rows[0]["INSPECT_CODE"].ToString();
                INSPECT_PUR = dataTable.Rows[0]["INSPECT_PUR"].ToString();
            }
            else
            {
                throw new Exception("未获取到检验单号和检验来源");
            }
            #endregion

            #region 二．判断检验单是否已经完成
            //如果 检验单号 不为空 并且 检验来源 不为空 @动态表名 =“INSPECT_”+@INSPECT_PUR
            //@动态表面ID栏位 = @动态表名 +“ID”
            //    SELECT STATE FROM @动态表名 WHERE @动态表面ID栏位 = @INSPECT_CODE
            //    如果 STATE =“已完成”
            //    返回错误：”检验单已完成，无法再次产生检验报告” 提出API
            string table = string.Empty;
            string surfaceId = string.Empty;

            if (!string.IsNullOrEmpty(INSPECT_CODE) && !string.IsNullOrEmpty(INSPECT_PUR))
            {
                table = "INSPECT_" + INSPECT_PUR;
                surfaceId = table + "ID";
                string state = "";

                sql = @$"SELECT STATE FROM {table} WHERE {surfaceId}=@INSPECT_CODE";
                // 定义参数
                parameters = new SugarParameter[]
                {
                    new SugarParameter("@INSPECT_CODE", INSPECT_CODE)
                };
                // 执行 SQL 命令
                dataTable = Db.Ado.GetDataTable(sql, parameters);

                if (dataTable.Rows.Count > 0)
                {
                    state = dataTable.Rows[0]["STATE"].ToString();
                }
                else
                {
                    throw new Exception("未获取到检验单状态");
                }

                if (state == "已完成")
                {
                    throw new Exception("检验单已完成，无法再次产生检验报告");
                }
            }
            else
            {
                throw new Exception("检验单号或检验来源为空");
            }
            #endregion

            #region 四．重新获得主档资料
            string COLUM002ID = "";
            string ITEMID = "";
            string LOTID = "";
            string INSPECT_FLOWID = "";
            string INSPECT_DATE = "";
            string ITEMNAME = "";

            sql = @"SELECT Top 1 ISNULL(INSPECT_DEV2.INSPECT_CODE, '') AS INSPECT_CODE
                    ,ISNULL(INSPECT_DEV2.INSPECT_PUR, '') AS INSPECT_PUR  -- 检验来源 IQC OQC
                    ,ISNULL(INSPECT_FLOW.ITEMID, '') AS ITEMID-- 物料编码(有个低代码待办)
                    ,ISNULL(INSPECT_DEV2.LOTID, '') AS LOTID-- 批次号
                    ,ISNULL(INSPECT_DEV2.DOC_CODE, '') AS DOC_CODE-- 来源单号
                    ,ISNULL(INSPECT_DEV2.COLUM002ID, '') AS COLUM002ID
                    ,ISNULL(COLUM002.COC_ATTR, '') AS COC_ATTR--特殊设定
                    ,ISNULL(INSPECT_DEV2.INSPECT_FLOWID, '') AS INSPECT_FLOWID,INSPECT_DATE,ITEMNAME
                    FROM INSPECT_DEV2
                    LEFT JOIN INSPECT_FLOW ON INSPECT_FLOW.INSPECT_FLOWID = INSPECT_DEV2.INSPECT_FLOWID
                    LEFT JOIN COLUM002 ON COLUM002.COLUM002ID = INSPECT_DEV2.COLUM002ID
                    WHERE INSPECT_DEV2ID = @INSPECT_DEV2ID";
            parameters = new SugarParameter[]
            {
                new SugarParameter("@INSPECT_DEV2ID", INSPECT_DEV2ID)
            };

            // 执行 SQL 命令
            dataTable = Db.Ado.GetDataTable(sql, parameters);

            if (dataTable.Rows.Count > 0)
            {
                COLUM002ID = dataTable.Rows[0]["COLUM002ID"].ToString();
                ITEMID = dataTable.Rows[0]["ITEMID"].ToString();
                LOTID = dataTable.Rows[0]["LOTID"].ToString();
                INSPECT_FLOWID = dataTable.Rows[0]["INSPECT_FLOWID"].ToString();
                INSPECT_DATE = dataTable.Rows[0]["INSPECT_DATE"].ToString();
                ITEMNAME = dataTable.Rows[0]["ITEMNAME"].ToString();
            }

            #endregion

            #region 五．获得一些资料 为第七、第八步使用
            //得到 @COLUM002结果集
            sql = @"SELECT * FROM COLUM002 where COLUM002ID = @COLUM002ID";
            parameters = new SugarParameter[]
            {
                new SugarParameter("@COLUM002ID", COLUM002ID)
            };
            // 执行 SQL 命令
            dataTable = Db.Ado.GetDataTable(sql, parameters);
            int count_COLUM002 = dataTable.Rows.Count;

            int dtColumn1Count = Db.Ado.GetInt(@$"SELECT count(*) FROM COLUM001 where COLUM002ID = '{COLUM002ID}' AND COLUM001CODE LIKE 'A%'");

            //得到 @第一个样本ID
            sql = @"SELECT TOP 1 SAMPLEID FROM INSPECT_2D  WHERE INSPECT_DEV2ID = @INSPECT_DEV2ID";
            parameters = new SugarParameter[]
            {
                new SugarParameter("@INSPECT_DEV2ID", INSPECT_DEV2ID)
            };
            int sampleId = Db.Ado.GetInt(sql, parameters);

            if (sampleId == 0 && dtColumn1Count == 0)
            {
                throw new Exception("没有实测数据切检验内容为空!");
            }

            //如果 INSPECT_2D异常结果集 记录数> 0 则
            //返回错误：“当前设备原始LOCATION资料和当前选择的检验项目的检验内容不一致”
            //得到 INSPECT_2D异常结果集
            sql = @"SELECT * FROM  INSPECT_2D
                LEFT JOIN COLUM001 ON INSPECT_2D.LOCATION = COLUM001.COLUM001NAME
                WHERE INSPECT_DEV2ID = @INSPECT_DEV2ID  AND SAMPLEID = @SAMPLEID
                AND COLUM001.COLUM002ID = @COLUM002ID  AND COLUM001.COLUM001CODE IS NULL
                AND COLUM001.COLUM001CODE LIKE 'A%'
                ORDER BY INSPECT_2D.LOCATION";
            parameters = new SugarParameter[]
            {
                new SugarParameter("@INSPECT_DEV2ID", INSPECT_DEV2ID),
                new SugarParameter("@SAMPLEID", sampleId),
                new SugarParameter("@COLUM002ID", COLUM002ID)
            };
            // 执行 SQL 命令
            dataTable = Db.Ado.GetDataTable(sql, parameters);

            int count_INSPECT_2D = dataTable.Rows.Count;

            #region 七．进一步检验

            if (count_INSPECT_2D > 0 && dtColumn1Count != 0)
            {
                throw new Exception("当前设备原始LOCATION资料和当前选择的检验项目的检验内容不一致");
            }
            #endregion

            #endregion

            #region 六 .获取应检样本数 @检验批次数量LOT_QTY
            //六．获得应检样本数
            //由@COLUM002ID获得应检样本数
            //执行存储过程：GET_INPECT_CNT @COLUM002ID, @检验批次数量LOT_QTY
            //@应检样本数 = 结果集CNT列的值

            int lot_Qyt = 0;
            sql = @$"SELECT top 1 ISNULL(LOT_QTY,0)  FROM {table} WHERE {surfaceId}=@INSPECT_CODE";
            // 定义参数
            parameters = new SugarParameter[]
            {
                new SugarParameter("@INSPECT_CODE", INSPECT_CODE)
            };
            // 执行 SQL 命令
            dataTable = Db.Ado.GetDataTable(sql, parameters);
            if (dataTable.Rows.Count > 0)
            {
                lot_Qyt = int.Parse(dataTable.Rows[0][0].ToString());
            }
            else
            {
                throw new Exception("未获取到检验批次数量LOT_QTY");
            }

            //获得应检样本量
            int inspect_Qyt = Db.Ado.GetInt(@$"EXEC GET_INPECT_CNT  '{COLUM002ID}','{lot_Qyt}'");

            #endregion

            #region 九．将 INSPECT_2D 的检验内容（检验位置）传递给QMS
            //如果 @COLUM002结果集 记录数 = 0 或者为NULL
            if (dtColumn1Count == 0)
            {
                try
                {
                    // 开启事务
                    Db.Ado.BeginTran();

                    #region 1.根据@COLUM002ID 产生检验内容（COLUM001）
                    string CREATEUSER = "system";
                    string TENID = "001";
                    string COLUM001ID = "";
                    string @CUSTOMID = "";
                    string RE = "";
                    string MAX_VALUE = "";  //--INSPECT_2D.VALUE2
                    string STD_VALUE = "";  //标准值: INSPECT_2D.VALUE1
                    string COLUM001NAME = "";//--INSPECT_2D.LOCATION
                    string INSPECT_LEVELID = "";
                    string OPTIONS = "";
                    string COLUM001CODE = "";//--第一个A01，第二个A02，依次类推
                    string MIN_VALUE = "";  //INSPECT_2D.VALUE3
                    string REMARK1 = "二次元";
                    string AC = "";
                    string INSPECT_AQLCODE = "";
                    string REMARK = "";
                    string REMARK2 = "";
                    string COLUM0A10 = "Num";
                    string INSPECT_PLANID = "c6cae8ea-24e0-4fbe-ac6e-775843549e5b";
                    string INSPECT_2DID;
                    //根据 @COLUM002ID 产生检验内容（COLUM001）
                    //--得到第一个样本的所有检验内容
                    sql = @$"SELECT VALUE2,VALUE1,INSPECT_2D.LOCATION,VALUE3,INSPECT_2DID,* FROM  INSPECT_2D
                        WHERE  INSPECT_DEV2ID = @INSPECT_DEV2ID  AND SAMPLEID = @SAMPLEID ORDER BY INSPECT_2D.LOCATION";

                    parameters = new SugarParameter[]
                    {
                    new SugarParameter("@INSPECT_DEV2ID", INSPECT_DEV2ID),
                    new SugarParameter("@SAMPLEID", sampleId),
                    };
                    // 执行 SQL 命令
                    dataTable = Db.Ado.GetDataTable(sql, parameters);

                    if (dataTable.Rows.Count > 0)
                    {
                        for (int i = 0; i < dataTable.Rows.Count; i++)
                        {
                            STD_VALUE = dataTable.Rows[i]["VALUE1"].ToString();
                            MAX_VALUE = Math.Abs(double.Parse(dataTable.Rows[i]["VALUE2"].ToString())).ToString();
                            MIN_VALUE = Math.Abs(double.Parse(dataTable.Rows[i]["VALUE3"].ToString())).ToString();
                            COLUM001NAME = dataTable.Rows[i]["LOCATION"].ToString();
                            COLUM001CODE = "A" + (i + 1).ToString("D2");
                            INSPECT_2DID = dataTable.Rows[i]["INSPECT_2DID"].ToString();
                            COLUM001ID = Guid.NewGuid().ToString();

                            sql = @$"INSERT INTO COLUM001(COLUM001CREATEDATE, COLUM001CREATEUSER, TENID, COLUM001ID, 
                                CUSTOMID, RE, MAX_VALUE, STD_VALUE, COLUM001NAME, INSPECT_LEVELID, OPTIONS, 
                                COLUM001CODE, MIN_VALUE, COLUM002ID, REMARK1, AC, INSPECT_AQLCODE, REMARK, REMARK2, 
                                COLUM0A10, INSPECT_PLANID) 
                                VALUES( 
                                CONVERT(VARCHAR(20), GETDATE(), 120), @CREATEUSER, @TENID, @COLUM001ID, @CUSTOMID, 
                                @RE, @MAX_VALUE, @STD_VALUE, @COLUM001NAME, @INSPECT_LEVELID, @OPTIONS, @COLUM001CODE, 
                                @MIN_VALUE, @COLUM002ID, @REMARK1, @AC, @INSPECT_AQLCODE, @REMARK, @REMARK2, @COLUM0A10, @INSPECT_PLANID)";

                            parameters = new SugarParameter[]
                            {
                            new SugarParameter("@CREATEUSER", CREATEUSER),
                            new SugarParameter("@TENID", TENID),
                            new SugarParameter("@COLUM001ID", COLUM001ID),
                            new SugarParameter("@CUSTOMID", CUSTOMID),
                            new SugarParameter("@RE", RE),
                            new SugarParameter("@MAX_VALUE", MAX_VALUE),
                            new SugarParameter("@STD_VALUE", STD_VALUE),
                            new SugarParameter("@COLUM001NAME", COLUM001NAME),
                            new SugarParameter("@INSPECT_LEVELID", INSPECT_LEVELID),
                            new SugarParameter("@OPTIONS", OPTIONS),
                            new SugarParameter("@COLUM001CODE", COLUM001CODE),
                            new SugarParameter("@MIN_VALUE", MIN_VALUE),
                            new SugarParameter("@COLUM002ID", COLUM002ID),
                            new SugarParameter("@REMARK1", REMARK1),
                            new SugarParameter("@AC", AC),
                            new SugarParameter("@INSPECT_AQLCODE", INSPECT_AQLCODE),
                            new SugarParameter("@REMARK", REMARK),
                            new SugarParameter("@REMARK2", REMARK2),
                            new SugarParameter("@COLUM0A10", COLUM0A10),
                            new SugarParameter("@INSPECT_PLANID", INSPECT_PLANID),
                            };
                            // 执行 SQL 命令
                            Db.Ado.ExecuteCommand(sql, parameters);

                            #region 2.回写A01的编码给原始资料
                            sql = @$"UPDATE INSPECT_2D SET COLUM001CODE = @COLUM001CODE WHERE INSPECT_2DID = @INSPECT_2DID";
                            parameters = new SugarParameter[]
                            {
                            new SugarParameter("@COLUM001CODE", COLUM001CODE),
                            new SugarParameter("@INSPECT_2DID", INSPECT_2DID),
                            };
                            // 执行 SQL 命令
                            Db.Ado.ExecuteCommand(sql, parameters);

                            //Db.Ado.ExecuteCommand(@$"UPDATE INSPECT_2D SET COLUM001CODE ='{COLUM001CODE}' WHERE INSPECT_2DID = '{INSPECT_2DID}'");
                            #endregion
                        }
                    }
                    #endregion

                    // 提交事务
                    Db.Ado.CommitTran();
                }
                catch (Exception)
                {
                    // 回滚事务
                    Db.Ado.RollbackTran();
                    throw;
                }
            }
            #endregion

            #region 八．更新检验内容的CODE给 INSPECT_2D
            //（通过LOCATION关联检验内容，更新设备原始记录）
            sql = @$"UPDATE INSPECT_2D SET
                        COLUM001CODE = COLUM001.COLUM001CODE,ADD_VALUE = COLUM001.ADD_VALUE
                        FROM INSPECT_2D
                        LEFT JOIN COLUM001 ON INSPECT_2D.LOCATION = COLUM001.COLUM001NAME
                        WHERE INSPECT_DEV2ID = @INSPECT_DEV2ID
                        --AND SAMPLEID = @SAMPLEID
                        AND COLUM001.COLUM002ID = @COLUM002ID
                        AND COLUM001.COLUM001CODE IS NOT NULL";
            // 定义参数
            parameters = new SugarParameter[]
            {
                    new SugarParameter("@INSPECT_DEV2ID", INSPECT_DEV2ID),
                    //new SugarParameter("@SAMPLEID", sampleId),
                    new SugarParameter("@COLUM002ID", COLUM002ID)

            };

            // 执行 SQL 命令
            Db.Ado.ExecuteCommand(sql, parameters);
            #endregion

            #region 十.将INSPECT_2D实际值传入QMS
            //1.获得INSPECT_2D实际测量的样本数量
            int actCNT = Db.Ado.GetInt(@$"SELECT COUNT(DISTINCT SAMPLEID) AS CNT FROM INSPECT_2D WHERE INSPECT_DEV2ID ='{INSPECT_DEV2ID}'");
            //2.如果 @CNT > 0 则
            if (actCNT > 0)
            {
                try
                {
                    // 开启事务
                    Db.Ado.BeginTran();

                    //2.1 删除QMS中的记录：@COLUM002ID @INSPECT_CODE
                    sql = @$" DELETE INSPECT_ZONE WHERE COLUM002ID = @COLUM002ID AND INSPECTCODE = @INSPECT_CODE";
                    parameters = new SugarParameter[]
                    {
                    new SugarParameter("@COLUM002ID", COLUM002ID),
                    new SugarParameter("@INSPECT_CODE", INSPECT_CODE),
                    };
                    Db.Ado.ExecuteCommand(sql, parameters);
                    //2.2 开始同步记录
                    //循环每个SAMPLEID
                    sql = @$" SELECT  SAMPLEID  FROM INSPECT_2D WHERE  INSPECT_DEV2ID=@INSPECT_DEV2ID GROUP BY SAMPLEID";
                    parameters = new SugarParameter[]
                    {
                    new SugarParameter("@INSPECT_DEV2ID", INSPECT_DEV2ID),
                    };
                    dataTable = Db.Ado.GetDataTable(sql, parameters);

                    if (dataTable.Rows.Count > 0)
                    {
                        for (int i = 0; i < dataTable.Rows.Count; i++)
                        {
                            #region 1 循环结果集
                            sql = @$"SELECT COLUM001CODE  AS 检验内容编码, MAX(VALUE)  AS 检验值
                            FROM INSPECT_2D WHERE INSPECT_DEV2ID = @INSPECT_DEV2ID
                            AND SAMPLEID = @SAMPLEID
                            GROUP BY COLUM001CODE
                            ORDER BY COLUM001CODE";
                            parameters = new SugarParameter[]
                            {
                            new SugarParameter("@INSPECT_DEV2ID", INSPECT_DEV2ID),
                            new SugarParameter("@SAMPLEID",  Convert.ToInt32(dataTable.Rows[i]["SAMPLEID"])),
                            };
                            var dataTable1 = Db.Ado.GetDataTable(sql, parameters);

                            string sel_Col = "";
                            string sel_VALUES = "";

                            if (dataTable1.Rows.Count > 0)
                            {
                                for (int j = 0; j < dataTable1.Rows.Count; j++)
                                {
                                    sel_Col += "," + dataTable1.Rows[j]["检验内容编码"].ToString();
                                    sel_VALUES += "," + "'" + dataTable1.Rows[j]["检验值"].ToString() + "'";
                                }
                            }
                            #endregion
                            #region 2.插入检验结果
                            sql = @$"INSERT INSPECT_ZONE(INSPECT_ZONECREATEUSER, INSPECT_ZONECREATEDATE, INSPECT_ZONEID, INSPECTTYPE, COLUM002ID, 
                            CUSTOM_ITEMID, LOTNO, INSPECTCODE, PCSCODE, ISAUTO{sel_Col}) 
                            VALUES(
                            '{userName}',CONVERT(varchar(20), GETDATE(), 120), '{Guid.NewGuid().ToString()}','{INSPECT_PUR}', '{COLUM002ID}',
                            '{ITEMID}','{LOTID}','{INSPECT_CODE}','{i.ToString()}','1'{sel_VALUES})";

                            Db.Ado.ExecuteCommand(sql);

                            #endregion
                        }
                    }
                    // 事务提交
                    Db.Ado.CommitTran();
                }
                catch (Exception)
                {
                    // 回滚事务
                    Db.Ado.RollbackTran();
                    throw;
                }
            }

            #endregion

            #region 十一．让QMS产生随机值
            //1.如果 @应检样本数 > @CNT 则 @产生样本数量 = @应检样本数 - @CNT
            int generateQty = 0;

            if (actCNT < inspect_Qyt)
            {
                generateQty = inspect_Qyt - actCNT;
            }
            //GET_INSPECT_RANK(COLUM002ID, INSPECT_CODE, generateQty, INSPECT_PUR, userName);
            Db.Ado.ExecuteCommand(@$"EXEC GET_INSPECT_RANK  '{COLUM002ID}','{INSPECT_CODE}','{generateQty}','{INSPECT_PUR}','{userName}'");
            #endregion

            #region 十二．产生【CPK-扩展项目】的随机值
            //1.得到CPK - 扩展项结果集
            sql = @$"SELECT COLUM002ID FROM COLUM002 WHERE INSPECT_FLOWID = @INSPECT_FLOWID and COC_ATTR ='COC_ATTR_002'";
            parameters = new SugarParameter[]
            {
                new SugarParameter("@INSPECT_FLOWID", INSPECT_FLOWID)
            };
            // 执行 SQL 命令
            dataTable = Db.Ado.GetDataTable(sql, parameters);

            string kz_COLUM002ID = string.Empty;

            //2.循环CPK - 扩展项结果集
            if (dataTable.Rows.Count > 0)
            {
                for (int i = 0; i < dataTable.Rows.Count; i++)
                {
                    kz_COLUM002ID = dataTable.Rows[i]["COLUM002ID"].ToString();
                    //1.获得应检样本量
                    inspect_Qyt = Db.Ado.GetInt(@$"EXEC GET_INPECT_CNT  '{kz_COLUM002ID}','{lot_Qyt}'");
                    //2.产生检验随机值
                    //传入参数：
                    //@COLUM002ID(检验项目)--CPK - 扩展项结果集.@COLUM002ID
                    //@INSPECT_CODE(检验单号)(前文获取过）
                    //@产生样本数--@CPK - 扩展项目应检样本数
                    //@INSPECT_PUR--检验类别(前文获取过）
                    //@userName
                    //GET_INSPECT_RANK(kz_COLUM002ID, INSPECT_CODE, inspect_Qyt, INSPECT_PUR, userName);
                    Db.Ado.ExecuteCommand(@$"EXEC GET_INSPECT_RANK  '{kz_COLUM002ID}','{INSPECT_CODE}','{inspect_Qyt}','{INSPECT_PUR}','{userName}'");
                }
            }
            #endregion

            #region 十三．产生CPK报告

            #region 得到区块1的 

            DataSet block1DateSet = GetCPKBlock1(COLUM002ID, INSPECT_CODE, INSPECT_PUR);

            // 确保 DataSet 中有表
            if (block1DateSet != null && block1DateSet.Tables.Count > 0)
            {
                DataTable dt = block1DateSet.Tables[0];

                // 找到 ISAUTO 的列索引
                int isautoIndex = dt.Columns.IndexOf("ISAUTO");

                if (isautoIndex != -1)
                {
                    // 创建要保留的列名列表
                    List<string> columnsToKeep = new List<string>();

                    for (int i = isautoIndex + 1; i < dt.Columns.Count; i++)
                    {
                        string colName = dt.Columns[i].ColumnName;

                        if (colName.StartsWith("A", StringComparison.OrdinalIgnoreCase))
                        {
                            columnsToKeep.Add(colName);
                        }
                    }

                    // 找出需要删除的列（不在保留列表中的）
                    var columnsToRemove = dt.Columns
                        .Cast<DataColumn>()
                        .Where(col => !columnsToKeep.Contains(col.ColumnName))
                        .ToList();

                    // 执行删除
                    foreach (var col in columnsToRemove)
                    {
                        dt.Columns.Remove(col);
                    }
                }
            }
            #endregion

            #region 得到区块2的 DataSetlist

            List<DataSet> block2DateSetList = GetCPKBlock2(INSPECT_FLOWID, INSPECT_CODE, INSPECT_PUR);

            foreach (var ds in block2DateSetList)
            {
                if (ds != null && ds.Tables.Count > 0)
                {
                    DataTable dt = ds.Tables[0];

                    // 找到 ISAUTO 的列索引
                    int isautoIndex = dt.Columns.IndexOf("ISAUTO");

                    if (isautoIndex != -1)
                    {
                        // 找出要保留的列名（ISAUTO 之后、且不是 A 开头）
                        List<string> columnsToKeep = new List<string>();

                        for (int i = isautoIndex + 1; i < dt.Columns.Count; i++)
                        {
                            string colName = dt.Columns[i].ColumnName;
                            columnsToKeep.Add(colName);
                        }

                        // 找出需要删除的列（不在保留列表中的）
                        var columnsToRemove = dt.Columns
                            .Cast<DataColumn>()
                            .Where(col => !columnsToKeep.Contains(col.ColumnName))
                            .ToList();

                        // 删除列
                        foreach (var col in columnsToRemove)
                        {
                            dt.Columns.Remove(col);
                        }
                    }

                }
            }
            #endregion

            #endregion

            //生成Excel
            byte[] fileContents = GetExcelContent(block1DateSet, block2DateSetList, ITEMNAME, DateTime.Parse(INSPECT_DATE).ToString("yyyy/MM/dd"));

            //返回文件流
            var fileName = $"{ITEMID}_{LOTID}{DateTime.Parse(INSPECT_DATE).ToString("yyyyMMddHHmmss")}.xlsx";
            string filePath = Path.Combine(AppSettings.Configuration["AppSettings:FileServerPath"], @$"Test\2D\{ITEMID}\{fileName}");

            //保存到SCANDOC
            SaveToCPKScanDoc("CPK报告", fileContents, filePath, INSPECT_CODE, INSPECT_DEV2ID, COLUM002ID);
        }

        #region GET_INSPECT_RANK
        /*改为存储过程
        public DataTable GET_INSPECT_RANK(string COLUM002ID, string INSPECT_CODE, int intSampleCount, string INSPECT_PUR, string userName)
        {
            #region 0.删除QMS中的随机记录
            string sql = @"DELETE FROM INSPECT_ZONE WHERE COLUM002ID = @COLUM002ID AND INSPECTCODE = @INSPECT_CODE AND ISAUTO = '1'";
            var parameters = new SugarParameter[]
            {
                new SugarParameter("@COLUM002ID", COLUM002ID),
                new SugarParameter("@INSPECT_CODE", INSPECT_CODE),
            };
            Db.Ado.ExecuteCommand(sql, parameters);
            #endregion

            #region 2.获得已存在记录数：
            int exist_Qyt = 0;
            sql = @$"SELECT COUNT(1) FROM INSPECT_ZONE WHERE INSPECTCODE = @INSPECTCODE";
            // 定义参数
            parameters = new SugarParameter[]
            {
                new SugarParameter("@INSPECTCODE", INSPECT_CODE)
            };
            // 执行 SQL 命令
            var dataTable = Db.Ado.GetDataTable(sql, parameters);
            if (dataTable.Rows.Count > 0)
            {
                exist_Qyt = int.Parse(dataTable.Rows[0][0].ToString());
            }
            #endregion

            #region 3.获得@ITEMID，@LOTID
            //@动态表名 =“INSPECT_”+@INSPECT_PUR
            //@动态表面ID栏位 = @动态表名 +“ID” 
            //SELECT @ITEMID = ITEMID，@LOTID = LOTID FROM @动态表名 WHERE @动态表面ID栏位 = @INSPECT_CODE
            string table = string.Empty;
            string surfaceId = string.Empty;
            string itemId = string.Empty;
            string lotId = string.Empty;

            table = "INSPECT_" + INSPECT_PUR;
            surfaceId = table + "ID";

            //wjj
            //sql = @$"SELECT top 1 ITEMID,LOTID FROM {table} WHERE {surfaceId}=@INSPECT_CODE";
            //// 定义参数
            //parameters = new SugarParameter[]
            //{
            //    new SugarParameter("@INSPECT_CODE", INSPECT_CODE)
            //};
            //// 执行 SQL 命令
            //dataTable = Db.Ado.GetDataTable(sql, parameters);

            //if (dataTable.Rows.Count > 0)
            //{
            //    itemId = dataTable.Rows[0]["ITEMID"].ToString();
            //    lotId = dataTable.Rows[0]["lotId"].ToString();
            //}
            #endregion

            #region 1.获得结果集A：
            sql = @$"SELECT ISNULL(STD_VALUE,0) as STD_VALUE,ISNULL(MIN_VALUE,0) as MIN_VALUE,
		        ISNULL(MAX_VALUE,0) as MAX_VALUE,ISNULL(ADD_VALUE,0) as ADD_VALUE,ISNULL(COLUM001CODE,'') as COLUM001CODE
                FROM COLUM001 WHERE COLUM002ID = @COLUM002ID and Colum001CODE like'A%'";
            parameters = new SugarParameter[]
            {
                new SugarParameter("@COLUM002ID", COLUM002ID)
            };
            // 执行 SQL 命令
            dataTable = Db.Ado.GetDataTable(sql, parameters);
            #endregion

            # region 4 循环样本：
            double std_VALUE = 0;
            double min_VALUE = 0;
            double max_VALUE = 0;
            double add_VALUE = 0;
            string COLUM001CODE = "";
            double lower_Value = 0; //下限值
            double upper_Value = 0; //上限值
            double act_Value = 0; //生成随机数 实际值
            string sel_Col = "";
            string sel_VALUES = "";
            string sampleId = "";

            int sampleCount = 1;
            while (sampleCount <= intSampleCount)
            {
                #region 1.循环结果集A
                //获得：@标准值 结果集A.STD_VALUE
                //@上公差 结果集A.MIN_VALUE
                //@下公差 结果集A.MAX_VALUE
                //@上下公差余量 = 结果集A.ADD_VALUE
                //得到：@实际值：
                //如：标准值 = 1.08，上公差0.01 下公差 0.03  参数上下公差余量 = 0.001
                //则随机范围是 （1.08 - 0.03 + 0.001~1.08 + 0.01 - 0.001）
                //BEGIN
                //     @变量SELECT +=”,”+结果集A.COLUM001CODE
                //     @变量VALUES +=”,”+实际值
                //END

                if (dataTable.Rows.Count > 0)
                {
                    for (int i = 0; i < dataTable.Rows.Count; i++)
                    {
                        std_VALUE = Convert.ToDouble(dataTable.Rows[i]["STD_VALUE"]);
                        min_VALUE = Convert.ToDouble(dataTable.Rows[i]["MIN_VALUE"]);
                        max_VALUE = Convert.ToDouble(dataTable.Rows[i]["MAX_VALUE"]);
                        add_VALUE = Convert.ToDouble(dataTable.Rows[i]["ADD_VALUE"]);
                        COLUM001CODE = dataTable.Rows[i]["COLUM001CODE"].ToString();

                        lower_Value = std_VALUE - max_VALUE + add_VALUE;
                        upper_Value = std_VALUE + min_VALUE - add_VALUE;

                        //在范围内生成随机数  
                        Random random = new Random();
                        act_Value = lower_Value + (random.NextDouble() * (upper_Value - lower_Value));

                        sel_Col += "," + COLUM001CODE;
                        sel_VALUES += "," + "'" + act_Value.ToString() + "'";
                    }
                }

                #endregion

                # region 2.插入检验结果
                //样本ID：@已存在记录数 + 循环次数
                sampleId = exist_Qyt + sampleCount.ToString();

                sql = @$"INSERT INSPECT_ZONE(INSPECT_ZONECREATEUSER,INSPECT_ZONECREATEDATE,INSPECT_ZONEID,INSPECTTYPE,COLUM002ID,
                            CUSTOM_ITEMID,LOTNO,INSPECTCODE,PCSCODE,ISAUTO{sel_Col}) 
                            VALUES(
                            '{userName}',CONVERT(varchar(20), GETDATE(), 120), '{Guid.NewGuid().ToString()}','{INSPECT_PUR}', '{COLUM002ID}',
                            '{itemId}','{lotId}','{INSPECT_CODE}','{sampleId}','1'{sel_VALUES})";

                Db.Ado.ExecuteCommand(sql);

                #endregion

                sampleCount++;
            }
            #endregion 

            return dataTable; // 返回填充的数据表
        }
        */
        #endregion

        #region GET_INSPECT_LIST 返回 第15行的列名+32后数据
        /* 改用存储过程
        //@COLUM002ID       --需要查询的检验项目
        //@INSPECT_CODE     --检验单号
        //@INSPECT_PUR      --检验类别
        public DataTable GET_INSPECT_LIST(string COLUM002ID, string INSPECT_CODE, string INSPECT_PUR)
        {
            DataTable dataTableR = new DataTable(); // 创建 DataTable 实例
            # region 1.获得结果集A +2.循环结果集A：

            string sql = @$"SELECT COLUM001CODE,STD_VALUE,MIN_VALUE,MAX_VALUE,REMARK1
                FROM COLUM001 WHERE COLUM002ID = @COLUM002ID and Colum001CODE like'A%'";
            var parameters = new SugarParameter[]
            {
                new SugarParameter("@COLUM002ID", COLUM002ID)
            };
            // 执行 SQL 命令
            var dataTable = Db.Ado.GetDataTable(sql, parameters);

            string COLUM001CODE = string.Empty;
            string sel_Col = string.Empty;
            string sel_ColB = string.Empty;

            if (dataTable.Rows.Count > 0)
            {
                for (int i = 0; i < dataTable.Rows.Count; i++)
                {
                    COLUM001CODE = dataTable.Rows[i]["COLUM001CODE"].ToString();

                    sel_Col += "," + COLUM001CODE;
                    sel_ColB += "," + COLUM001CODE.Replace('A', 'B');
                }
            }

            #endregion

            #region 3.组装SQL
            sql = @$"SELECT INSPECT_ZONECREATEUSER, INSPECT_ZONECREATEDATE, INSPECT_ZONEID, INSPECTTYPE, 
                    COLUM002ID, CUSTOM_ITEMID AS ITEMID, LOTNO, INSPECTCODE, PCSCODE,ISAUTO
                    {sel_Col} {sel_ColB}
                    FROM INSPECT_ZONE
                    WHERE COLUM002ID = @COLUM002ID AND INSPECTCODE = @INSPECT_CODE AND INSPECTTYPE = @INSPECT_PUR 
                    ORDER BY PCSCODE";
            parameters = new SugarParameter[]
            {
                new SugarParameter("@COLUM002ID", COLUM002ID),
                new SugarParameter("@INSPECT_CODE", INSPECT_CODE),
                new SugarParameter("@INSPECT_PUR", INSPECT_PUR),
            };
            // 执行 SQL 命令
            dataTableR = Db.Ado.GetDataTable(sql, parameters);

            #endregion

            return dataTableR; // 返回填充的数据表  
            //返回的所有列名以A开头的列数量，就是区块1的列数
            //返回的所有列名以A开头的列名，就是区块1第15行的列名
            //返回的数据就是32~63行区域的内容（行数依照查询的结果展示）
        }
        */
        #endregion

        #region GET_STD_VALUE_LIST
        private DataTable GET_STD_VALUE_LIST(string COLUM002ID, string INSPECT_CODE, string INSPECT_PUR)
        {
            string sql = @$"SELECT COLUM001CODE,STD_VALUE,REMARK1,MAX_VALUE,MIN_VALUE
                    FROM COLUM001 WHERE COLUM002ID = @COLUM002ID and Colum001CODE like'A%' ORDER BY Colum001CODE";
            var parameters = new SugarParameter[]
            {
                new SugarParameter("@COLUM002ID", COLUM002ID)
            };
            // 执行 SQL 命令
            DataTable originalTable = Db.Ado.GetDataTable(sql, parameters);

            // 创建一个新的 transposedTable 并将原始 originalTable 的行列转置到新的 transposedTable 中
            DataTable transposedTable = TransposeDataTable(originalTable);

            return transposedTable;
        }
        #endregion

        #region GET_INSPECT_LIST_INSERT
        //@COLUM002ID       --需要查询的检验项目
        //@INSPECT_CODE     --检验单号
        //@INSPECT_PUR      --检验类别
        //@TABLENAME          --插入指定的TABLE
        private DataTable GET_INSPECT_LIST_INSERT(string COLUM002ID, string INSPECT_CODE, string INSPECT_PUR, string TABLENAME)
        {
            DataTable inspectListTable = Db.Ado.GetDataTable(@$"EXEC GET_INSPECT_LIST '{COLUM002ID}','{INSPECT_CODE}','{INSPECT_PUR}'");

            // 1. 去掉 B 开头的列（B01、B02...）
            var filteredTable = inspectListTable.Copy();
            var bColumns = filteredTable.Columns
                .Cast<DataColumn>()
                .Where(col => col.ColumnName.StartsWith("B", StringComparison.OrdinalIgnoreCase))
                .ToList();

            foreach (var col in bColumns)
                filteredTable.Columns.Remove(col.ColumnName);

            // 2. 准备列
            var staticColumns = new[] { "COLUM002ID", "ITEMID", "LOTNO", "INSPECTCODE", "ISAUTO" };
            var aColumns = filteredTable.Columns
                .Cast<DataColumn>()
                .Where(col => col.ColumnName.StartsWith("A", StringComparison.OrdinalIgnoreCase))
                .Select(col => col.ColumnName)
                .ToList();

            var pcsCodes = filteredTable.AsEnumerable()
                .Select(row => row["PCSCODE"].ToString())
                .Distinct()
                .ToList();

            // 3. 创建透视表结构
            DataTable pivotTable = new DataTable();

            foreach (var col in staticColumns)
                pivotTable.Columns.Add(col, typeof(string));

            pivotTable.Columns.Add("COLUM001CODE", typeof(string));

            foreach (var pcsCode in pcsCodes)
                pivotTable.Columns.Add(pcsCode, typeof(double)); // 直接用 PCSCODE 作为列名

            // 4. 每个A列（检测项）生成一行
            foreach (var aCol in aColumns)
            {
                DataRow newRow = pivotTable.NewRow();

                // 静态信息：从第一个样本复制（默认一样）
                foreach (var col in staticColumns)
                    newRow[col] = filteredTable.Rows[0][col];

                newRow["COLUM001CODE"] = aCol;

                // 每个PCSCODE作为一列
                foreach (var pcsCode in pcsCodes)
                {
                    var row = filteredTable.AsEnumerable()
                        .FirstOrDefault(r => r["PCSCODE"].ToString() == pcsCode);

                    if (row != null && double.TryParse(row[aCol]?.ToString(), out double value))
                    {
                        newRow[pcsCode] = value;
                    }
                }

                pivotTable.Rows.Add(newRow);
            }

            return pivotTable;
        }
        #endregion

        private DataSet GetCPKBlock1(string COLUM002ID, string INSPECT_CODE, string INSPECT_PUR)
        {
            // 获取两个 DataTable
            //获得标准值结果集：
            DataTable stdValueListTable = GET_STD_VALUE_LIST(COLUM002ID, INSPECT_CODE, INSPECT_PUR);

            //第15行的列名+32后数据
            DataTable inspectListTable = Db.Ado.GetDataTable(@$"EXEC GET_INSPECT_LIST '{COLUM002ID}','{INSPECT_CODE}','{INSPECT_PUR}'");

            // 创建一个新的 DataSet
            DataSet dataSet = new DataSet("CombinedDataSet");
            #region 获取标准实际Table
            DataTable stdValueListTable1 = new DataTable(); // 复制 DataTabl
            // 1. 获取列名：第1行（索引0），从第2列（索引1）开始
            for (int col = 1; col < stdValueListTable.Columns.Count; col++)
            {
                string columnName = stdValueListTable.Rows[0][col]?.ToString();
                if (!string.IsNullOrWhiteSpace(columnName))
                    stdValueListTable1.Columns.Add(columnName);
            }

            // 2. 获取数据：第2~5行（索引1~4），从第2列（索引1）开始
            for (int row = 1; row <= 4 && row < stdValueListTable.Rows.Count; row++)
            {
                DataRow newRow = stdValueListTable1.NewRow();
                for (int col = 1; col < stdValueListTable.Columns.Count; col++)
                {
                    newRow[col - 1] = stdValueListTable.Rows[row][col];
                }
                stdValueListTable1.Rows.Add(newRow);
            }
            #endregion

            DataTable inspectListTable1 = inspectListTable.Copy(); // 复制 DataTabl
            inspectListTable1.TableName = "Table2";
            #region 获取标准实际Table
            var stdColumns = stdValueListTable1.Columns
                .Cast<DataColumn>()
                .Select(c => c.ColumnName)
                .ToHashSet(); // 使用 HashSet 提高查找效率

            // 找出 inspectListTable1 中不在 stdColumns 中的列
            var columnsToRemove = inspectListTable1.Columns
                .Cast<DataColumn>()
                .Where(c => !stdColumns.Contains(c.ColumnName))
                .ToList();

            // 删除这些列
            foreach (var col in columnsToRemove)
            {
                inspectListTable1.Columns.Remove(col);
            }
            #endregion

            // 将 DataTable 添加到 DataSet
            dataSet.Tables.Add(stdValueListTable1);
            dataSet.Tables.Add(inspectListTable1);

            return dataSet;
        }
        private List<DataSet> GetCPKBlock2(string INSPECT_FLOWID, string INSPECT_CODE, string INSPECT_PUR)
        {
            // 创建一个 DataSet 列表并将生成的 DataSet 放进去
            List<DataSet> dataSetList = new List<DataSet>
            {
            };

            //得到CPK - 扩展项结果集
            string sql = @$"SELECT COLUM002ID FROM COLUM002 WHERE INSPECT_FLOWID = @INSPECT_FLOWID and COC_ATTR ='COC_ATTR_002'";
            var parameters = new SugarParameter[]
            {
                new SugarParameter("@INSPECT_FLOWID", INSPECT_FLOWID)
            };
            // 执行 SQL 命令
            var dataTable = Db.Ado.GetDataTable(sql, parameters);

            string COLUM002ID = string.Empty;

            //2.循环CPK - 扩展项结果集
            if (dataTable.Rows.Count > 0)
            {
                for (int i = 0; i < dataTable.Rows.Count; i++)
                {
                    COLUM002ID = dataTable.Rows[i]["COLUM002ID"].ToString();

                    DataSet block1DateSet = GetCPKBlock1(COLUM002ID, INSPECT_CODE, INSPECT_PUR);

                    DataTable dt = block1DateSet.Tables[0];
                    foreach (DataColumn column in dt.Columns.Cast<DataColumn>().ToList())
                    {
                        string oldColName = column.ColumnName;

                        // 查询 COLUM001NAME
                        string newColName = Db.Ado.GetString(@"
            SELECT COLUM001NAME 
            FROM COLUM001 
            WHERE COLUM002ID = @COLUM002ID AND COLUM001CODE = @COLUM001CODE",
                            new SugarParameter("@COLUM002ID", COLUM002ID),
                            new SugarParameter("@COLUM001CODE", oldColName)
                        );

                        // 如果查到新列名且不为空，则替换
                        if (!string.IsNullOrWhiteSpace(newColName))
                        {
                            column.ColumnName = newColName;
                        }
                    }

                    dataSetList.Add(block1DateSet);
                }
            }

            return dataSetList;
        }
        private DataTable TransposeDataTable(DataTable originalTable)
        {
            DataTable transposedTable = new DataTable();

            // 添加列
            for (int i = 0; i <= originalTable.Rows.Count; i++)
            {
                transposedTable.Columns.Add(i.ToString());
            }

            // 添加行
            for (int j = 0; j < originalTable.Columns.Count; j++)
            {
                DataRow newRow = transposedTable.NewRow();
                newRow[0] = originalTable.Columns[j].ColumnName;
                for (int k = 1; k <= originalTable.Rows.Count; k++)
                {
                    newRow[k] = originalTable.Rows[k - 1][j];
                }
                transposedTable.Rows.Add(newRow);
            }

            return transposedTable;
        }
        public byte[] GetExcelContent(DataSet dataSet1, List<DataSet> listDataSet1,string ITEMNAME, string INSPECT_DATE)
        {
            int columnCount = 0;
            listDataSet1.Insert(0, dataSet1);
            foreach (var itemDs in listDataSet1)
            {
                columnCount += itemDs.Tables[0].Columns.Count;
            }

            // 创建工作簿
            IWorkbook workbook = new XSSFWorkbook();
            // 创建工作表
            ISheet sheet = workbook.CreateSheet("Sheet1");

            // 定义表头字体样式
            ICellStyle headerCellStyle = workbook.CreateCellStyle();
            IFont headerFont = workbook.CreateFont();
            headerFont.FontName = "Verdana"; // 设置字体为 Verdana
            headerFont.FontHeightInPoints = 8; // 设置字号为 8
            headerFont.IsBold = true; // 设置加粗
            headerCellStyle.SetFont(headerFont);

            // 设置表头边框样式
            //headerCellStyle.BorderTop = BorderStyle.Thin;
            //headerCellStyle.BorderBottom = BorderStyle.Thin;
            //headerCellStyle.BorderLeft = BorderStyle.Thin;
            //headerCellStyle.BorderRight = BorderStyle.Thin;
            headerCellStyle.TopBorderColor = IndexedColors.Black.Index;
            headerCellStyle.BottomBorderColor = IndexedColors.Black.Index;
            headerCellStyle.LeftBorderColor = IndexedColors.Black.Index;
            headerCellStyle.RightBorderColor = IndexedColors.Black.Index;

            // 定义普通单元格边框样式
            ICellStyle normalCellStyle = workbook.CreateCellStyle();
            IFont normalFont = workbook.CreateFont();
            normalCellStyle.BorderTop = BorderStyle.Thin;
            normalCellStyle.BorderBottom = BorderStyle.Thin;
            normalCellStyle.BorderLeft = BorderStyle.Thin;
            normalCellStyle.BorderRight = BorderStyle.Thin;
            normalCellStyle.TopBorderColor = IndexedColors.Black.Index;
            normalCellStyle.BottomBorderColor = IndexedColors.Black.Index;
            normalCellStyle.LeftBorderColor = IndexedColors.Black.Index;
            normalCellStyle.RightBorderColor = IndexedColors.Black.Index;
            normalFont.FontName = "Arial"; // 设置字体为 Arial
            normalFont.FontHeightInPoints = 8; // 设置字号为 8
            normalCellStyle.SetFont(normalFont); // 应用字体到普通单元格样式

            // 定义加粗样式
            ICellStyle boldCellStyle = workbook.CreateCellStyle();
            boldCellStyle.CloneStyleFrom(normalCellStyle); // 继承普通样式
            IFont boldFont = workbook.CreateFont();
            boldFont.FontName = "Arial"; // 字体与普通样式一致
            boldFont.FontHeightInPoints = 8; // 字号与普通样式一致
            boldFont.IsBold = true; // 设置加粗
            boldCellStyle.SetFont(boldFont);

            // 定义淡绿色背景样式 Dimension Description 行
            ICellStyle lightGreenCellStyle = workbook.CreateCellStyle();
            lightGreenCellStyle.CloneStyleFrom(normalCellStyle); // 继承普通样式
            lightGreenCellStyle.FillForegroundColor = IndexedColors.LightGreen.Index; // 设置背景色为淡绿色
            lightGreenCellStyle.FillPattern = FillPattern.SolidForeground;
            lightGreenCellStyle.Alignment = HorizontalAlignment.Center; // 水平居中
            lightGreenCellStyle.VerticalAlignment = VerticalAlignment.Center; // 垂

            // 定义蓝色背景样式 Comments-Proposed Yield 行
            ICellStyle skyBlueCellStyle = workbook.CreateCellStyle();
            skyBlueCellStyle.CloneStyleFrom(normalCellStyle); // 继承普通样式
            skyBlueCellStyle.FillForegroundColor = IndexedColors.PaleBlue.Index;
            skyBlueCellStyle.FillPattern = FillPattern.SolidForeground;
            skyBlueCellStyle.Alignment = HorizontalAlignment.Center; // 水平居中
            skyBlueCellStyle.VerticalAlignment = VerticalAlignment.Center; // 垂

            // 第14行蓝色字体+居中显示 Distribution Type 行
            ICellStyle blueCenteredStyle = workbook.CreateCellStyle();
            IFont verdanaFont = workbook.CreateFont();
            verdanaFont.FontName = "Verdana"; // 设置字体为 Verdana
            verdanaFont.FontHeightInPoints = 6; // 设置字号为 6
            verdanaFont.Color = IndexedColors.Blue.Index; // 设置字体颜色为蓝色
            blueCenteredStyle.SetFont(verdanaFont);
            blueCenteredStyle.Alignment = HorizontalAlignment.Center; // 水平居中
            blueCenteredStyle.VerticalAlignment = VerticalAlignment.Center; // 垂

            // 定义数字格式单元格样式
            ICellStyle numberCellStyle = workbook.CreateCellStyle();
            IDataFormat dataFormat = workbook.CreateDataFormat();
            numberCellStyle.CloneStyleFrom(normalCellStyle); // 继承普通样式
            numberCellStyle.DataFormat = dataFormat.GetFormat("#,##0.0##"); // 例如 1,234.56
            numberCellStyle.FillForegroundColor = IndexedColors.SeaGreen.Index; // 设置背景色为绿色
            numberCellStyle.FillPattern = FillPattern.SolidForeground;
            numberCellStyle.Alignment = HorizontalAlignment.Center; // 水平居中
            numberCellStyle.VerticalAlignment = VerticalAlignment.Center; // 垂
            numberCellStyle.SetFont(normalFont); // 应用字体到普通单元格样式

            // 定义百分比格式单元格样式
            ICellStyle percentCellStyle = workbook.CreateCellStyle();
            IDataFormat dataFormat1 = workbook.CreateDataFormat();
            percentCellStyle.CloneStyleFrom(normalCellStyle); // 继承普通样式
            percentCellStyle.DataFormat = dataFormat1.GetFormat("0.0#%"); // 
            percentCellStyle.FillForegroundColor = IndexedColors.SeaGreen.Index; // 设置背景色为绿色
            percentCellStyle.FillPattern = FillPattern.SolidForeground;
            percentCellStyle.Alignment = HorizontalAlignment.Center; // 水平居中
            percentCellStyle.VerticalAlignment = VerticalAlignment.Center; // 垂
            percentCellStyle.SetFont(normalFont); // 应用字体到普通单元格样式

            // 定义一个居中不加粗的样式 为30-62行 第0列
            ICellStyle normal1CellStyle = workbook.CreateCellStyle();
            normal1CellStyle.CloneStyleFrom(normalCellStyle); // 继承普通样式
            normal1CellStyle.Alignment = HorizontalAlignment.Center; // 水平居中
            normal1CellStyle.VerticalAlignment = VerticalAlignment.Center; // 垂
            normal1CellStyle.SetFont(normalFont); // 应用字体到普通单元格样式

            //以及20-23行，31行使用，无背景色
            // 定义数字格式单元格样式
            ICellStyle number1CellStyle = workbook.CreateCellStyle();
            number1CellStyle.CloneStyleFrom(normalCellStyle); // 继承普通样式
            number1CellStyle.DataFormat = dataFormat.GetFormat("#,##0.0##"); // 例如 1,234.56
            number1CellStyle.Alignment = HorizontalAlignment.Center; // 水平居中
            number1CellStyle.VerticalAlignment = VerticalAlignment.Center; // 垂
            number1CellStyle.SetFont(normalFont); // 应用字体到普通单元格样式

            // 写入表头信息
            string[] headers = {
            "FAI&CPK Data Sheet - Rev 06", "Unnamed: 1", "Unnamed: 2", "RoHS  HF",
            "Unnamed: 4", "Unnamed: 5", "Unnamed: 6", "Unnamed: 7",
            "Unnamed: 8", "Unnamed: 9", "Unnamed: 10", "Unnamed: 11",
            "Unnamed: 12", "Unnamed: 13", "Yiled<90%", "Unnamed: 15",
            "Unnamed: 16", "Unnamed: 17"
        };

            int rowIndex = 0;
            IRow headerRow = sheet.CreateRow(rowIndex++);

            for (int i = 0; i < headers.Length; i++)
            {
                ICell cell = headerRow.CreateCell(i);
                cell.SetCellValue(headers[i]);
                cell.CellStyle = headerCellStyle;
            }

            List<string> columnDistributions = new List<string>() { "Distribution Type" };
            for (int i = 0; i < columnCount; i++)
            {
                columnDistributions.Add("DoubleSides");
            }

            // 写入前几行的静态数据
            string[][] staticData = {
            new string[] { "Part Number :", ITEMNAME, null, null, "Revision :", "V1", "Supplier :", "Jiutai", null, "Inspector:", "张钰俊" },
            new string[] { "Part Description :", "PSA", null, null, null, null, "Cavity / Tool # :", null, "50709", "Date:", INSPECT_DATE },
            new string[] { "Request Process" },
            new string[] { "Dimension Description" },
            new string[] { "Comments" },
            new string[] { "Proposed +Tol" },
            new string[] { "Proposed -Tol" },
            new string[] { "Mean Shift Amount" },
            new string[] { "Changed Mean" },
            new string[] { "Proposed USL" },
            new string[] { "Proposed LSL" },
            new string[] { "Proposed Yield" },
            columnDistributions.ToArray(),
        };

            for (int i = 0; i < staticData.Length; i++)
            {
                IRow row = sheet.CreateRow(rowIndex++);
                for (int j = 0; j <= columnCount; j++)
                {
                    ICell cell = row.CreateCell(j);

                    if (j < staticData[i].Length)
                    {
                        if (staticData[i][j] != null)
                        {
                            cell.SetCellValue(staticData[i][j]);
                            cell.CellStyle = normalCellStyle;
                        }
                    }
   
                    
                    // 如果是第 0 列，应用加粗样式
                    if (j == 0)
                    {
                        cell.CellStyle = boldCellStyle;
                    }
                    else
                    {
                        // 如果是 "Dimension" 部分，且不是第 0 列，设置淡绿色背景
                        if (i == 3)
                        {
                            cell.CellStyle = lightGreenCellStyle;
                        }
                        //4-11行背景色
                        else if (i > 3 && i <= 11)
                        {
                            cell.CellStyle = skyBlueCellStyle;
                        }
                        //12行背景色 Distribution Type 行
                        else if (i == 12)
                        {
                            cell.CellStyle = blueCenteredStyle;
                        }    
                    }
                }
            }

            List<string> columnDimNos = new List<string>() { "Dim. No." };
            List<string> columnNominalDims = new List<string>() { "Nominal Dim." };
            List<string> columnDimModels = new List<string>() { "Dim Model" };
            List<string> columnTolMaxs = new List<string>() { "Tol. Max. (+)" };
            List<string> columnTolMins = new List<string>() { "Tol. Min. (-)" };
            foreach (var itemDs in listDataSet1)
            {
                foreach (DataColumn dc in itemDs.Tables[0].Columns)
                {
                    columnDimNos.Add(dc.ColumnName);
                }
                DataRow dr0 = itemDs.Tables[0].Rows[0];
                DataRow dr1 = itemDs.Tables[0].Rows[1];
                DataRow dr2 = itemDs.Tables[0].Rows[2];
                DataRow dr3 = itemDs.Tables[0].Rows[3];
                foreach (DataColumn dc in itemDs.Tables[0].Columns)
                {
                    columnNominalDims.Add(dr0[dc.ColumnName].ToString());
                    columnDimModels.Add(dr1[dc.ColumnName].ToString());
                    columnTolMaxs.Add(dr2[dc.ColumnName].ToString());
                    columnTolMins.Add(dr3[dc.ColumnName].ToString());
                }
            }

            // 写入 14 - 19 行的数据（DataTable1）
            string[][] dataTable1 = {
            columnDimNos.ToArray(),
            columnNominalDims.ToArray(),
            columnDimModels.ToArray(),
            columnTolMaxs.ToArray(),
            columnTolMins.ToArray(),
            };
            for (int i = 0; i < dataTable1.Length; i++)
            {
                IRow row = sheet.CreateRow(rowIndex++);
                for (int j = 0; j < dataTable1[i].Length; j++)
                {
                    ICell cell = row.CreateCell(j);
                    cell.SetCellValue(dataTable1[i][j]);
                    // 如果是第 0 列，应用加粗样式
                    if (j == 0)
                    {
                        cell.CellStyle = boldCellStyle;
                    } 
                    // 非第 0 列，设置淡绿色背景+居中
                    else
                    {
                        cell.CellStyle = lightGreenCellStyle;
                    }
                }
            }
            List<string> columnUSLs = new List<string>() { "USL" };
            List<string> columnLSLs = new List<string>() { "LSL" };
            List<string> columnStdDevs = new List<string>() { "Std Dev" };
            List<string> columnMeans = new List<string>() { "Mean" };
            List<string> columnMaximums = new List<string>() { "Maximum" };
            List<string> columnMinimums = new List<string>() { "Minimum" };
            List<string> columnCps = new List<string>() { "Cp" };
            List<string> columnCpkls = new List<string>() { "Cpkl" };
            List<string> columnCpkus = new List<string>() { "Cpku" };
            List<string> columnCpks = new List<string>() { "Cpk" };
            List<string> columnProjectedYieldss = new List<string>() { "Projected Yields" };
            List<string> columnMeanDrifts = new List<string>() { "Mean Drift" };
            for (int i = 0; i < columnCount; i++)
            {
                columnUSLs.Add("");
                columnLSLs.Add("");
                columnStdDevs.Add("");
                columnMeans.Add("");
                columnMaximums.Add("");
                columnMinimums.Add("");
                columnCps.Add("");
                columnCpkls.Add("");
                columnCpkus.Add("");
                columnCpks.Add("");
                columnProjectedYieldss.Add("");
                columnMeanDrifts.Add("");
            }

            // 写入 20 - 31 行的公式
            string[][] formulasData = {
            columnUSLs.ToArray(),
            columnLSLs.ToArray(),
            columnStdDevs.ToArray(),
            columnMeans.ToArray(),
            columnMaximums.ToArray(),
            columnMinimums.ToArray(),
            columnCps.ToArray(),
            columnCpkls.ToArray(),
            columnCpkus.ToArray(),
            columnCpks.ToArray(),
            columnProjectedYieldss.ToArray(),
            columnMeanDrifts.ToArray(),
        };
            for (int i = 0; i < formulasData.Length; i++)
            {
                IRow row = sheet.CreateRow(rowIndex++);
                for (int j = 0; j < formulasData[i].Length; j++)
                {
                    ICell cell = row.CreateCell(j);
                    cell.SetCellValue(formulasData[i][j]);
                    // 如果是第 0 列，应用加粗样式
                    if (j == 0)
                    {
                        cell.CellStyle = boldCellStyle;
                    }
                    else
                    {
                        cell.CellStyle = normalCellStyle;
                    }
                        
                }
            }
            // 假设的公式示例，你需要根据实际情况修改
            for (int col = 1; col < formulasData[0].Length; col++)
            {
                string colName = GetColumnName(col);
                // USL
                sheet.GetRow(19).GetCell(col).CellFormula = $"{colName}16+ABS({colName}18)";
                // LSL
                sheet.GetRow(20).GetCell(col).CellFormula = $"{colName}16-ABS({colName}19)";
                // Std Dev
                sheet.GetRow(21).GetCell(col).CellFormula = $"STDEV({colName}32:{colName}65194)";
                // Mean
                sheet.GetRow(22).GetCell(col).CellFormula = $"AVERAGE({colName}32:{colName}65194)";
                // Maximum
                sheet.GetRow(23).GetCell(col).CellFormula = $"MAX({colName}32:{colName}65194)";
                // Minimum
                sheet.GetRow(24).GetCell(col).CellFormula = $"MIN(({colName}20-{colName}23)/(3*{colName}22),({colName}23-{colName}21)/(3*{colName}22))";
                // Cp
                sheet.GetRow(25).GetCell(col).CellFormula = $"(({colName}20)-({colName}21))/(6*{colName}22)";
                // Cpkl
                sheet.GetRow(26).GetCell(col).CellFormula = $"({colName}23-{colName}21)/(3*{colName}22)";
                // Cpku
                sheet.GetRow(27).GetCell(col).CellFormula = $"({colName}20-{colName}23)/(3*{colName}22)";
                // Cpk
                sheet.GetRow(28).GetCell(col).CellFormula = $"MIN(({colName}20-{colName}23)/(3*{colName}22),({colName}23-{colName}21)/(3*{colName}22))";
                // Projected Yields
                sheet.GetRow(29).GetCell(col).CellFormula = $"IF({colName}14=\"DoubleSides\",NORMSDIST(({colName}20-{colName}23)/{colName}22)-NORMSDIST(({colName}21-{colName}23)/{colName}22),IF({colName}14=\"SingleSide-USL\",NORMSDIST(({colName}20-{colName}23)/{colName}22),IF({colName}14=\"SingleSide-LSL\",1-NORMSDIST((B21-B23)/B22),IF({colName}14=\"Actual Yield (n>=100)\",IF(COUNT({colName}32:{colName}65194)>=100,(COUNTIF({colName}32:{colName}65194,\"<=\"&B20)-COUNTIF({colName}32:{colName}65194,\"<\"&{colName}21))/COUNT({colName}32:{colName}65194),\"Too Few Records\"),\"Error\"))))";
                // Mean Drift
                sheet.GetRow(30).GetCell(col).CellFormula = $"{colName}23-({colName}20+{colName}21)/2";
            }

            for (int i = 0; i < formulasData.Length; i++)
            {
                IRow row = sheet.GetRow(i + 19);
                for (int j = 0; j < formulasData[i].Length; j++)
                {
                    ICell cell = row.GetCell(j);

                    if (j > 0)
                    {
                        if (i + 19 == 29)
                        {
                            cell.CellStyle = percentCellStyle;
                        }
                        else if((i + 19)>= 20 && (i + 19) <= 23)
                        {
                            cell.CellStyle = number1CellStyle;
                        }
                        else if (i + 19 == 30)
                        {
                            cell.CellStyle = number1CellStyle;
                        }
                        else
                        {
                            cell.CellStyle = numberCellStyle;
                        }
                    }
                }
            }
            List<DataTable> tableList2 = new List<DataTable>();
            foreach (var itemDs in listDataSet1)
            {
                tableList2.Add(itemDs.Tables[1]);
            }

            DataTable dataTable2 = MergeTablesHorizontallyWithIndex(tableList2);
            // 写入 32 - 63 行的数据（DataTable2）
            for (int i = 0; i < dataTable2.Rows.Count; i++)
            {
                IRow row = sheet.CreateRow(rowIndex++);
                for (int j = 0; j < dataTable2.Columns.Count; j++)
                {
                    ICell cell = row.CreateCell(j);
                    double textValue = 0;
                    double.TryParse(dataTable2.Rows[i][j].ToString(),out textValue);
                    cell.SetCellValue(textValue);
                    if(j == 0)
                    {
                        cell.CellStyle = normal1CellStyle;
                    }
                    else
                    {
                        cell.CellStyle = numberCellStyle;
                    }
                }
            }

            // 写入表格内容后，设置列宽自适应 以13行的列数为准
            for (int i = 0; i < sheet.GetRow(13).LastCellNum; i++)
            {
                sheet.AutoSizeColumn(i); // 自适应列宽
            }

            byte[] fileContents;
            using (MemoryStream ms = new MemoryStream())
            {
                workbook.Write(ms);
                fileContents = ms.ToArray(); // 将流转换为 byte[]
            }

            return fileContents;
        }
        string GetColumnName(int columnNumber)
        {
            int dividend = columnNumber + 1;
            string columnName = "";
            int modulo;

            while (dividend > 0)
            {
                modulo = (dividend - 1) % 26;
                columnName = Convert.ToChar(65 + modulo).ToString() + columnName;
                dividend = (int)((dividend - modulo) / 26);
            }

            return columnName;
        }

        DataTable MergeTablesHorizontallyWithIndex(List<DataTable> tables)
        {
            if (tables == null || tables.Count == 0)
                throw new ArgumentException("列表为空");

            // 取所有表中最大行数
            int maxRowCount = tables.Max(t => t.Rows.Count);

            DataTable result = new DataTable();

            // 添加序号列
            result.Columns.Add("序号", typeof(int));

            // 添加其他列（带前缀避免重复）
            foreach (var table in tables)
            {
                foreach (DataColumn col in table.Columns)
                {
                    // 若有同名列，可加前缀防重复，如 $"{table.TableName}_{col.ColumnName}"
                    string columnName = col.ColumnName;
                    int suffix = 1;
                    while (result.Columns.Contains(columnName))
                        columnName = $"{col.ColumnName}_{suffix++}";

                    result.Columns.Add(columnName, col.DataType);
                }
            }

            // 添加数据
            for (int rowIndex = 0; rowIndex < maxRowCount; rowIndex++)
            {
                List<object> rowData = new List<object>();
                rowData.Add(rowIndex + 1); // 序号从 1 开始

                foreach (var table in tables)
                {
                    if (rowIndex < table.Rows.Count)
                    {
                        // 添加该行数据
                        rowData.AddRange(table.Rows[rowIndex].ItemArray);
                    }
                    else
                    {
                        // 添加与列数相同数量的空值
                        rowData.AddRange(Enumerable.Repeat(DBNull.Value, table.Columns.Count));
                    }
                }

                result.Rows.Add(rowData.ToArray());
            }

            return result;
        }


        private void SaveToCPKScanDoc(string docType, byte[] fileContents, string scandocName, string peopleId, string INSPECT_DEV2ID, string COLUM002ID)
        {
            FileInfo file = new FileInfo(scandocName);
            if (!file.Directory.Exists)
            {
                file.Directory.Create();
            }
            if (fileContents != null)
            {
                File.WriteAllBytes(scandocName, fileContents);
            }

            Db.Ado.ExecuteCommand($"DELETE SCANDOC WHERE INSPECT_DEV2ID='{INSPECT_DEV2ID}' AND COLUM002ID='{COLUM002ID}'");

            string sql = @"
            INSERT INTO SCANDOC (TENID, SCANDOCID, SCANDOCCODE, SCANDOCNAME, DOCTYPE, PEOPLEID, createdate, SCANDOC_user,INSPECT_DEV2ID,COLUM002ID)
            VALUES ('001', @SCANDOCID, @SCANDOCID, @SCANDOCNAME, @DOCTYPE, @PEOPLEID, CONVERT(VARCHAR(20), GETDATE(), 120), @PEOPLEID, @INSPECT_DEV2ID,@COLUM002ID)";

            // 定义参数
            var parameters = new SugarParameter[]
            {
                new SugarParameter("@SCANDOCID", Guid.NewGuid().ToString()),
                new SugarParameter("@SCANDOCNAME", scandocName.Replace(AppSettings.Configuration["AppSettings:FileServerPath"],@"\")),
                new SugarParameter("@DOCTYPE", docType),
                new SugarParameter("@PEOPLEID", peopleId),
                new SugarParameter("@INSPECT_DEV2ID", INSPECT_DEV2ID),
                new SugarParameter("@COLUM002ID", COLUM002ID)
            };

            // 执行 SQL 命令
            Db.Ado.ExecuteCommand(sql, parameters);
        }

        #endregion

        #region GetBatchCPKfile
        public void GetBatchCPKfile(CPKInputByCodeDto parm)
        {
            var dtINSPECT_DEVID = Db.Ado.GetDataTable(@$"SELECT INSPECT_DEV2ID FROM INSPECT_DEV2 WHERE DOC_CODE = '{parm.DOC_CODE}' AND INSPECT_DEV ='{parm.INSPECT_DEV}'");
            if (dtINSPECT_DEVID.Rows.Count == 0)
            {
                throw new Exception("没有找到任何记录.");
            }
            foreach (DataRow dataRow in dtINSPECT_DEVID.Rows)
            {
                string INSPECT_DEV2ID = dataRow["INSPECT_DEV2ID"].ToString();
                GetCPKfile(INSPECT_DEV2ID, parm.UserName);
            }
        }
        #endregion

        #region ReplaceFTIRPdf
        public void ReplaceFTIRPdf(FTIRInputDto parm)
        {
            string INSPECTTABLE = "INSPECT_" + parm.INSPECTTYPE;
            string INSPECTTABLEID = INSPECTTABLE + "ID";
            string INSPECTTABLENAME = INSPECTTABLE + "NAME";
            var dtMain = Db.Ado.GetDataTable(@$"SELECT TOP 1 ITEMNAME,{INSPECTTABLENAME},LOTNO,INSPECT_FLOWID
                FROM {INSPECTTABLE} WHERE {INSPECTTABLEID}='{parm.INSPECTCODE}'");
            if(dtMain.Rows.Count == 0)
            {
                throw new Exception($"检验单{parm.INSPECTCODE}不存在");
            }
            if (dtMain.Rows.Count > 0)
            {
                DataRow dr = dtMain.Rows[0];
                if(string.IsNullOrEmpty(dr["ITEMNAME"].ToString()))
                {
                    throw new Exception($"检验单{parm.INSPECTCODE}物料名称不能为空");
                }
                if (string.IsNullOrEmpty(dr[INSPECTTABLENAME].ToString()))
                {
                    throw new Exception($"检验单{parm.INSPECTCODE}检验日期不能为空");
                }
                if (string.IsNullOrEmpty(dr["LOTNO"].ToString()))
                {
                    throw new Exception($"检验单{parm.INSPECTCODE}批号不能为空");
                }
                if (string.IsNullOrEmpty(dr["INSPECT_FLOWID"].ToString()))
                {
                    throw new Exception($"检验单{parm.INSPECTCODE}INSPECT_FLOWID不能为空");
                }
            }
            string ITEMNAME = dtMain.Rows[0]["ITEMNAME"].ToString();
            string INSPECT_DATE = dtMain.Rows[0][INSPECTTABLENAME].ToString();

            var dtItem = Db.Ado.GetDataTable(@$"SELECT COLUM002ID
                    FROM  COLUM002 WHERE INSPECT_DEV= 'INSPECT_DEV_004' 
                    AND  COLUM002.INSPECT_FLOWID='{dtMain.Rows[0]["INSPECT_FLOWID"].ToString()}'");
            if (dtItem.Rows.Count == 0)
            {
                throw new Exception($"检验单{parm.INSPECTCODE}没有FTIR的检验项目");
            }
            foreach (DataRow dr in dtItem.Rows)
            {
                string COLUM002ID = dr["COLUM002ID"].ToString();
                int LOT_QTY = Db.Ado.GetInt(@$"SELECT TOP 1 LOT_QTY FROM  {INSPECTTABLE} WHERE {INSPECTTABLEID}='{parm.INSPECTCODE}'");

                int inspect_Qyt = Db.Ado.GetInt(@$"GET_INPECT_CNT  '{COLUM002ID}','{LOT_QTY}'");

                Db.Ado.ExecuteCommand(@$"EXEC GET_INSPECT_RANK '{COLUM002ID}','{parm.INSPECTCODE}',{inspect_Qyt},'{parm.INSPECTTYPE}','{parm.UserName}'");

                DataTable dt = Db.Ado.GetDataTable(@$"EXEC GET_INSPECT_LIST  '{COLUM002ID}','{parm.INSPECTCODE}','{parm.INSPECTTYPE}'");
                if (dt.Rows.Count == 0)
                {
                    throw new Exception($"GET_INSPECT_LIST检验单{parm.INSPECTCODE}没有对应数据");
                }
                // 查找 "PCSCODE" 列的索引
                int pcsCodeColumnIndex = -1;
                foreach (DataColumn column in dt.Columns)
                {
                    if (column.ColumnName.Equals("PCSCODE", StringComparison.OrdinalIgnoreCase))
                    {
                        pcsCodeColumnIndex = dt.Columns.IndexOf(column);
                        break;
                    }
                }

                // 如果没有找到 "PCSCODE" 列，抛出异常
                if (pcsCodeColumnIndex == -1)
                {
                    throw new Exception("没有找到 PCSCODE 列！");
                }

                foreach (DataRow drRank in dt.Rows)
                {
                    string ITEMID = drRank["ITEMID"].ToString();
                    string LOTID = drRank["LOTNO"].ToString();
                    // 从 "PCSCODE" 列的下一列开始遍历
                    for (int colIndex = pcsCodeColumnIndex + 2; colIndex < dt.Columns.Count; colIndex++)
                    {
                        string COLUMN001CODE = dt.Columns[colIndex].ColumnName;
                        string RANKVALUE = drRank[dt.Columns[colIndex]].ToString(); 
                        if (string.IsNullOrEmpty(COLUMN001CODE))
                            continue;
                        if (string.IsNullOrEmpty(RANKVALUE))
                            continue;
                        //在存储FTIR报告路径下，按文件夹名称=物料名称（ITEMNAME）查询，随机从中取一份报告图表
                        string inputFile = GetRandomFTIRReport(ITEMNAME);
                        //返回文件流
                        var fileName = $"{ITEMID}_{LOTID}_{COLUMN001CODE}_{DateTime.Parse(INSPECT_DATE).ToString("yyyyMMddHHmmss")}.pdf";
                        string outputFile = Path.Combine(AppSettings.Configuration["AppSettings:FileServerPath"], @$"Test\FTIR\{ITEMID}\{fileName}");

                        Document pdfDoc = new Document(inputFile);
                        string allPdfText = ExtractAllText(pdfDoc);

                        string searchText = ExtractTextRightOfKeyword(allPdfText, "质量检查结果:");
                        string replaceText = ITEMNAME + "标准样";
                        ReplacePdfText(searchText, replaceText, pdfDoc);

                        searchText = ExtractTextRightOfKeyword(allPdfText, "相关:");
                        replaceText = RANKVALUE;
                        ReplacePdfText(searchText, replaceText, pdfDoc);

                        searchText = ExtractTextRightOfKeyword(allPdfText, "光谱 2 标题:");
                        replaceText = $"#JT+{parm.UserName}{ITEMNAME}&{LOTID}&{parm.UserName}&{DateTime.Parse(INSPECT_DATE).ToString("yyyyMMdd")}&{LOTID}";
                        ReplacePdfText(searchText, replaceText, pdfDoc);

                        searchText = ExtractTextRightOfKeyword(allPdfText, "日期:");
                        replaceText = ConvertToCustomDateFormat(GenerateRandomWorkTime(DateTime.Parse(INSPECT_DATE)));
                        ReplacePdfText(searchText, replaceText, pdfDoc);
                        
                        FileInfo filePDF = new FileInfo(outputFile);
                        if (!filePDF.Directory.Exists)
                        {
                            filePDF.Directory.Create();
                        }
                        // 保存修改后的 PDF
                        pdfDoc.Save(outputFile);
                        try
                        {
                            //去水印
                            string outputFileRemoveWarter = Path.Combine(AppSettings.Configuration["AppSettings:FileServerPath"], @$"Test\FTIR\{ITEMID}\temp{fileName}");
                            ITextHelper.RemoveWatermark(outputFile, outputFileRemoveWarter);
                            File.Copy(outputFileRemoveWarter, outputFile, true);
                            File.Delete(outputFileRemoveWarter);
                        }
                        catch
                        {
                            //去水印失败，继续使用原文件
                        }
                        //保存到SCANDOC
                        SavePDFToScanDoc("FTIR报告", outputFile, parm.INSPECTCODE, COLUM002ID, COLUMN001CODE);
                    }
                }
            }
        }
        private DateTime GenerateRandomWorkTime(DateTime date)
        {
            // 定义工作时间段：08:10:00 到 16:50:00
            DateTime workStart = new DateTime(date.Year, date.Month, date.Day, 8, 10, 0); // 08:10
            DateTime workEnd = new DateTime(date.Year, date.Month, date.Day, 16, 50, 0); // 16:50

            // 获取工作时间段的总秒数
            Random rand = new Random();
            double totalSeconds = (workEnd - workStart).TotalSeconds;

            // 在工作时间段内生成随机秒数
            double randomSeconds = rand.NextDouble() * totalSeconds;

            // 计算随机的日期时间
            DateTime randomDateTime = workStart.AddSeconds(randomSeconds);

            return randomDateTime;
        }

        private string ConvertToCustomDateFormat(DateTime dateTime)
        {
            // 获取北京时间（GMT+08:00）
            TimeZoneInfo chinaTimeZone = TimeZoneInfo.FindSystemTimeZoneById("China Standard Time");
            DateTime chinaTime = TimeZoneInfo.ConvertTime(dateTime, chinaTimeZone);

            // 格式化为所需的日期字符串
            string formattedDate = chinaTime.ToString("dddd dd MMM HH:mm:ss yyyy (GMT+08:00)", new CultureInfo("zh-CN"));

            return formattedDate;
        }
        private string ExtractAllText(Document pdfDoc)
        {
            // 创建一个文本吸收器（抓取所有文本）
            TextAbsorber textAbsorber = new TextAbsorber();

            // 让吸收器访问所有页面
            pdfDoc.Pages.Accept(textAbsorber);

            // 返回提取的文本
            return textAbsorber.Text;
        }

        private string ExtractTextRightOfKeyword(string allText, string keyword)
        {
            if (string.IsNullOrEmpty(allText) || string.IsNullOrEmpty(keyword))
                return "文本或关键字为空";

            // 按行拆分
            var lines = allText.Split(new[] { "\r\n", "\n" }, StringSplitOptions.RemoveEmptyEntries);

            foreach (var line in lines)
            {
                int index = line.IndexOf(keyword);
                if (index != -1)
                {
                    // 提取该行中关键词右边的文本
                    int startIndex = index + keyword.Length;
                    if (startIndex >= line.Length)
                        return "关键字后无内容";

                    return line.Substring(startIndex).Trim();
                }
            }

            return $"未找到关键字：{keyword}";
        }

        private void ReplacePdfText(string searchText, string replaceText, Document pdfDoc)
        {
            // 创建文本搜索器
            TextFragmentAbsorber absorber = new TextFragmentAbsorber(searchText);
            pdfDoc.Pages.Accept(absorber);

            // 遍历找到的文本片段并替换
            foreach (TextFragment fragment in absorber.TextFragments)
            {
                // 读取原来的字体
                Aspose.Pdf.Text.Font originalFont = FontRepository.FindFont("SimSun");// fragment.TextState.Font;
                float originalSize = fragment.TextState.FontSize;
                Aspose.Pdf.Color originalColor = fragment.TextState.ForegroundColor;
                // 替换文本
                fragment.Text = replaceText;

                // 保持原字体、大小、颜色
                fragment.TextState.Font = originalFont;
                fragment.TextState.FontSize = originalSize;
                fragment.TextState.ForegroundColor = originalColor;
            }

        }
        private string GetRandomFTIRReport(string itemName)
        {
            string basePath = Path.Combine(AppSettings.Configuration["AppSettings:FileServerPath"], "FTIR");

            if (!Directory.Exists(basePath))
                throw new Exception("FTIR目录不存在");

            // 查找匹配的目录（名称 = itemName）
            var targetDirs = Directory.GetDirectories(basePath, "*", SearchOption.TopDirectoryOnly)
                                      .Where(dir => Path.GetFileName(dir).Equals(itemName, StringComparison.OrdinalIgnoreCase))
                                      .ToList();

            if (!targetDirs.Any())
                throw new Exception($"未找到与物料名称 {itemName} 匹配的文件夹");

            // 搜索所有子目录中的 PDF 文件
            var pdfFiles = Directory.GetFiles(targetDirs.First(), "*.pdf", SearchOption.AllDirectories);

            if (pdfFiles.Length == 0)
                throw new Exception($"未在物料 {itemName} 文件夹下找到PDF报告");

            // 随机选取一个 PDF 文件
            Random rand = new Random();
            string selectedPdf = pdfFiles[rand.Next(pdfFiles.Length)];

            return selectedPdf;
        }
        private void SavePDFToScanDoc(string docType, string scandocName, string peopleId, string COLUM002ID, string COLUM001ID)
        {
            FileInfo file = new FileInfo(scandocName);
            if (!file.Directory.Exists)
            {
                file.Directory.Create();
            }

            Db.Ado.ExecuteCommand($"DELETE SCANDOC WHERE PEOPLEID='{peopleId}' AND COLUM002ID='{COLUM002ID}' AND COLUM001ID='{COLUM001ID}'");

            string sql = @"
            INSERT INTO SCANDOC (TENID, SCANDOCID, SCANDOCCODE, SCANDOCNAME, DOCTYPE, PEOPLEID, createdate, SCANDOC_user,COLUM002ID,COLUM001ID)
            VALUES ('001', @SCANDOCID, @SCANDOCID, @SCANDOCNAME, @DOCTYPE, @PEOPLEID, CONVERT(VARCHAR(20), GETDATE(), 120), @PEOPLEID, @COLUM002ID, @COLUM001ID)";

            // 定义参数
            var parameters = new SugarParameter[]
            {
                new SugarParameter("@SCANDOCID", Guid.NewGuid().ToString()),
                new SugarParameter("@SCANDOCNAME", scandocName.Replace(AppSettings.Configuration["AppSettings:FileServerPath"],@"\")),
                new SugarParameter("@DOCTYPE", docType),
                new SugarParameter("@PEOPLEID", peopleId),
                new SugarParameter("@COLUM002ID",COLUM002ID),
                new SugarParameter("@COLUM001ID",COLUM001ID)
            };

            // 执行 SQL 命令
            Db.Ado.ExecuteCommand(sql, parameters);
        }

        #endregion

        #region GetCOCfile
        public void GetCOCfile(COCInputDto parm){
            string COCID = parm.COCID;
            string[] FIX_VALUE = parm.FIX_VALUE;
            string ID = parm.ID;
            //通过COCID获取模版
            string fileName = Db.Ado.GetString($@"select FILENAME from COC where COCID='{COCID}'");
            if (string.IsNullOrEmpty(fileName)) {
                throw new Exception($"COCID[{parm.COCID}]在数据库中找不到模版文件!");
            }
            if (!File.Exists(fileName)) {
                throw new Exception($"COCID[{parm.COCID}]在数据库中模版文件不存在!FILENAME:[{fileName}]");
            }
            DataSet ds = GetCOCDataSource(parm);

            DataTable dtZONE = Db.Ado.GetDataTable($@"select * from COC_ZONE where COCID='{parm.COCID}' order by COC_ZONECODE");
            string newFile = FillExcelFileContent(fileName, dtZONE, ds, parm);

            //保存到SCANDOC
            SaveCOCToScanDoc("COC报告", newFile, parm.ID, parm.COCID, parm.COCID, parm.COCID);
        }

        private string FillExcelFileContent(string fileName, DataTable dtZONE, DataSet ds, COCInputDto parm) {
            var newFileName = $"{parm.COCID}_{DateTime.Now.ToString("yyyyMMddHHmmss")}.xlsx";
            string filePath = Path.Combine(AppSettings.Configuration["AppSettings:FileServerPath"], @$"Test\COC\{parm.COCID}\{newFileName}");
            File.Copy(fileName, filePath, true);
            using (ExcelHelper excelHelper = new ExcelHelper(filePath)) {
                //向Excel里面填充数据
                foreach (DataRow dr in dtZONE.Rows) {
                    DataTable dtZONE_D = Db.Ado.GetDataTable($@"select * from COC_ZONE_D where COC_ZONEID='{dr["COC_ZONEID"].ToString()}'");
                    string SHEETNAME = dr["SHEETNAME"].ToString();
                    foreach (DataRow drZONE_D in dtZONE_D.Rows) {
                        string COLUM001ID = drZONE_D["drZONE_D"].ToString();
                        string ANI = drZONE_D["ANI"].ToString();
                        string COLUMN = drZONE_D["COLUMN"].ToString();
                        string CELLS = drZONE_D["CELLS"].ToString();
                        if (!string.IsNullOrEmpty(COLUM001ID)) { //数据源字段

                        }
                        if (!string.IsNullOrEmpty(ANI)) { //汇总栏位
                            if (ANI == "ANI_001") {//样本合并值
                                excelHelper.AddTextToCell(SHEETNAME, CELLS, "TestANI_001");
                            }
                            if (ANI == "ANI_002") {//附件合并值
                                string[] attachs = new string[] { @"C:\Users\Administrator\Desktop\Temp\11.txt", @"C:\Users\Administrator\Desktop\Temp\12.txt" };
                                excelHelper.AddAttachsToCell(SHEETNAME, CELLS, attachs);
                            }
                        }
                    }
                }
            }
            return filePath;
        }

        public DataTable GetCOCVLOOK(string COC_VLOOKID) {
            DataTable dtResult = new DataTable();
            DataTable dtVLOOK = Db.Ado.GetDataTable($@"select * from COC_VLOOK where COC_VLOOKID='{COC_VLOOKID}'");
            if (dtVLOOK.Rows.Count == 0) {
                throw new Exception($"COC_VLOOKID[{COC_VLOOKID}]在数据库中找不到!");
            }
            DataRow drVLOOK = dtVLOOK.Rows[0];
            string COULM002ID = drVLOOK["COULM002ID"].ToString();
            string GOUPBY = drVLOOK["GOUPBY"].ToString();
            string GROUPBYNAME = drVLOOK["GROUPBYNAME"].ToString();
            string GROUPBYNAME_C = drVLOOK["GROUPBYNAME_C"].ToString();
            string FIX_FILED = drVLOOK["FIX_FILED"].ToString();
            //COC_VLOOK cOC_VLOOK = new COC_VLOOK();
            //cOC_VLOOK.COC_VLOOKID = COC_VLOOKID;
            //cOC_VLOOK.COULM002ID = COULM002ID;
            //cOC_VLOOK.GOUPBY = GOUPBY;
            //cOC_VLOOK.GROUPBYNAME = GROUPBYNAME;
            //cOC_VLOOK.GROUPBYNAME_C = GROUPBYNAME_C;
            //cOC_VLOOK.FIX_FILED = FIX_FILED;

            DataTable dtCOULM002ID = Db.Ado.GetDataTable($@"select STRSQL,FIX_FILED from COULM002_COC where COULM002ID='{COULM002ID}'");
            if (dtCOULM002ID.Rows.Count == 0) {
                throw new Exception($"COULM002ID[{COULM002ID}]在数据库COULM002_COC中找不到!");
            }
            string STRSQL = dtCOULM002ID.Rows[0]["STRSQL"].ToString().Replace("@u","1");
            string COULM002_FIX_FILED = dtCOULM002ID.Rows[0]["FIX_FILED"].ToString();
            //加上where条件
            if (FIX_FILED == "1") {
                STRSQL += " AND "+ COULM002_FIX_FILED;
            }
            //执行sql获取原始数据源
            DataTable dtCOULM002Source = Db.Ado.GetDataTable(STRSQL);

            //按照GroupBy分组
            switch (GOUPBY) {
                case "GOUPBY_001"://分组合并
                    break;
                case "GOUPBY_002"://全部合并
                    break;
                case "GOUPBY_003"://行转列合并
                    break;
                default:
                    break;
            }
            return dtResult;
        }

        private void SaveCOCToScanDoc(string docType, string scandocName, string peopleId, string INSPECT_DEV1ID, string COLUM002ID, string COLUM001ID) {
            Db.Ado.ExecuteCommand($"DELETE SCANDOC WHERE COLUM002ID='{COLUM002ID}' AND COLUM001ID='{COLUM001ID}'");

            string sql = @"
            INSERT INTO SCANDOC (TENID, SCANDOCID, SCANDOCCODE, SCANDOCNAME, DOCTYPE, PEOPLEID, createdate, SCANDOC_user,INSPECT_DEV1ID,COLUM002ID, COLUM001ID)
            VALUES ('001', @SCANDOCID, @SCANDOCID, @SCANDOCNAME, @DOCTYPE, @PEOPLEID, CONVERT(VARCHAR(20), GETDATE(), 120), @PEOPLEID, @INSPECT_DEV1ID,@COLUM002ID, @COLUM001ID)";

            // 定义参数
            var parameters = new SugarParameter[]
            {
                new SugarParameter("@SCANDOCID", Guid.NewGuid().ToString()),
                new SugarParameter("@SCANDOCNAME", scandocName.Replace(AppSettings.Configuration["AppSettings:FileServerPath"],@"\")),
                new SugarParameter("@DOCTYPE", docType),
                new SugarParameter("@PEOPLEID", peopleId),
                new SugarParameter("@INSPECT_DEV1ID", INSPECT_DEV1ID),
                new SugarParameter("@COLUM002ID", COLUM002ID),
                new SugarParameter("@COLUM001ID", COLUM001ID)
            };

            // 执行 SQL 命令
            Db.Ado.ExecuteCommand(sql, parameters);
        }
        #endregion

        #region GetCOCDataSource
        public DataSet GetCOCDataSource(COCInputDto parm) {
            DataSet ds = new DataSet();
            DataTable dtVLOOKID = Db.Ado.GetDataTable($@"select distinct COC_VLOOKID from COC_ZONE where COCID='{parm.COCID}'");
            //if (dtVLOOKID.Rows.Count == 0) {
            //    throw new Exception($"COCID[{parm.COCID}]在数据库中找不到COC_ZONE数据源!");
            //}
            //foreach (DataRow drVLOOKID in dtVLOOKID.Rows) {
            //    string VLOOKID = drVLOOKID[0].ToString();
            //    DataTable dtCOCVLOOK = GetCOCVLOOK(VLOOKID);
            //    dtCOCVLOOK.TableName = VLOOKID;
            //    ds.Tables.Add(dtCOCVLOOK);
            //}

            //测试Excel
            string filePath = @"C:\Users\Administrator\Desktop\Temp\test.xlsx";
            using (ExcelHelper excelHelper = new ExcelHelper(filePath)) {
                excelHelper.AddTextToCell("Sheet4", "F2", "TestANI_001");
                string[] attachs = new string[] {
                    @"C:\Users\Administrator\Desktop\Temp\1.xlsx",
                    @"C:\Users\Administrator\Desktop\Temp\2.docx" ,
                    @"C:\Users\Administrator\Desktop\Temp\3.pdf" ,
                    @"C:\Users\Administrator\Desktop\Temp\44.png",
                    @"C:\Users\Administrator\Desktop\Temp\33.png"};
                excelHelper.AddAttachsToCell("Sheet4", "G2", attachs);
                excelHelper.CopyRow("Sheet8", new int[] { 42, 43, 44, 45, 46, 47 }, 48);
            }

            return ds;
        }
        #endregion
    }

}
