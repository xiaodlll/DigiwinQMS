//------------------------------------------------------------------------------
// <auto-generated>
//     此代码已从模板生成手动更改此文件可能导致应用程序出现意外的行为。
//     如果重新生成代码，将覆盖对此文件的手动更改。
//     author MEIAM
// </auto-generated>
//------------------------------------------------------------------------------
using Meiam.System.Model;
using System.Threading.Tasks;
using System;

namespace Meiam.System.Interfaces
{
    public class MSService : BaseService<INSPECT_TENSILE_D>, IMSService
    {

        public MSService(IUnitOfWork unitOfWork) : base(unitOfWork)
        {
        }

        #region ERP收料通知单
        [HttpPost("lotNotice")]
        public void PostLotNotice(LotNoticeRequest request)
        {
            try
            {
                // 验证请求模型数据
                if (!ModelState.IsValid)
                {
                    var errorMessages = string.Join("; ", ModelState.Values
                        .SelectMany(v => v.Errors)
                        .Select(e => e.ErrorMessage));

                    //TODO: logger

                    return BadRequest(new ApiResponse
                    {
                        Success = false,
                        message = $"收料通知单接收失败，原因：{errorMessages}"
                    });
                }

                // TODO: 实际业务逻辑处理


                //TODO: logger


                return Ok(new ApiResponse
                {
                    Success = true,
                    message = "收料通知单接收成功"
                });
            }
            catch (System.Exception ex)
            {
                //TODO: logger

                return StatusCode(500, new ApiResponse
                {
                    Success = false,
                    message = $"收料通知单接收失败，原因：系统内部错误 - {ex.Message}"
                });
            }
        }
        #endregion

        #region 首检单据 
        [HttpPost("workorderSync")]
        public async Task<IActionResult> WorkOrderSync(WorkOrderSyncRequest request)
        {
            try
            {
                // 验证模型
                if (!ModelState.IsValid)
                {
                    var errors = ModelState.Values
                        .SelectMany(v => v.Errors)
                        .Select(e => e.ErrorMessage)
                        .ToList();

                    //TODO: logger

                    return BadRequest(new ApiResponse
                    {
                        Success = false,
                        Message = $"MES 工单数据同步失败：{string.Join("; ", errors)}"
                    });
                }

                // TODO: 处理工单同步逻辑
                var result = false;

                if (!result.Success)
                {
                    return BadRequest(new ApiResponse
                    {
                        Success = false,
                        Message = $"MES 工单数据同步失败：{result.Message}"
                    });
                }

                //TODO: logger

                return Ok(new ApiResponse
                {
                    Success = true,
                    Message = "MES 工单数据同步成功"
                });
            }
            catch (Exception ex)
            {
                //TODO: logger

                return StatusCode(500, new ApiResponse
                {
                    Success = false,
                    Message = $"MES 工单数据同步失败，原因：系统内部错误 - {ex.Message}"
                });
            }
        }
        #endregion

        #region 产品检验结果 

        #endregion

        #region ERP物料数据同步 

        #endregion

        #region ERP客户同步 

        #endregion
    }
}
