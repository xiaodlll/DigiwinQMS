//------------------------------------------------------------------------------
// <auto-generated>
//     此代码已从模板生成手动更改此文件可能导致应用程序出现意外的行为。
//     如果重新生成代码，将覆盖对此文件的手动更改。
//     author MEIAM
// </auto-generated>
//------------------------------------------------------------------------------
using Meiam.System.Model;
using System.Threading.Tasks;
using System;
using Microsoft.Extensions.Logging;
using Microsoft.EntityFrameworkCore;
using System.Collections.Generic;
using Microsoft.Data.SqlClient;
using System.Data.Common;
using Microsoft.Extensions.Configuration;

namespace Meiam.System.Interfaces
{
    public class MSService : BaseService<INSPECT_TENSILE_D>, IMSService
    {

        public MSService(IUnitOfWork unitOfWork) : base(unitOfWork)
        {
        }

        private readonly ILogger<MSService> _logger;
        private readonly string _connectionString;

        public MSService(IUnitOfWork unitOfWork, ILogger<MSService> logger, IConfiguration config) : base(unitOfWork)
        {
            _logger = logger;
            _connectionString = config.GetConnectionString("ConnectionString");

        }

        #region ERP收料通知单
        public async Task<ApiResponse> ProcessLotNoticeAsync(LotNoticeRequest request)
        {
            _logger.LogInformation("开始处理收料通知单，单号: {ErpArrivedId}", request.ERP_ARRIVEDID);
            try
            {
                // 验证数据
                if (request.LOT_QTY <= 0)
                {
                    _logger.LogWarning("到货数量无效: {LotQty}", request.LOT_QTY);
                    throw new ArgumentException("到货数量必须大于0");
                }

                // 生成检验单号
                var inspectionId = GenerateInspectionId();
                _logger.LogInformation("生成检验单号: {InspectionId}", inspectionId);

                // 保存到数据库
                _logger.LogDebug("正在保存收料通知单到数据库...");
                await SaveToDatabase(request, inspectionId);


                await Task.Delay(100); // 模拟异步操作

                _logger.LogInformation("收料通知单处理成功，单号: {ErpArrivedId}", request.ERP_ARRIVEDID);

                return new ApiResponse
                {
                    Success = true,
                    Message = "收料通知单接收成功",
                    // 可以返回生成的检验单号
                    Data = new { InspectionId = inspectionId }
                };
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "处理收料通知单失败，单号: {ErpArrivedId}", request.ERP_ARRIVEDID);

                return new ApiResponse
                {
                    Success = false,
                    Message = $"收料通知单接收失败，原因：{ex.Message}"
                };
            }
        }

        private string GenerateInspectionId()
        {
            return $"IQC-{DateTime.Now:yyyyMMddHHmmss}-{Guid.NewGuid().ToString().Substring(0, 4).ToUpper()}";
        }

        public async Task SaveToDatabase(LotNoticeRequest request, string inspectionId)
        {
            await using var connection = new SqlConnection(_connectionString);
            await connection.OpenAsync();
            using var transaction = await connection.BeginTransactionAsync();

            try
            {
                // 保存数据
                //await SaveMainInspection(connection, transaction, request, inspectionId);
                
                await transaction.CommitAsync();
            }
            catch
            {
                await transaction.RollbackAsync();
                throw;
            }
        }

        //private async Task SaveMainInspection(SqlConnection conn, DbTransaction trans,
        //    LotNoticeRequest request, string inspectionId)
        //{
        //    const string sql = @"
        //        INSERT INTO INSPECT_IQC (
        //            TENID, INSPECT_IQCID, INSPECT_IQCCREATEUSER, 
        //            INSPECT_IQCCREATEDATE, ITEMNAME, ERP_ARRIVEDID, 
        //            LOT_QTY, ITEMID, LOTNO, 
        //            APPLY_DATE, ITEM_SPECIFICATION, QUA_DATE,
        //            PRO_DATE, LENGTH, WIDTH,
        //            INUM, ENTRYID, ORGID,
        //            KEEID
        //        ) VALUES (
        //            @TenId, @InspectIqcId, @InspectIqcCreateUser, 
        //            getdate(), @ItemName, @ErpArrivedId,
        //            @LotQty, @ItemId, @LotNo, 
        //            @ApplyDate, @ItemSpecification, @QuaDate,
        //            @ProDate, @Length, @Width,
        //            @Inum, @EntryId, @OrgId,
        //            @KeeId
        //        )";
            
        //    await conn.ExecuteAsync(sql, new
        //    {
        //        TenId = "001",
        //        InspectIqcId = inspectionId,
        //        InspectIqcCreateUser = "system",
        //        ItemName = request.ITEMNAME,
        //        ErpArrivedId = request.ERP_ARRIVEDID,
        //        LotQty = request.LOT_QTY,
        //        ItemId = request.ITEMID,
        //        LotNo = request.LOTNO,
        //        ApplyDate = request.APPLY_DATE,
        //        ItemSpecification = request.MODEL_SPEC,
        //        QuaDate = request.QUA_DATE,
        //        ProDate = request.PRO_DATE,
        //        Length = request.LENGTH,
        //        Width = request.WIDTH,
        //        Inum = request.INUM,
        //        EntryId = request.ENTRYID,
        //        OrgId = request.ORGID,
        //        KeeId = request.ID,
        //    }, transaction: trans);
        //}
        #endregion

        #region 首检单据 
        public async Task<ApiResponse> ProcessWorkOrderAsync(WorkOrderSyncRequest request)
        {
            _logger.LogInformation("开始同步工单首检数据，工单号: {MOID}", request.MOID);

            try
            {
                // 1. 验证数据
                ValidateRequest(request);

                // 2. 业务处理（示例）
                _logger.LogDebug("正在处理首检单据...");
                await ProcessFirstArticleInspection(request);

                _logger.LogInformation("工单首检数据同步成功，工单号: {MOID}", request.MOID);

                return new ApiResponse
                {
                    Success = true,
                    Message = "MES 工单数据同步成功",
                    Data = new { InspectionType = "FAI" }
                };
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "工单首检数据同步失败，工单号: {MOID}", request.MOID);
                return new ApiResponse
                {
                    Success = false,
                    Message = $"MES 工单数据同步失败：{ex.Message}"
                };
            }
        }

        private void ValidateRequest(WorkOrderSyncRequest request)
        {
            if (string.IsNullOrWhiteSpace(request.MOID))
                throw new ArgumentException("缺少工单号");

            if (!DateTime.TryParse(request.CREATEDATE, out _))
                throw new ArgumentException("无效的日期格式");
        }

        private async Task ProcessFirstArticleInspection(WorkOrderSyncRequest request)
        {
            // TODO

            await Task.Delay(100); // 模拟异步操作
        }
        #endregion

        #region 产品检验结果(入库检) 
        public async Task<CheckResultResponse> ProcessLotCheckResult(LotCheckResultRequest request)
        {
            _logger.LogInformation("开始查询检验结果，料号: {ITEMID}", request.ITEMID);

            try
            {
                // 1. 参数验证
                ValidateRequest(request);

                // 2. 查询数据库
                var result = await QueryLotCheckResult(request);

                _logger.LogDebug("检验结果查询成功，状态: {Result}", result);

                return new CheckResultResponse
                {
                    Success = true,
                    Message = "调用成功",
                    Result = MapStateToResult(result)
                };
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "检验结果查询失败");
                return new CheckResultResponse
                {
                    Success = false,
                    Message = $"API调用失败：{ex.Message}",
                    Result = "未检验"
                };
            }
        }

        private void ValidateRequest(LotCheckResultRequest request)
        {
            if (string.IsNullOrWhiteSpace(request.ITEMID))
                throw new ArgumentException("缺少料号");
        }

        private async Task<string> QueryLotCheckResult(LotCheckResultRequest request)
        {
            var sql = @"";
            return await Db.Ado.GetStringAsync(sql, new
            {
                request.ITEMID,
                request.CHECKDATE,
                request.ORGID
            });
        }

        private string MapStateToResult(string state)
        {
            return state switch
            {
                "PSTATE_003" => "合格",
                "PSTATE_004" => "不合格",
                _ => "未检验"
            };
        }
        #endregion

        #region ERP物料数据同步 
        public async Task<MaterialSyncResponse> ProcessMaterialSyncBatch(List<MaterialSyncItem> materials)
        {
            _logger.LogInformation("开始同步物料数据，共 {Count} 条", materials.Count);

            var response = await BatchSyncMaterialsAsync(materials);

            if (response.FailedCount > 0)
            {
                _logger.LogWarning("物料同步完成，失败 {FailedCount} 条", response.FailedCount);
            }
            else
            {
                _logger.LogInformation("物料同步全部成功");
            }

            return response;
        }

        public async Task<MaterialSyncResponse> BatchSyncMaterialsAsync(List<MaterialSyncItem> materials)
        {
            var response = new MaterialSyncResponse
            {
                TotalCount = materials.Count
            };

            await using var connection = new SqlConnection(_connectionString);
            await connection.OpenAsync();
            using var transaction = await connection.BeginTransactionAsync();

            try
            {
                foreach (var item in materials)
                {
                    try
                    {
                        // 同步到ITEM表
                        //await SyncItemTable(connection,transaction,item);

                        response.SuccessCount++;
                    }
                    catch (Exception ex)
                    {
                        response.Details.Add(new MaterialSyncDetail
                        {
                            ITEMID = item.ITEMID,
                            Error = ex.Message
                        });
                        response.FailedCount++;
                    }
                }

                if (response.FailedCount == 0)
                {
                    await transaction.CommitAsync();
                    response.Success = true;
                    response.Message = $"共{response.TotalCount}条数据，同步成功{response.SuccessCount}条，失败{response.FailedCount}条";
                }
                else
                {
                    await transaction.RollbackAsync();
                    response.Success = false;
                    response.Message = $"共{response.TotalCount}条数据，同步成功{response.SuccessCount}条，失败{response.FailedCount}条";
                }
            }
            catch
            {
                await transaction.RollbackAsync();
                throw;
            }

            return response;
        }

        //private async Task SyncItemTable(SqlConnection conn, DbTransaction trans, MaterialSyncItem item)
        //{
        //const string sql = @"
        //        MERGE INTO ITEM AS target
        //        USING (SELECT @ItemId AS ITEMID, @ItemCode AS ITEMCODE, @ItemName AS ITEMNAME) AS source
        //        ON (target.ITEMID = source.ITEMID)
        //        WHEN MATCHED THEN
        //            UPDATE SET 
        //                ITEMCODE = source.ITEMCODE,
        //                ITEMNAME = source.ITEMNAME,
        //                ORGID = CASE 
        //                          WHEN target.ORGID IS NULL THEN '001'
        //                          ELSE target.ORGID + ',' + RIGHT('00' + CAST(
        //                               (SELECT COUNT(*) FROM STRING_SPLIT(target.ORGID, ',')) + 1 AS VARCHAR(3)), 3)
        //                        END
        //        WHEN NOT MATCHED THEN
        //            INSERT (ITEMID, ITEMCODE, ORGID, ITEMNAME)
        //            VALUES (source.ITEMID, source.ITEMCODE, '001', source.ITEMNAME);";

        //    await conn.ExecuteAsync(sql, new
        //    {
        //        ItemId = item.ITEMID,
        //        ItemCode = item.ITEMID,
        //        ItemName = item.ITEMNAME
        //    }, transaction: trans);
        //}

        #endregion

        #region ERP客户同步 
        public async Task<CustomerSyncResponse> ProcessCustomersSynBatch(List<CustomerSyncItem> customers)
        {
            _logger.LogInformation("开始同步客户数据，数量: {Count}", customers?.Count);

            if (customers == null || customers.Count == 0)
            {
                _logger.LogWarning("接收到空客户列表");
                return new CustomerSyncResponse
                {
                    Success = false,
                    Message = "客户列表不能为空",
                    TotalCount = 0
                };
            }

            var response = await BatchSyncCustomersAsync(customers);

            if (response.FailedCount > 0)
            {
                _logger.LogWarning("客户同步完成，失败 {FailedCount} 条", response.FailedCount);
            }
            else
            {
                _logger.LogInformation("客户同步全部成功");
            }

            return response;
        }

        public async Task<CustomerSyncResponse> BatchSyncCustomersAsync(List<CustomerSyncItem> customers)
        {
            var response = new CustomerSyncResponse { TotalCount = customers.Count };

            await using var connection = new SqlConnection(_connectionString);
            await connection.OpenAsync();
            using var transaction = await connection.BeginTransactionAsync();

            try
            {
                foreach (var customer in customers)
                {
                    try
                    {
                        // 同步表
                        //await SyncCustomerTable(connection, transaction, customer);

                        response.SuccessCount++;
                    }
                    catch (Exception ex)
                    {
                        response.Details.Add(new CustomerSyncDetail
                        {
                            CUSTOMCODE = customer.CUSTOMCODE,
                            Error = ex.Message
                        });
                        response.FailedCount++;
                    }
                }

                response.Message = $"共{response.TotalCount}条数据，同步成功{response.SuccessCount}条，失败{response.FailedCount}条";
                response.Success = response.FailedCount == 0;

                if (response.Success)
                    await transaction.CommitAsync();
                else
                    await transaction.RollbackAsync();

                return response;
            }
            catch
            {
                await transaction.RollbackAsync();
                throw;
            }
        }

        //private async Task SyncCustomerTable(SqlConnection conn, DbTransaction trans, CustomerSyncItem customer)
        //{
        //    const string sql = @"
        //        MERGE INTO CUSTOM AS target
        //        USING (SELECT @CustomCode AS CUSTOMCODE, @CustomName AS CUSTOMNAME) AS source
        //        ON target.CUSTOMCODE = source.CUSTOMCODE
        //        WHEN MATCHED THEN
        //            UPDATE SET CUSTOMNAME = source.CUSTOMNAME, CUSTOMID = source.CUSTOMCODE
        //        WHEN NOT MATCHED THEN
        //            INSERT (CUSTOMID, CUSTOMCODE, CUSTOMNAME)
        //            VALUES (source.CUSTOMCODE, source.CUSTOMCODE, source.CUSTOMNAME);";

        //    await conn.ExecuteAsync(sql, new
        //    {
        //        CustomCode = customer.CUSTOMCODE,
        //        CustomName = customer.CUSTOMNAME
        //    }, transaction: trans);
        //}
        #endregion
    }
}
