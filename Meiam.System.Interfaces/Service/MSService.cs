//------------------------------------------------------------------------------
// <auto-generated>
//     此代码已从模板生成手动更改此文件可能导致应用程序出现意外的行为。
//     如果重新生成代码，将覆盖对此文件的手动更改。
//     author MEIAM
// </auto-generated>
//------------------------------------------------------------------------------
using Meiam.System.Model;
using System.Threading.Tasks;
using System;
using Microsoft.Extensions.Logging;
using Microsoft.EntityFrameworkCore;

namespace Meiam.System.Interfaces
{
    public class MSService : BaseService<INSPECT_TENSILE_D>, IMSService
    {

        public MSService(IUnitOfWork unitOfWork) : base(unitOfWork)
        {
        }

        private readonly ILogger<MSService> _logger;

        public MSService(IUnitOfWork unitOfWork, ILogger<MSService> logger) : base(unitOfWork)
        {
            _logger = logger;
        }

        #region ERP收料通知单
        public async Task<ApiResponse> ProcessLotNoticeAsync(LotNoticeRequest request)
        {
            _logger.LogInformation("开始处理收料通知单，单号: {ErpArrivedId}", request.ERP_ARRIVEDID);
            try
            {
                // 验证数据
                if (request.LOT_QTY <= 0)
                {
                    _logger.LogWarning("到货数量无效: {LotQty}", request.LOT_QTY);
                    throw new ArgumentException("到货数量必须大于0");
                }

                // 生成检验单号
                var inspectionId = GenerateInspectionId();
                _logger.LogInformation("生成检验单号: {InspectionId}", inspectionId);

                // 模拟保存到数据库
                _logger.LogDebug("正在保存收料通知单到数据库...");
                // TODO:await SaveToDatabase(request, inspectionId);


                await Task.Delay(100); // 模拟异步操作

                _logger.LogInformation("收料通知单处理成功，单号: {ErpArrivedId}", request.ERP_ARRIVEDID);

                return new ApiResponse
                {
                    Success = true,
                    Message = "收料通知单接收成功",
                    // 可以返回生成的检验单号
                    Data = new { InspectionId = inspectionId }
                };
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "处理收料通知单失败，单号: {ErpArrivedId}", request.ERP_ARRIVEDID);

                return new ApiResponse
                {
                    Success = false,
                    Message = $"收料通知单接收失败，原因：{ex.Message}"
                };
            }
        }

        private string GenerateInspectionId()
        {
            return $"IQC-{DateTime.Now:yyyyMMddHHmmss}-{Guid.NewGuid().ToString().Substring(0, 4).ToUpper()}";
        }
        #endregion

        #region 首检单据 
        public async Task<ApiResponse> ProcessWorkOrderAsync(WorkOrderSyncRequest request)
        {
            _logger.LogInformation("开始同步工单首检数据，工单号: {MOID}", request.MOID);

            try
            {
                // 1. 验证数据
                ValidateRequest(request);

                // 2. 业务处理（示例）
                _logger.LogDebug("正在处理首检单据...");
                await ProcessFirstArticleInspection(request);

                _logger.LogInformation("工单首检数据同步成功，工单号: {MOID}", request.MOID);

                return new ApiResponse
                {
                    Success = true,
                    Message = "MES 工单数据同步成功",
                    Data = new { InspectionType = "FAI" }
                };
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "工单首检数据同步失败，工单号: {MOID}", request.MOID);
                return new ApiResponse
                {
                    Success = false,
                    Message = $"MES 工单数据同步失败：{ex.Message}"
                };
            }
        }

        private void ValidateRequest(WorkOrderSyncRequest request)
        {
            if (string.IsNullOrWhiteSpace(request.MOID))
                throw new ArgumentException("缺少工单号");

            if (!DateTime.TryParse(request.CREATEDATE, out _))
                throw new ArgumentException("无效的日期格式");
        }

        private async Task ProcessFirstArticleInspection(WorkOrderSyncRequest request)
        {
            // 实际业务逻辑：
            // 1. 检查工单是否存在
            // 2. 创建首检记录
            // 3. 触发相关流程

            await Task.Delay(100); // 模拟异步操作
        }
        #endregion

        #region 产品检验结果(入库检) 
        public async Task<CheckResultResponse> ProcessLotCheckResult(LotCheckResultRequest request)
        {
            _logger.LogInformation("开始查询检验结果，料号: {ITEMID}", request.ITEMID);

            try
            {
                // 1. 参数验证
                ValidateRequest(request);

                // 2. 查询数据库
                var result = await QueryLotCheckResult(request);

                _logger.LogDebug("检验结果查询成功，状态: {Result}", result);

                return new CheckResultResponse
                {
                    Success = true,
                    Message = "调用成功",
                    Result = MapStateToResult(result)
                };
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "检验结果查询失败");
                return new CheckResultResponse
                {
                    Success = false,
                    Message = $"API调用失败：{ex.Message}",
                    Result = "未检验"
                };
            }
        }

        private void ValidateRequest(LotCheckResultRequest request)
        {
            if (string.IsNullOrWhiteSpace(request.ITEMID))
                throw new ArgumentException("缺少料号");
        }

        private async Task<string> QueryLotCheckResult(LotCheckResultRequest request)
        {
            var sql = @"";
            return await Db.Ado.GetStringAsync(sql, new
            {
                request.ITEMID,
                request.CHECKDATE,
                request.ORGID
            });
        }

        private string MapStateToResult(string state)
        {
            return state switch
            {
                "PSTATE_003" => "合格",
                "PSTATE_004" => "不合格",
                _ => "未检验"
            };
        }
        #endregion

        #region ERP物料数据同步 

        #endregion

        #region ERP客户同步 

        #endregion
    }
}
