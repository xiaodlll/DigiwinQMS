//------------------------------------------------------------------------------
// <auto-generated>
//     此代码已从模板生成手动更改此文件可能导致应用程序出现意外的行为。
//     如果重新生成代码，将覆盖对此文件的手动更改。
//     author MEIAM
// </auto-generated>
//------------------------------------------------------------------------------
using Meiam.System.Model;
using System.Threading.Tasks;
using System;
using Microsoft.Extensions.Logging;
using Microsoft.EntityFrameworkCore;
using System.Collections.Generic;
using Microsoft.Data.SqlClient;
using System.Data.Common;
using Microsoft.Extensions.Configuration;
using DocumentFormat.OpenXml.Office2013.Word;
using Meiam.System.Common;
using SqlSugar;
using System.Data;
using System.Linq;

namespace Meiam.System.Interfaces
{
    public class MSService : BaseService<INSPECT_TENSILE_D>, IMSService
    {

        public MSService(IUnitOfWork unitOfWork) : base(unitOfWork)
        {
        }

        private readonly ILogger<MSService> _logger;
        private readonly string _connectionString;

        public MSService(IUnitOfWork unitOfWork, ILogger<MSService> logger) : base(unitOfWork)
        {
            _logger = logger;
        }

        #region ERP收料通知单
        public async Task<ApiResponse> ProcessLotNoticeAsync(List<LotNoticeRequest> requests)
        {
            _logger.LogInformation("开始处理收料通知单");
            try
            {
                foreach (var request in requests)
                {
                    // 验证数据
                    if (request.LOT_QTY <= 0)
                    {
                        _logger.LogWarning("到货数量无效: {LotQty}", request.LOT_QTY);
                        throw new ArgumentException("到货数量必须大于0");
                    }

                    // 生成检验单号
                    var inspectionId = GenerateInspectionId();
                    _logger.LogInformation("生成检验单号: {InspectionId}", inspectionId);

                    // 保存到数据库
                    _logger.LogDebug("正在保存收料通知单到数据库...");
                    SaveToDatabase(request, inspectionId);

                    await Task.Delay(10); // 模拟异步操作
                }

                _logger.LogInformation("收料通知单处理成功");

                return new ApiResponse
                {
                    Success = true,
                    Message = "收料通知单接收成功",
                };
            }
            catch (Exception ex)
            {
                return new ApiResponse
                {
                    Success = false,
                    Message = $"收料通知单接收失败，原因：{ex.Message}"
                };
            }
        }

        private string GenerateInspectionId()
        {
            string INSPECT_CODE = "";//检验单号

            const string sql = @"
                DECLARE @INSPECT_CODE  	  NVARCHAR(200) 

                --获得IQC检验单号
                SELECT TOP 1 @INSPECT_CODE=CAST(CAST(dbo.getNumericValue(INSPECT_IQCCODE) AS DECIMAL)+1 AS CHAR)  FROM  INSPECT_IQC
                WHERE  TENID='001' AND ISNULL(REPLACE(INSPECT_IQCCODE,'IQC_',''),'') like REPLACE(CONVERT(VARCHAR(10),GETDATE(),120),'-','')+'%' 
                ORDER BY INSPECT_IQCCODE DESC

                IF(ISNULL(@INSPECT_CODE,'')='')
                   SET @INSPECT_CODE ='IQC_'+REPLACE(CONVERT(VARCHAR(10),GETDATE(),120),'-','')+'001'
                ELSE 
                   SET @INSPECT_CODE ='IQC_'+@INSPECT_CODE

                SELECT @INSPECT_CODE AS INSPECT_CODE
                ";

            // 执行 SQL 命令
            var dataTable = Db.Ado.GetDataTable(sql);
            if (dataTable.Rows.Count > 0)
            {
                INSPECT_CODE = dataTable.Rows[0]["INSPECT_CODE"].ToString().Trim();
            }
            return INSPECT_CODE;
        }

        public void SaveToDatabase(LotNoticeRequest request, string inspectionId)
        {
            try
            {
                // 保存数据
                SaveMainInspection(request, inspectionId);
            }
            catch
            {
                throw;
            }
        }

        private void SaveMainInspection(LotNoticeRequest request, string inspectionId)
        {
            const string sql = @"
                INSERT INTO INSPECT_IQC (
                    TENID, INSPECT_IQCID, INSPECT_IQCCREATEUSER, 
                    INSPECT_IQCCREATEDATE, ITEMNAME, ERP_ARRIVEDID, 
                    LOT_QTY, INSPECT_IQCCODE, ITEMID, LOTNO, 
                    APPLY_DATE, ITEM_SPECIFICATION, QUA_DATE,
                    PRO_DATE, LENGTH, WIDTH,
                    INUM, ENTRYID, ORGID, SEQ,BUSINESSTYPE,
                    KEEID
                ) VALUES (
                    @TenId, @InspectIqcId, @InspectIqcCreateUser, 
                    getdate(), @ItemName, @ErpArrivedId,
                    @LotQty, @InspectIqcCode, @ItemId, @LotNo, 
                    @ApplyDate, @ItemSpecification, @QuaDate,
                    @ProDate, @Length, @Width,
                    @Inum, @EntryId, @OrgId, @Seq,@BusinessType,
                    @KeeId
                )";

            // 定义参数
            var parameters = new SugarParameter[]
            {
                new SugarParameter("@TenId", "001"),
                new SugarParameter("@InspectIqcId", inspectionId),
                new SugarParameter("@InspectIqcCreateUser", "system"),
                new SugarParameter("@ItemName", request.ITEMNAME),
                new SugarParameter("@ErpArrivedId", request.ERP_ARRIVEDID),
                new SugarParameter("@LotQty", request.LOT_QTY),
                new SugarParameter("@InspectIqcCode", inspectionId),
                new SugarParameter("@ItemId", request.ITEMID),
                new SugarParameter("@LotNo", request.LOTNO),
                new SugarParameter("@ApplyDate", request.APPLY_DATE),
                new SugarParameter("@ItemSpecification", request.MODEL_SPEC),
                new SugarParameter("@QuaDate", request.QUA_DATE),
                new SugarParameter("@ProDate", request.PRO_DATE),
                new SugarParameter("@Length", request.LENGTH),
                new SugarParameter("@Width", request.WIDTH),
                new SugarParameter("@Inum", request.INUM),
                new SugarParameter("@EntryId", request.ENTRYID),
                new SugarParameter("@OrgId", request.ORGID),
                new SugarParameter("@Seq", request.SEQ),
                new SugarParameter("@BusinessType", request.BUSINESSTYPE),
                new SugarParameter("@KeeId", request.ID)
            };

            // 执行 SQL 命令
            Db.Ado.ExecuteCommand(sql, parameters);
        }
        #endregion

        #region 首检单据 
        public async Task<ApiResponse> ProcessWorkOrderAsync(List<WorkOrderSyncRequest> requests)
        {
            _logger.LogInformation("开始同步工单首检数据");

            try
            {
                foreach (var request in requests)
                {
                    // 验证数据
                    ValidateRequest(request);

                    // 生成FPI检验单号
                    var inspectionFpiId = GenerateInspectionFpiId();
                    _logger.LogInformation("生成检验单号: {InspectionFpiId}", inspectionFpiId);

                    // 业务处理
                    _logger.LogDebug("正在处理首检单据...");
                    ProcessFirstArticleInspection(request, inspectionFpiId);

                    await Task.Delay(10);
                    _logger.LogInformation("工单首检数据同步成功，工单号: {MOID}", request.MOID);
                }
                return new ApiResponse
                {
                    Success = true,
                    Message = "MES 工单数据同步成功",
                };
            }
            catch (Exception ex)
            {
                return new ApiResponse
                {
                    Success = false,
                    Message = $"MES 工单数据同步失败：{ex.Message}"
                };
            }
        }

        private void ValidateRequest(WorkOrderSyncRequest request)
        {
            if (string.IsNullOrWhiteSpace(request.MOID))
                throw new ArgumentException("缺少工单号");

            if (!DateTime.TryParse(request.CREATEDATE, out _))
                throw new ArgumentException("无效的日期格式");
        }

        private string GenerateInspectionFpiId()
        {
            string INSPECT_CODE = "";//检验单号

            const string sql = @"
                DECLARE @INSPECT_CODE  	  NVARCHAR(200) 

                --获得FPI检验单号
                SELECT TOP 1 @INSPECT_CODE=CAST(CAST(dbo.getNumericValue(INSPECT_FPICODE) AS DECIMAL)+1 AS CHAR)  FROM  INSPECT_FPI
                WHERE  TENID='001' AND ISNULL(REPLACE(INSPECT_FPICODE,'FPI_',''),'') like REPLACE(CONVERT(VARCHAR(10),GETDATE(),120),'-','')+'%' 
                ORDER BY INSPECT_FPICODE DESC

                IF(ISNULL(@INSPECT_CODE,'')='')
                   SET @INSPECT_CODE ='FPI_'+REPLACE(CONVERT(VARCHAR(10),GETDATE(),120),'-','')+'001'
                ELSE 
                   SET @INSPECT_CODE ='FPI_'+@INSPECT_CODE

                SELECT @INSPECT_CODE AS INSPECT_CODE
                ";

            // 执行 SQL 命令
            var dataTable = Db.Ado.GetDataTable(sql);
            if (dataTable.Rows.Count > 0)
            {
                INSPECT_CODE = dataTable.Rows[0]["INSPECT_CODE"].ToString().Trim();
            }
            return INSPECT_CODE;
        }

        public void ProcessFirstArticleInspection(WorkOrderSyncRequest request, string inspectionFpiId)
        {
            try
            {
                // 保存数据
                SaveMainInspectionFpi(request, inspectionFpiId);
            }
            catch
            {
                throw;
            }
        }

        private void SaveMainInspectionFpi(WorkOrderSyncRequest request, string inspectionFpiId)
        {
            const string sql = @"
                INSERT INTO INSPECT_FPI (
                    TENID, INSPECT_FPIID, INSPECT_FPICREATEUSER, 
                    INSPECT_FPICREATEDATE, MOID, INSPECT_FPICODE, 
                    ITEMNAME, ITEMID, MESFIRSTINSPECTID, ORGID
                ) VALUES (
                    @TenId, @InspectFpiId, @InspectFpiCreateUser, 
                    @InspectFpiCreateDate, @MoId, @InspectFpiCode,
                    @ItemName, @ItemId, @MesFirstInspectId, @OrgId
                )";

            // 定义参数
            var parameters = new SugarParameter[]
            {
                new SugarParameter("@TenId", "001"),
                new SugarParameter("@InspectFpiId", inspectionFpiId),
                new SugarParameter("@InspectFpiCreateUser", "system"),
                new SugarParameter("@InspectFpiCreateDate", request.CREATEDATE),
                new SugarParameter("@MoId", request.MOID),
                new SugarParameter("@InspectFpiCode", inspectionFpiId),
                new SugarParameter("@ItemName", request.ITEMNAME),
                new SugarParameter("@ItemId", request.ITEMID),
                new SugarParameter("@MesFirstInspectId", request.ID),
                new SugarParameter("@OrgId", request.ORGID)
            };

            // 执行 SQL 命令
            Db.Ado.ExecuteCommand(sql, parameters);
        }
        #endregion

        #region 产品检验结果(入库检) 
        public async Task<CheckResultResponse> ProcessLotCheckResult(LotCheckResultRequest request)
        {
            _logger.LogInformation("开始查询检验结果，料号: {ITEMID}", request.ITEMID);

            try
            {
                // 1. 参数验证
                ValidateRequest(request);

                // 2. 查询数据库
                var result = QueryLotCheckResult(request);

                await Task.Delay(10);
                _logger.LogDebug("检验结果查询成功，状态: {Result}", result);

                return new CheckResultResponse
                {
                    Success = (result == "合格" ? true : false),
                    Message = "调用成功",
                    Result = MapStateToResult(result)
                };
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "检验结果查询失败");
                return new CheckResultResponse
                {
                    Success = false,
                    Message = $"API调用失败：{ex.Message}",
                };
            }
        }

        private void ValidateRequest(LotCheckResultRequest request)
        {
            if (string.IsNullOrWhiteSpace(request.ITEMID))
                throw new ArgumentException("缺少料号");
        }

        private string QueryLotCheckResult(LotCheckResultRequest request)
        {
            var sql = @"SELECT OQC_STATE
                FROM INSPECT_SI
                WHERE ITEMID = @ItemId
                  AND CONVERT(varchar(10), INSPECT_SINAME, 120) = @CheckDate
                  AND ORGID = @OrgId";

            // 定义参数
            var parameters = new SugarParameter[]
            {
                new SugarParameter("@ItemId", request.ITEMID),
                new SugarParameter("@CheckDate", request.CHECKDATE),
                new SugarParameter("@OrgId", request.ORGID)
            };

            // 执行 SQL 命令
            var state = Db.Ado.GetString(sql, parameters);
            return state;
        }

        private string MapStateToResult(string state)
        {
            return state switch
            {
                "PSTATE_005" => "合格",
                "PSTATE_006" => "合格",
                "PSTATE_008" => "合格",
                "PSTATE_007" => "不合格",
                _ => "未检验"
            };
        }
        #endregion

        #region ERP物料数据同步 
        public async Task<MaterialSyncResponse> ProcessMaterialSyncBatch(List<MaterialSyncItem> materials)
        {
            _logger.LogInformation("开始同步物料数据，共 {Count} 条", materials.Count);

            var response = await BatchSyncMaterialsAsync(materials);

            if (response.FailedCount > 0)
            {
                _logger.LogWarning("物料同步完成，失败 {FailedCount} 条", response.FailedCount);
            }
            else
            {
                _logger.LogInformation("物料同步全部成功");
            }

            return response;
        }

        public async Task<MaterialSyncResponse> BatchSyncMaterialsAsync(List<MaterialSyncItem> materials)
        {
            var response = new MaterialSyncResponse
            {
                TotalCount = materials.Count
            };

            try
            {
                foreach (var item in materials)
                {
                    try
                    {
                        // 1. 获取现有ORG列表
                        var existingOrgs = GetExistingOrgs(item.ITEMID);

                        // 2. 合并新旧ORGID（自动去重）
                        item.ORGID = MergeOrgIds(existingOrgs, item.ORGID);

                        // 3. 同步数据
                        SyncItemTable(item);

                        response.SuccessCount++;
                    }
                    catch (Exception ex)
                    {
                        response.Details.Add(new MaterialSyncDetail
                        {
                            ITEMID = item.ITEMID,
                            Error = ex.Message
                        });
                        response.FailedCount++;
                    }
                }

                if (response.FailedCount == 0)
                {
                    await Db.Ado.CommitTranAsync();
                    response.Success = true;
                    response.Message = $"共{response.TotalCount}条数据，同步成功{response.SuccessCount}条，失败{response.FailedCount}条";
                }
                else
                {
                    await Db.Ado.RollbackTranAsync();
                    response.Success = false;
                    response.Message = $"共{response.TotalCount}条数据，同步成功{response.SuccessCount}条，失败{response.FailedCount}条";
                }
            }
            catch
            {
                await Db.Ado.RollbackTranAsync();
                throw;
            }

            return response;
        }

        private string GetExistingOrgs(string itemId)
        {
            string sql = @"
            SELECT ORGID
            FROM ITEM 
            WHERE ITEMID = @ItemId";

            // 定义参数
            var parameters = new SugarParameter[]
            {
                new SugarParameter("@ItemId", itemId)
            };
            var dataTable = Db.Ado.GetDataTable(sql, parameters);

            if (dataTable.Rows.Count > 0)
            {
                return string.Join(";", dataTable.AsEnumerable()
                          .Select(row => row["ORGID"].ToString())); ;
            }
            else
            {
                return null;
            }
        }

        private string MergeOrgIds(string existingOrgs, string newOrgs)
        {
            var orgSet = new HashSet<string>(
                (existingOrgs ?? "").Split(';', StringSplitOptions.RemoveEmptyEntries));

            foreach (var org in (newOrgs ?? "").Split(';', StringSplitOptions.RemoveEmptyEntries))
            {
                orgSet.Add(org.Trim());
            }

            return string.Join(";", orgSet.OrderBy(x => x));
        }

        private void SyncItemTable(MaterialSyncItem item)
        {
            string sql = @"
                    MERGE INTO ITEM AS target
                    USING (SELECT @ItemId AS ITEMID, @ItemName AS ITEMNAME, @ORGID AS ORGID) AS source
                    ON target.ITEMID = source.ITEMID
                    WHEN MATCHED THEN
                        UPDATE SET ITEMNAME = source.ITEMNAME,
                                   ORGID = source.ORGID,
                                   ITEMCREATEDATE = getdate()
                    WHEN NOT MATCHED THEN
                        INSERT (ITEMID, ITEMCODE, ITEMNAME, ORGID, ITEMCREATEUSER, ITEMCREATEDATE)
                        VALUES (source.ITEMID, source.ITEMID, source.ITEMNAME, source.ORGID, 'system', getdate());";
            // 定义参数
            var parameters = new SugarParameter[]
            {
                new SugarParameter("@ItemId", item.ITEMID),
                new SugarParameter("@ItemName", item.ITEMNAME),
                new SugarParameter("@ORGID", item.ORGID)
            };

            Db.Ado.ExecuteCommand(sql, parameters);
        }

        #endregion

        #region ERP客户同步 
        public async Task<CustomerSyncResponse> ProcessCustomersSynBatch(List<CustomerSyncItem> customers)
        {
            _logger.LogInformation("开始同步客户数据，数量: {Count}", customers?.Count);

            if (customers == null || customers.Count == 0)
            {
                _logger.LogWarning("接收到空客户列表");
                return new CustomerSyncResponse
                {
                    Success = false,
                    Message = "客户列表不能为空",
                    TotalCount = 0
                };
            }

            var response = await BatchSyncCustomersAsync(customers);

            if (response.FailedCount > 0)
            {
                _logger.LogWarning("客户同步完成，失败 {FailedCount} 条", response.FailedCount);
            }
            else
            {
                _logger.LogInformation("客户同步全部成功");
            }

            return response;
        }

        public async Task<CustomerSyncResponse> BatchSyncCustomersAsync(List<CustomerSyncItem> customers)
        {
            var response = new CustomerSyncResponse { TotalCount = customers.Count };

            try
            {
                foreach (var customer in customers)
                {
                    try
                    {
                        // 1. 获取现有ORG列表
                        var existingOrgsInCustomer = GetExistingOrgsInCustom(customer.CUSTOMCODE);

                        // 2. 合并新旧ORGID（自动去重）
                        customer.ORGID = MergeOrgIdsInCustom(existingOrgsInCustomer, customer.ORGID);

                        // 3. 同步数据
                        SyncCustomerTable(customer);

                        // 同步表
                        //await SyncCustomerTable(connection, transaction, customer);

                        response.SuccessCount++;
                    }
                    catch (Exception ex)
                    {
                        response.Details.Add(new CustomerSyncDetail
                        {
                            CUSTOMCODE = customer.CUSTOMCODE,
                            Error = ex.Message
                        });
                        response.FailedCount++;
                    }
                }

                response.Message = $"共{response.TotalCount}条数据，同步成功{response.SuccessCount}条，失败{response.FailedCount}条";
                response.Success = response.FailedCount == 0;

                if (response.Success)
                    await Db.Ado.CommitTranAsync();
                else
                    await Db.Ado.RollbackTranAsync();

                return response;
            }
            catch
            {
                await Db.Ado.RollbackTranAsync();
                throw;
            }
        }

        private string GetExistingOrgsInCustom(string customCode)
        {
            string sql = @"
                SELECT ORGID
                FROM CUSTOM 
                WHERE CUSTOMID = @CustomId";

            // 定义参数
            var parameters = new SugarParameter[]
            {
                new SugarParameter("@CustomId", customCode)
            };
            var dataTable = Db.Ado.GetDataTable(sql, parameters);

            if (dataTable.Rows.Count > 0)
            {
                return string.Join(";", dataTable.AsEnumerable()
                          .Select(row => row["ORGID"].ToString())); ;
            }
            else
            {
                return null;
            }
        }

        private string MergeOrgIdsInCustom(string existingOrgsInCustomer, string newOrgs)
        {
            var orgSet = new HashSet<string>(
                (existingOrgsInCustomer ?? "").Split(';', StringSplitOptions.RemoveEmptyEntries));

            foreach (var org in (newOrgs ?? "").Split(';', StringSplitOptions.RemoveEmptyEntries))
            {
                orgSet.Add(org.Trim());
            }

            return string.Join(";", orgSet.OrderBy(x => x));
        }

        private void SyncCustomerTable(CustomerSyncItem item)
        {
            string sql = @"
                MERGE INTO CUSTOM AS target
                USING (SELECT @CustomId AS CUSTOMID, @CustomName AS CUSTOMNAME, @ORGID AS ORGID) AS source
                ON target.CUSTOMID = source.CUSTOMID
                WHEN MATCHED THEN
                    UPDATE SET CUSTOMNAME = source.CUSTOMNAME,
                                ORGID = source.ORGID,
                                CUSTOMCREATEDATE = getdate()
                WHEN NOT MATCHED THEN
                    INSERT (CUSTOMID, CUSTOMCODE, CUSTOMNAME, ORGID, CUSTOMCREATEUSER, CUSTOMCREATEDATE)
                    VALUES (source.CUSTOMID, source.CUSTOMID, source.CUSTOMNAME, source.ORGID, 'system', getdate());";
            // 定义参数
            var parameters = new SugarParameter[]
            {
                new SugarParameter("@CustomId", item.CUSTOMCODE),
                new SugarParameter("@CustomName", item.CUSTOMNAME),
                new SugarParameter("@ORGID", item.ORGID)
            };

            Db.Ado.ExecuteCommand(sql, parameters);
        }
        #endregion
    }
}
